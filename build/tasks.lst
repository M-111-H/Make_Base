ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "./FreeRTOS/tasks.c"
  18              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	prvTaskIsTaskSuspended:
  25              	.LVL0:
  26              	.LFB44:
   1:./FreeRTOS/tasks.c **** /*
   2:./FreeRTOS/tasks.c ****  * FreeRTOS Kernel V10.5.1
   3:./FreeRTOS/tasks.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./FreeRTOS/tasks.c ****  *
   5:./FreeRTOS/tasks.c ****  * SPDX-License-Identifier: MIT
   6:./FreeRTOS/tasks.c ****  *
   7:./FreeRTOS/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:./FreeRTOS/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:./FreeRTOS/tasks.c ****  * the Software without restriction, including without limitation the rights to
  10:./FreeRTOS/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:./FreeRTOS/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:./FreeRTOS/tasks.c ****  * subject to the following conditions:
  13:./FreeRTOS/tasks.c ****  *
  14:./FreeRTOS/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  15:./FreeRTOS/tasks.c ****  * copies or substantial portions of the Software.
  16:./FreeRTOS/tasks.c ****  *
  17:./FreeRTOS/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:./FreeRTOS/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:./FreeRTOS/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:./FreeRTOS/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:./FreeRTOS/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:./FreeRTOS/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:./FreeRTOS/tasks.c ****  *
  24:./FreeRTOS/tasks.c ****  * https://www.FreeRTOS.org
  25:./FreeRTOS/tasks.c ****  * https://github.com/FreeRTOS
  26:./FreeRTOS/tasks.c ****  *
  27:./FreeRTOS/tasks.c ****  */
  28:./FreeRTOS/tasks.c **** 
  29:./FreeRTOS/tasks.c **** /* Standard includes. */
  30:./FreeRTOS/tasks.c **** #include <stdlib.h>
  31:./FreeRTOS/tasks.c **** #include <string.h>
  32:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 2


  33:./FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  34:./FreeRTOS/tasks.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  35:./FreeRTOS/tasks.c ****  * task.h is included from an application file. */
  36:./FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  37:./FreeRTOS/tasks.c **** 
  38:./FreeRTOS/tasks.c **** /* FreeRTOS includes. */
  39:./FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  40:./FreeRTOS/tasks.c **** #include "task.h"
  41:./FreeRTOS/tasks.c **** #include "timers.h"
  42:./FreeRTOS/tasks.c **** #include "stack_macros.h"
  43:./FreeRTOS/tasks.c **** 
  44:./FreeRTOS/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:./FreeRTOS/tasks.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:./FreeRTOS/tasks.c ****  * for the header files above, but not in this file, in order to generate the
  47:./FreeRTOS/tasks.c ****  * correct privileged Vs unprivileged linkage and placement. */
  48:./FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:./FreeRTOS/tasks.c **** 
  50:./FreeRTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  51:./FreeRTOS/tasks.c ****  * functions but without including stdio.h here. */
  52:./FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  53:./FreeRTOS/tasks.c **** 
  54:./FreeRTOS/tasks.c **** /* At the bottom of this file are two optional functions that can be used
  55:./FreeRTOS/tasks.c ****  * to generate human readable text from the raw data generated by the
  56:./FreeRTOS/tasks.c ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  57:./FreeRTOS/tasks.c ****  * for convenience only, and are NOT considered part of the kernel. */
  58:./FreeRTOS/tasks.c ****     #include <stdio.h>
  59:./FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  60:./FreeRTOS/tasks.c **** 
  61:./FreeRTOS/tasks.c **** #if ( configUSE_PREEMPTION == 0 )
  62:./FreeRTOS/tasks.c **** 
  63:./FreeRTOS/tasks.c **** /* If the cooperative scheduler is being used then a yield should not be
  64:./FreeRTOS/tasks.c ****  * performed just because a higher priority task has been woken. */
  65:./FreeRTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()
  66:./FreeRTOS/tasks.c **** #else
  67:./FreeRTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  68:./FreeRTOS/tasks.c **** #endif
  69:./FreeRTOS/tasks.c **** 
  70:./FreeRTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  71:./FreeRTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
  72:./FreeRTOS/tasks.c **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
  73:./FreeRTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
  74:./FreeRTOS/tasks.c **** 
  75:./FreeRTOS/tasks.c **** /*
  76:./FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  77:./FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
  78:./FreeRTOS/tasks.c ****  */
  79:./FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
  80:./FreeRTOS/tasks.c **** 
  81:./FreeRTOS/tasks.c **** /* Bits used to record how a task's stack and TCB were allocated. */
  82:./FreeRTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
  83:./FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
  84:./FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
  85:./FreeRTOS/tasks.c **** 
  86:./FreeRTOS/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  87:./FreeRTOS/tasks.c ****  * value so the high water mark can be determined.  If none of the following are
  88:./FreeRTOS/tasks.c ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
  89:./FreeRTOS/tasks.c **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 3


  90:./FreeRTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
  91:./FreeRTOS/tasks.c **** #else
  92:./FreeRTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
  93:./FreeRTOS/tasks.c **** #endif
  94:./FreeRTOS/tasks.c **** 
  95:./FreeRTOS/tasks.c **** /*
  96:./FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  97:./FreeRTOS/tasks.c ****  */
  98:./FreeRTOS/tasks.c **** #define tskRUNNING_CHAR      ( 'X' )
  99:./FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR      ( 'B' )
 100:./FreeRTOS/tasks.c **** #define tskREADY_CHAR        ( 'R' )
 101:./FreeRTOS/tasks.c **** #define tskDELETED_CHAR      ( 'D' )
 102:./FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR    ( 'S' )
 103:./FreeRTOS/tasks.c **** 
 104:./FreeRTOS/tasks.c **** /*
 105:./FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 106:./FreeRTOS/tasks.c ****  * be global, rather than file scope.
 107:./FreeRTOS/tasks.c ****  */
 108:./FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 109:./FreeRTOS/tasks.c ****     #define static
 110:./FreeRTOS/tasks.c **** #endif
 111:./FreeRTOS/tasks.c **** 
 112:./FreeRTOS/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 113:./FreeRTOS/tasks.c ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 114:./FreeRTOS/tasks.c **** #ifndef configIDLE_TASK_NAME
 115:./FreeRTOS/tasks.c ****     #define configIDLE_TASK_NAME    "IDLE"
 116:./FreeRTOS/tasks.c **** #endif
 117:./FreeRTOS/tasks.c **** 
 118:./FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 119:./FreeRTOS/tasks.c **** 
 120:./FreeRTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 121:./FreeRTOS/tasks.c ****  * performed in a generic way that is not optimised to any particular
 122:./FreeRTOS/tasks.c ****  * microcontroller architecture. */
 123:./FreeRTOS/tasks.c **** 
 124:./FreeRTOS/tasks.c **** /* uxTopReadyPriority holds the priority of the highest priority ready
 125:./FreeRTOS/tasks.c ****  * state task. */
 126:./FreeRTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 127:./FreeRTOS/tasks.c ****     {                                               \
 128:./FreeRTOS/tasks.c ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 129:./FreeRTOS/tasks.c ****         {                                           \
 130:./FreeRTOS/tasks.c ****             uxTopReadyPriority = ( uxPriority );    \
 131:./FreeRTOS/tasks.c ****         }                                           \
 132:./FreeRTOS/tasks.c ****     } /* taskRECORD_READY_PRIORITY */
 133:./FreeRTOS/tasks.c **** 
 134:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 135:./FreeRTOS/tasks.c **** 
 136:./FreeRTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                \
 137:./FreeRTOS/tasks.c ****     {                                                                         \
 138:./FreeRTOS/tasks.c ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                       \
 139:./FreeRTOS/tasks.c ****                                                                               \
 140:./FreeRTOS/tasks.c ****         /* Find the highest priority queue that contains ready tasks. */      \
 141:./FreeRTOS/tasks.c ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) ) \
 142:./FreeRTOS/tasks.c ****         {                                                                     \
 143:./FreeRTOS/tasks.c ****             configASSERT( uxTopPriority );                                    \
 144:./FreeRTOS/tasks.c ****             --uxTopPriority;                                                  \
 145:./FreeRTOS/tasks.c ****         }                                                                     \
 146:./FreeRTOS/tasks.c ****                                                                               \
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 4


 147:./FreeRTOS/tasks.c ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
 148:./FreeRTOS/tasks.c ****          * the  same priority get an equal share of the processor time. */                    \
 149:./FreeRTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 150:./FreeRTOS/tasks.c ****         uxTopReadyPriority = uxTopPriority;                                                   \
 151:./FreeRTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK */
 152:./FreeRTOS/tasks.c **** 
 153:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 154:./FreeRTOS/tasks.c **** 
 155:./FreeRTOS/tasks.c **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 156:./FreeRTOS/tasks.c ****  * they are only required when a port optimised method of task selection is
 157:./FreeRTOS/tasks.c ****  * being used. */
 158:./FreeRTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )
 159:./FreeRTOS/tasks.c ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 160:./FreeRTOS/tasks.c **** 
 161:./FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 162:./FreeRTOS/tasks.c **** 
 163:./FreeRTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 164:./FreeRTOS/tasks.c ****  * performed in a way that is tailored to the particular microcontroller
 165:./FreeRTOS/tasks.c ****  * architecture being used. */
 166:./FreeRTOS/tasks.c **** 
 167:./FreeRTOS/tasks.c **** /* A port optimised version is provided.  Call the port defined macros. */
 168:./FreeRTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( ( uxPriority ), u
 169:./FreeRTOS/tasks.c **** 
 170:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 171:./FreeRTOS/tasks.c **** 
 172:./FreeRTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 173:./FreeRTOS/tasks.c ****     {                                                                                           \
 174:./FreeRTOS/tasks.c ****         UBaseType_t uxTopPriority;                                                              \
 175:./FreeRTOS/tasks.c ****                                                                                                 \
 176:./FreeRTOS/tasks.c ****         /* Find the highest priority list that contains ready tasks. */                         \
 177:./FreeRTOS/tasks.c ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 178:./FreeRTOS/tasks.c ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 179:./FreeRTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 180:./FreeRTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 181:./FreeRTOS/tasks.c **** 
 182:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 183:./FreeRTOS/tasks.c **** 
 184:./FreeRTOS/tasks.c **** /* A port optimised version is provided, call it only if the TCB being reset
 185:./FreeRTOS/tasks.c ****  * is being referenced from a ready list.  If it is referenced from a delayed
 186:./FreeRTOS/tasks.c ****  * or suspended list then it won't be in a ready list. */
 187:./FreeRTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 188:./FreeRTOS/tasks.c ****     {                                                                                              
 189:./FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 190:./FreeRTOS/tasks.c ****         {                                                                                          
 191:./FreeRTOS/tasks.c ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 192:./FreeRTOS/tasks.c ****         }                                                                                          
 193:./FreeRTOS/tasks.c ****     }
 194:./FreeRTOS/tasks.c **** 
 195:./FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 196:./FreeRTOS/tasks.c **** 
 197:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 198:./FreeRTOS/tasks.c **** 
 199:./FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 200:./FreeRTOS/tasks.c ****  * count overflows. */
 201:./FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()                                                \
 202:./FreeRTOS/tasks.c ****     {                                                                             \
 203:./FreeRTOS/tasks.c ****         List_t * pxTemp;                                                          \
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 5


 204:./FreeRTOS/tasks.c ****                                                                                   \
 205:./FreeRTOS/tasks.c ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 206:./FreeRTOS/tasks.c ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 207:./FreeRTOS/tasks.c ****                                                                                   \
 208:./FreeRTOS/tasks.c ****         pxTemp = pxDelayedTaskList;                                               \
 209:./FreeRTOS/tasks.c ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 210:./FreeRTOS/tasks.c ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 211:./FreeRTOS/tasks.c ****         xNumOfOverflows++;                                                        \
 212:./FreeRTOS/tasks.c ****         prvResetNextTaskUnblockTime();                                            \
 213:./FreeRTOS/tasks.c ****     }
 214:./FreeRTOS/tasks.c **** 
 215:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 216:./FreeRTOS/tasks.c **** 
 217:./FreeRTOS/tasks.c **** /*
 218:./FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 219:./FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 220:./FreeRTOS/tasks.c ****  */
 221:./FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )                                                             
 222:./FreeRTOS/tasks.c ****     traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                       
 223:./FreeRTOS/tasks.c ****     taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                            
 224:./FreeRTOS/tasks.c ****     listINSERT_END( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem )
 225:./FreeRTOS/tasks.c ****     tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 226:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 227:./FreeRTOS/tasks.c **** 
 228:./FreeRTOS/tasks.c **** /*
 229:./FreeRTOS/tasks.c ****  * Several functions take a TaskHandle_t parameter that can optionally be NULL,
 230:./FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 231:./FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 232:./FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 233:./FreeRTOS/tasks.c ****  */
 234:./FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 235:./FreeRTOS/tasks.c **** 
 236:./FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 237:./FreeRTOS/tasks.c ****  * of the task to which it belongs (coded to allow it to be held in reverse
 238:./FreeRTOS/tasks.c ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 239:./FreeRTOS/tasks.c ****  * is important its value is not updated due to a task priority change while it is
 240:./FreeRTOS/tasks.c ****  * being used for another purpose.  The following bit definition is used to inform
 241:./FreeRTOS/tasks.c ****  * the scheduler that the value should not be changed - in which case it is the
 242:./FreeRTOS/tasks.c ****  * responsibility of whichever module is using the value to ensure it gets set back
 243:./FreeRTOS/tasks.c ****  * to its original value when it is released. */
 244:./FreeRTOS/tasks.c **** #if ( configUSE_16_BIT_TICKS == 1 )
 245:./FreeRTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000U
 246:./FreeRTOS/tasks.c **** #else
 247:./FreeRTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x80000000UL
 248:./FreeRTOS/tasks.c **** #endif
 249:./FreeRTOS/tasks.c **** 
 250:./FreeRTOS/tasks.c **** /*
 251:./FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 252:./FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 253:./FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 254:./FreeRTOS/tasks.c ****  */
 255:./FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 256:./FreeRTOS/tasks.c **** {
 257:./FreeRTOS/tasks.c ****     volatile StackType_t * pxTopOfStack; /*< Points to the location of the last item placed on the 
 258:./FreeRTOS/tasks.c **** 
 259:./FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 260:./FreeRTOS/tasks.c ****         xMPU_SETTINGS xMPUSettings; /*< The MPU settings are defined as part of the port layer.  TH
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 6


 261:./FreeRTOS/tasks.c ****     #endif
 262:./FreeRTOS/tasks.c **** 
 263:./FreeRTOS/tasks.c ****     ListItem_t xStateListItem;                  /*< The list that the state list item of a task is 
 264:./FreeRTOS/tasks.c ****     ListItem_t xEventListItem;                  /*< Used to reference a task from an event list. */
 265:./FreeRTOS/tasks.c ****     UBaseType_t uxPriority;                     /*< The priority of the task.  0 is the lowest prio
 266:./FreeRTOS/tasks.c ****     StackType_t * pxStack;                      /*< Points to the start of the stack. */
 267:./FreeRTOS/tasks.c ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /*< Descriptive name given to the task when created
 268:./FreeRTOS/tasks.c **** 
 269:./FreeRTOS/tasks.c ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 270:./FreeRTOS/tasks.c ****         StackType_t * pxEndOfStack; /*< Points to the highest valid address for the stack. */
 271:./FreeRTOS/tasks.c ****     #endif
 272:./FreeRTOS/tasks.c **** 
 273:./FreeRTOS/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 274:./FreeRTOS/tasks.c ****         UBaseType_t uxCriticalNesting; /*< Holds the critical section nesting depth for ports that 
 275:./FreeRTOS/tasks.c ****     #endif
 276:./FreeRTOS/tasks.c **** 
 277:./FreeRTOS/tasks.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 278:./FreeRTOS/tasks.c ****         UBaseType_t uxTCBNumber;  /*< Stores a number that increments each time a TCB is created.  
 279:./FreeRTOS/tasks.c ****         UBaseType_t uxTaskNumber; /*< Stores a number specifically for use by third party trace cod
 280:./FreeRTOS/tasks.c ****     #endif
 281:./FreeRTOS/tasks.c **** 
 282:./FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 283:./FreeRTOS/tasks.c ****         UBaseType_t uxBasePriority; /*< The priority last assigned to the task - used by the priori
 284:./FreeRTOS/tasks.c ****         UBaseType_t uxMutexesHeld;
 285:./FreeRTOS/tasks.c ****     #endif
 286:./FreeRTOS/tasks.c **** 
 287:./FreeRTOS/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 288:./FreeRTOS/tasks.c ****         TaskHookFunction_t pxTaskTag;
 289:./FreeRTOS/tasks.c ****     #endif
 290:./FreeRTOS/tasks.c **** 
 291:./FreeRTOS/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 292:./FreeRTOS/tasks.c ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 293:./FreeRTOS/tasks.c ****     #endif
 294:./FreeRTOS/tasks.c **** 
 295:./FreeRTOS/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 296:./FreeRTOS/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulRunTimeCounter; /*< Stores the amount of time the task has sp
 297:./FreeRTOS/tasks.c ****     #endif
 298:./FreeRTOS/tasks.c **** 
 299:./FreeRTOS/tasks.c ****     #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
 300:./FreeRTOS/tasks.c ****         configTLS_BLOCK_TYPE xTLSBlock; /*< Memory block used as Thread Local Storage (TLS) Block f
 301:./FreeRTOS/tasks.c ****     #endif
 302:./FreeRTOS/tasks.c **** 
 303:./FreeRTOS/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 304:./FreeRTOS/tasks.c ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 305:./FreeRTOS/tasks.c ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 306:./FreeRTOS/tasks.c ****     #endif
 307:./FreeRTOS/tasks.c **** 
 308:./FreeRTOS/tasks.c ****     /* See the comments in FreeRTOS.h with the definition of
 309:./FreeRTOS/tasks.c ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 310:./FreeRTOS/tasks.c ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been conso
 311:./FreeRTOS/tasks.c ****         uint8_t ucStaticallyAllocated;                     /*< Set to pdTRUE if the task is a stati
 312:./FreeRTOS/tasks.c ****     #endif
 313:./FreeRTOS/tasks.c **** 
 314:./FreeRTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 315:./FreeRTOS/tasks.c ****         uint8_t ucDelayAborted;
 316:./FreeRTOS/tasks.c ****     #endif
 317:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 7


 318:./FreeRTOS/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
 319:./FreeRTOS/tasks.c ****         int iTaskErrno;
 320:./FreeRTOS/tasks.c ****     #endif
 321:./FreeRTOS/tasks.c **** } tskTCB;
 322:./FreeRTOS/tasks.c **** 
 323:./FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 324:./FreeRTOS/tasks.c ****  * below to enable the use of older kernel aware debuggers. */
 325:./FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 326:./FreeRTOS/tasks.c **** 
 327:./FreeRTOS/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 328:./FreeRTOS/tasks.c ****  * which static variables must be declared volatile. */
 329:./FreeRTOS/tasks.c **** portDONT_DISCARD PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 330:./FreeRTOS/tasks.c **** 
 331:./FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 332:./FreeRTOS/tasks.c ****  * xDelayedTaskList1 and xDelayedTaskList2 could be moved to function scope but
 333:./FreeRTOS/tasks.c ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 334:./FreeRTOS/tasks.c ****  * the static qualifier. */
 335:./FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /*< Prioritised ready task
 336:./FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /*< Delayed tasks. */
 337:./FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /*< Delayed tasks (two lis
 338:./FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /*< Points to the delayed 
 339:./FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /*< Points to the delayed 
 340:./FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /*< Tasks that have been r
 341:./FreeRTOS/tasks.c **** 
 342:./FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 343:./FreeRTOS/tasks.c **** 
 344:./FreeRTOS/tasks.c ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /*< Tasks that have been deleted - but 
 345:./FreeRTOS/tasks.c ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 346:./FreeRTOS/tasks.c **** 
 347:./FreeRTOS/tasks.c **** #endif
 348:./FreeRTOS/tasks.c **** 
 349:./FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 350:./FreeRTOS/tasks.c **** 
 351:./FreeRTOS/tasks.c ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /*< Tasks that are currently suspended. */
 352:./FreeRTOS/tasks.c **** 
 353:./FreeRTOS/tasks.c **** #endif
 354:./FreeRTOS/tasks.c **** 
 355:./FreeRTOS/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 356:./FreeRTOS/tasks.c ****  * the errno of the currently running task. */
 357:./FreeRTOS/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 358:./FreeRTOS/tasks.c ****     int FreeRTOS_errno = 0;
 359:./FreeRTOS/tasks.c **** #endif
 360:./FreeRTOS/tasks.c **** 
 361:./FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 362:./FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 363:./FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 364:./FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
 365:./FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 366:./FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 367:./FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;
 368:./FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 369:./FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 370:./FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 371:./FreeRTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          /*< Holds the 
 372:./FreeRTOS/tasks.c **** 
 373:./FreeRTOS/tasks.c **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 374:./FreeRTOS/tasks.c ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 8


 375:./FreeRTOS/tasks.c ****  * to determine the number of priority lists to read back from the remote target. */
 376:./FreeRTOS/tasks.c **** const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 377:./FreeRTOS/tasks.c **** 
 378:./FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:./FreeRTOS/tasks.c ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:./FreeRTOS/tasks.c ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:./FreeRTOS/tasks.c ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:./FreeRTOS/tasks.c ****  * moves the task's event list item into the xPendingReadyList, ready for the
 383:./FreeRTOS/tasks.c ****  * kernel to move the task from the pending ready list into the real ready list
 384:./FreeRTOS/tasks.c ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 385:./FreeRTOS/tasks.c ****  * accessed from a critical section. */
 386:./FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) pdFALSE;
 387:./FreeRTOS/tasks.c **** 
 388:./FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:./FreeRTOS/tasks.c **** 
 390:./FreeRTOS/tasks.c **** /* Do not move these variables to function scope as doing so prevents the
 391:./FreeRTOS/tasks.c ****  * code working with debuggers that need to remove the static qualifier. */
 392:./FreeRTOS/tasks.c ****     PRIVILEGED_DATA static configRUN_TIME_COUNTER_TYPE ulTaskSwitchedInTime = 0UL;    /*< Holds the
 393:./FreeRTOS/tasks.c ****     PRIVILEGED_DATA static volatile configRUN_TIME_COUNTER_TYPE ulTotalRunTime = 0UL; /*< Holds the
 394:./FreeRTOS/tasks.c **** 
 395:./FreeRTOS/tasks.c **** #endif
 396:./FreeRTOS/tasks.c **** 
 397:./FreeRTOS/tasks.c **** /*lint -restore */
 398:./FreeRTOS/tasks.c **** 
 399:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 400:./FreeRTOS/tasks.c **** 
 401:./FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 402:./FreeRTOS/tasks.c **** 
 403:./FreeRTOS/tasks.c **** /**
 404:./FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 405:./FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 406:./FreeRTOS/tasks.c ****  * is in any other state.
 407:./FreeRTOS/tasks.c ****  */
 408:./FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 409:./FreeRTOS/tasks.c **** 
 410:./FreeRTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 411:./FreeRTOS/tasks.c **** 
 412:./FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 413:./FreeRTOS/tasks.c **** 
 414:./FreeRTOS/tasks.c **** /*
 415:./FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 416:./FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 417:./FreeRTOS/tasks.c ****  */
 418:./FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 419:./FreeRTOS/tasks.c **** 
 420:./FreeRTOS/tasks.c **** /*
 421:./FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 422:./FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 423:./FreeRTOS/tasks.c ****  * creation of the first user task.
 424:./FreeRTOS/tasks.c ****  *
 425:./FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 426:./FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 427:./FreeRTOS/tasks.c ****  *
 428:./FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 429:./FreeRTOS/tasks.c ****  *
 430:./FreeRTOS/tasks.c ****  */
 431:./FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 9


 432:./FreeRTOS/tasks.c **** 
 433:./FreeRTOS/tasks.c **** /*
 434:./FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 435:./FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 436:./FreeRTOS/tasks.c ****  *
 437:./FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 438:./FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 439:./FreeRTOS/tasks.c ****  */
 440:./FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 441:./FreeRTOS/tasks.c **** 
 442:./FreeRTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 443:./FreeRTOS/tasks.c **** 
 444:./FreeRTOS/tasks.c **** #endif
 445:./FreeRTOS/tasks.c **** 
 446:./FreeRTOS/tasks.c **** /*
 447:./FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 448:./FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 449:./FreeRTOS/tasks.c ****  * and its TCB deleted.
 450:./FreeRTOS/tasks.c ****  */
 451:./FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 452:./FreeRTOS/tasks.c **** 
 453:./FreeRTOS/tasks.c **** /*
 454:./FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 455:./FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 456:./FreeRTOS/tasks.c ****  */
 457:./FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 458:./FreeRTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 459:./FreeRTOS/tasks.c **** 
 460:./FreeRTOS/tasks.c **** /*
 461:./FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 462:./FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 463:./FreeRTOS/tasks.c ****  * a suspended list, etc.).
 464:./FreeRTOS/tasks.c ****  *
 465:./FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 466:./FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 467:./FreeRTOS/tasks.c ****  */
 468:./FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 469:./FreeRTOS/tasks.c **** 
 470:./FreeRTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 471:./FreeRTOS/tasks.c ****                                                      List_t * pxList,
 472:./FreeRTOS/tasks.c ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 473:./FreeRTOS/tasks.c **** 
 474:./FreeRTOS/tasks.c **** #endif
 475:./FreeRTOS/tasks.c **** 
 476:./FreeRTOS/tasks.c **** /*
 477:./FreeRTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 478:./FreeRTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 479:./FreeRTOS/tasks.c ****  */
 480:./FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 481:./FreeRTOS/tasks.c **** 
 482:./FreeRTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 483:./FreeRTOS/tasks.c ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
 484:./FreeRTOS/tasks.c **** 
 485:./FreeRTOS/tasks.c **** #endif
 486:./FreeRTOS/tasks.c **** 
 487:./FreeRTOS/tasks.c **** /*
 488:./FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 10


 489:./FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 490:./FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 491:./FreeRTOS/tasks.c ****  */
 492:./FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 493:./FreeRTOS/tasks.c **** 
 494:./FreeRTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 495:./FreeRTOS/tasks.c **** 
 496:./FreeRTOS/tasks.c **** #endif
 497:./FreeRTOS/tasks.c **** 
 498:./FreeRTOS/tasks.c **** /*
 499:./FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 500:./FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 501:./FreeRTOS/tasks.c ****  *
 502:./FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 503:./FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 504:./FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 505:./FreeRTOS/tasks.c ****  * set to a value other than 1.
 506:./FreeRTOS/tasks.c ****  */
 507:./FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 508:./FreeRTOS/tasks.c **** 
 509:./FreeRTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 510:./FreeRTOS/tasks.c **** 
 511:./FreeRTOS/tasks.c **** #endif
 512:./FreeRTOS/tasks.c **** 
 513:./FreeRTOS/tasks.c **** /*
 514:./FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 515:./FreeRTOS/tasks.c ****  * will exit the Blocked state.
 516:./FreeRTOS/tasks.c ****  */
 517:./FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 518:./FreeRTOS/tasks.c **** 
 519:./FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )
 520:./FreeRTOS/tasks.c **** 
 521:./FreeRTOS/tasks.c **** /*
 522:./FreeRTOS/tasks.c ****  * Helper function used to pad task names with spaces when printing out
 523:./FreeRTOS/tasks.c ****  * human readable tables of task information.
 524:./FreeRTOS/tasks.c ****  */
 525:./FreeRTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 526:./FreeRTOS/tasks.c ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 527:./FreeRTOS/tasks.c **** 
 528:./FreeRTOS/tasks.c **** #endif
 529:./FreeRTOS/tasks.c **** 
 530:./FreeRTOS/tasks.c **** /*
 531:./FreeRTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 532:./FreeRTOS/tasks.c ****  * dynamically to fill in the structure's members.
 533:./FreeRTOS/tasks.c ****  */
 534:./FreeRTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 535:./FreeRTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 536:./FreeRTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 537:./FreeRTOS/tasks.c ****                                   void * const pvParameters,
 538:./FreeRTOS/tasks.c ****                                   UBaseType_t uxPriority,
 539:./FreeRTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 540:./FreeRTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 541:./FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 542:./FreeRTOS/tasks.c **** 
 543:./FreeRTOS/tasks.c **** /*
 544:./FreeRTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 545:./FreeRTOS/tasks.c ****  * under the control of the scheduler.
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 11


 546:./FreeRTOS/tasks.c ****  */
 547:./FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 548:./FreeRTOS/tasks.c **** 
 549:./FreeRTOS/tasks.c **** /*
 550:./FreeRTOS/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 551:./FreeRTOS/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 552:./FreeRTOS/tasks.c ****  * called by the function.
 553:./FreeRTOS/tasks.c ****  */
 554:./FreeRTOS/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 555:./FreeRTOS/tasks.c **** 
 556:./FreeRTOS/tasks.c ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 557:./FreeRTOS/tasks.c **** 
 558:./FreeRTOS/tasks.c **** #endif
 559:./FreeRTOS/tasks.c **** 
 560:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 561:./FreeRTOS/tasks.c **** 
 562:./FreeRTOS/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 563:./FreeRTOS/tasks.c **** 
 564:./FreeRTOS/tasks.c ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
 565:./FreeRTOS/tasks.c ****                                     const char * const pcName, /*lint !e971 Unqualified char types 
 566:./FreeRTOS/tasks.c ****                                     const uint32_t ulStackDepth,
 567:./FreeRTOS/tasks.c ****                                     void * const pvParameters,
 568:./FreeRTOS/tasks.c ****                                     UBaseType_t uxPriority,
 569:./FreeRTOS/tasks.c ****                                     StackType_t * const puxStackBuffer,
 570:./FreeRTOS/tasks.c ****                                     StaticTask_t * const pxTaskBuffer )
 571:./FreeRTOS/tasks.c ****     {
 572:./FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 573:./FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
 574:./FreeRTOS/tasks.c **** 
 575:./FreeRTOS/tasks.c ****         configASSERT( puxStackBuffer != NULL );
 576:./FreeRTOS/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 577:./FreeRTOS/tasks.c **** 
 578:./FreeRTOS/tasks.c ****         #if ( configASSERT_DEFINED == 1 )
 579:./FreeRTOS/tasks.c ****         {
 580:./FreeRTOS/tasks.c ****             /* Sanity check that the size of the structure used to declare a
 581:./FreeRTOS/tasks.c ****              * variable of type StaticTask_t equals the size of the real task
 582:./FreeRTOS/tasks.c ****              * structure. */
 583:./FreeRTOS/tasks.c ****             volatile size_t xSize = sizeof( StaticTask_t );
 584:./FreeRTOS/tasks.c ****             configASSERT( xSize == sizeof( TCB_t ) );
 585:./FreeRTOS/tasks.c ****             ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 586:./FreeRTOS/tasks.c ****         }
 587:./FreeRTOS/tasks.c ****         #endif /* configASSERT_DEFINED */
 588:./FreeRTOS/tasks.c **** 
 589:./FreeRTOS/tasks.c ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 590:./FreeRTOS/tasks.c ****         {
 591:./FreeRTOS/tasks.c ****             /* The memory used for the task's TCB and stack are passed into this
 592:./FreeRTOS/tasks.c ****              * function - use them. */
 593:./FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the stru
 594:./FreeRTOS/tasks.c ****             memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 595:./FreeRTOS/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 596:./FreeRTOS/tasks.c **** 
 597:./FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has be
 598:./FreeRTOS/tasks.c ****             {
 599:./FreeRTOS/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 600:./FreeRTOS/tasks.c ****                  * task was created statically in case the task is later deleted. */
 601:./FreeRTOS/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 602:./FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 12


 603:./FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 604:./FreeRTOS/tasks.c **** 
 605:./FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xRet
 606:./FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 607:./FreeRTOS/tasks.c ****         }
 608:./FreeRTOS/tasks.c ****         else
 609:./FreeRTOS/tasks.c ****         {
 610:./FreeRTOS/tasks.c ****             xReturn = NULL;
 611:./FreeRTOS/tasks.c ****         }
 612:./FreeRTOS/tasks.c **** 
 613:./FreeRTOS/tasks.c ****         return xReturn;
 614:./FreeRTOS/tasks.c ****     }
 615:./FreeRTOS/tasks.c **** 
 616:./FreeRTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 617:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 618:./FreeRTOS/tasks.c **** 
 619:./FreeRTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 620:./FreeRTOS/tasks.c **** 
 621:./FreeRTOS/tasks.c ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
 622:./FreeRTOS/tasks.c ****                                             TaskHandle_t * pxCreatedTask )
 623:./FreeRTOS/tasks.c ****     {
 624:./FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 625:./FreeRTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 626:./FreeRTOS/tasks.c **** 
 627:./FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 628:./FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 629:./FreeRTOS/tasks.c **** 
 630:./FreeRTOS/tasks.c ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
 631:./FreeRTOS/tasks.c ****         {
 632:./FreeRTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 633:./FreeRTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 634:./FreeRTOS/tasks.c ****              * not static allocation is being used. */
 635:./FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 636:./FreeRTOS/tasks.c ****             memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 637:./FreeRTOS/tasks.c **** 
 638:./FreeRTOS/tasks.c ****             /* Store the stack location in the TCB. */
 639:./FreeRTOS/tasks.c ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 640:./FreeRTOS/tasks.c **** 
 641:./FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 642:./FreeRTOS/tasks.c ****             {
 643:./FreeRTOS/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 644:./FreeRTOS/tasks.c ****                  * task was created statically in case the task is later deleted. */
 645:./FreeRTOS/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 646:./FreeRTOS/tasks.c ****             }
 647:./FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 648:./FreeRTOS/tasks.c **** 
 649:./FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 650:./FreeRTOS/tasks.c ****                                   pxTaskDefinition->pcName,
 651:./FreeRTOS/tasks.c ****                                   ( uint32_t ) pxTaskDefinition->usStackDepth,
 652:./FreeRTOS/tasks.c ****                                   pxTaskDefinition->pvParameters,
 653:./FreeRTOS/tasks.c ****                                   pxTaskDefinition->uxPriority,
 654:./FreeRTOS/tasks.c ****                                   pxCreatedTask, pxNewTCB,
 655:./FreeRTOS/tasks.c ****                                   pxTaskDefinition->xRegions );
 656:./FreeRTOS/tasks.c **** 
 657:./FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 658:./FreeRTOS/tasks.c ****             xReturn = pdPASS;
 659:./FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 13


 660:./FreeRTOS/tasks.c **** 
 661:./FreeRTOS/tasks.c ****         return xReturn;
 662:./FreeRTOS/tasks.c ****     }
 663:./FreeRTOS/tasks.c **** 
 664:./FreeRTOS/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 665:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 666:./FreeRTOS/tasks.c **** 
 667:./FreeRTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 668:./FreeRTOS/tasks.c **** 
 669:./FreeRTOS/tasks.c ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
 670:./FreeRTOS/tasks.c ****                                       TaskHandle_t * pxCreatedTask )
 671:./FreeRTOS/tasks.c ****     {
 672:./FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 673:./FreeRTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 674:./FreeRTOS/tasks.c **** 
 675:./FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer );
 676:./FreeRTOS/tasks.c **** 
 677:./FreeRTOS/tasks.c ****         if( pxTaskDefinition->puxStackBuffer != NULL )
 678:./FreeRTOS/tasks.c ****         {
 679:./FreeRTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 680:./FreeRTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 681:./FreeRTOS/tasks.c ****              * not static allocation is being used. */
 682:./FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 683:./FreeRTOS/tasks.c **** 
 684:./FreeRTOS/tasks.c ****             if( pxNewTCB != NULL )
 685:./FreeRTOS/tasks.c ****             {
 686:./FreeRTOS/tasks.c ****                 memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 687:./FreeRTOS/tasks.c **** 
 688:./FreeRTOS/tasks.c ****                 /* Store the stack location in the TCB. */
 689:./FreeRTOS/tasks.c ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 690:./FreeRTOS/tasks.c **** 
 691:./FreeRTOS/tasks.c ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 692:./FreeRTOS/tasks.c ****                 {
 693:./FreeRTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note
 694:./FreeRTOS/tasks.c ****                      * this task had a statically allocated stack in case it is
 695:./FreeRTOS/tasks.c ****                      * later deleted.  The TCB was allocated dynamically. */
 696:./FreeRTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 697:./FreeRTOS/tasks.c ****                 }
 698:./FreeRTOS/tasks.c ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 699:./FreeRTOS/tasks.c **** 
 700:./FreeRTOS/tasks.c ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 701:./FreeRTOS/tasks.c ****                                       pxTaskDefinition->pcName,
 702:./FreeRTOS/tasks.c ****                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 703:./FreeRTOS/tasks.c ****                                       pxTaskDefinition->pvParameters,
 704:./FreeRTOS/tasks.c ****                                       pxTaskDefinition->uxPriority,
 705:./FreeRTOS/tasks.c ****                                       pxCreatedTask, pxNewTCB,
 706:./FreeRTOS/tasks.c ****                                       pxTaskDefinition->xRegions );
 707:./FreeRTOS/tasks.c **** 
 708:./FreeRTOS/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
 709:./FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 710:./FreeRTOS/tasks.c ****             }
 711:./FreeRTOS/tasks.c ****         }
 712:./FreeRTOS/tasks.c **** 
 713:./FreeRTOS/tasks.c ****         return xReturn;
 714:./FreeRTOS/tasks.c ****     }
 715:./FreeRTOS/tasks.c **** 
 716:./FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 14


 717:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 718:./FreeRTOS/tasks.c **** 
 719:./FreeRTOS/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 720:./FreeRTOS/tasks.c **** 
 721:./FreeRTOS/tasks.c ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
 722:./FreeRTOS/tasks.c ****                             const char * const pcName, /*lint !e971 Unqualified char types are allo
 723:./FreeRTOS/tasks.c ****                             const configSTACK_DEPTH_TYPE usStackDepth,
 724:./FreeRTOS/tasks.c ****                             void * const pvParameters,
 725:./FreeRTOS/tasks.c ****                             UBaseType_t uxPriority,
 726:./FreeRTOS/tasks.c ****                             TaskHandle_t * const pxCreatedTask )
 727:./FreeRTOS/tasks.c ****     {
 728:./FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 729:./FreeRTOS/tasks.c ****         BaseType_t xReturn;
 730:./FreeRTOS/tasks.c **** 
 731:./FreeRTOS/tasks.c ****         /* If the stack grows down then allocate the stack then the TCB so the stack
 732:./FreeRTOS/tasks.c ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
 733:./FreeRTOS/tasks.c ****          * the TCB then the stack. */
 734:./FreeRTOS/tasks.c ****         #if ( portSTACK_GROWTH > 0 )
 735:./FreeRTOS/tasks.c ****         {
 736:./FreeRTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends on
 737:./FreeRTOS/tasks.c ****              * the implementation of the port malloc function and whether or not static
 738:./FreeRTOS/tasks.c ****              * allocation is being used. */
 739:./FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 740:./FreeRTOS/tasks.c **** 
 741:./FreeRTOS/tasks.c ****             if( pxNewTCB != NULL )
 742:./FreeRTOS/tasks.c ****             {
 743:./FreeRTOS/tasks.c ****                 memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 744:./FreeRTOS/tasks.c **** 
 745:./FreeRTOS/tasks.c ****                 /* Allocate space for the stack used by the task being created.
 746:./FreeRTOS/tasks.c ****                  * The base of the stack memory stored in the TCB so the task can
 747:./FreeRTOS/tasks.c ****                  * be deleted later if required. */
 748:./FreeRTOS/tasks.c ****                 pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocStack( ( ( ( size_t ) usStackDept
 749:./FreeRTOS/tasks.c **** 
 750:./FreeRTOS/tasks.c ****                 if( pxNewTCB->pxStack == NULL )
 751:./FreeRTOS/tasks.c ****                 {
 752:./FreeRTOS/tasks.c ****                     /* Could not allocate the stack.  Delete the allocated TCB. */
 753:./FreeRTOS/tasks.c ****                     vPortFree( pxNewTCB );
 754:./FreeRTOS/tasks.c ****                     pxNewTCB = NULL;
 755:./FreeRTOS/tasks.c ****                 }
 756:./FreeRTOS/tasks.c ****             }
 757:./FreeRTOS/tasks.c ****         }
 758:./FreeRTOS/tasks.c ****         #else /* portSTACK_GROWTH */
 759:./FreeRTOS/tasks.c ****         {
 760:./FreeRTOS/tasks.c ****             StackType_t * pxStack;
 761:./FreeRTOS/tasks.c **** 
 762:./FreeRTOS/tasks.c ****             /* Allocate space for the stack used by the task being created. */
 763:./FreeRTOS/tasks.c ****             pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) );
 764:./FreeRTOS/tasks.c **** 
 765:./FreeRTOS/tasks.c ****             if( pxStack != NULL )
 766:./FreeRTOS/tasks.c ****             {
 767:./FreeRTOS/tasks.c ****                 /* Allocate space for the TCB. */
 768:./FreeRTOS/tasks.c ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All va
 769:./FreeRTOS/tasks.c **** 
 770:./FreeRTOS/tasks.c ****                 if( pxNewTCB != NULL )
 771:./FreeRTOS/tasks.c ****                 {
 772:./FreeRTOS/tasks.c ****                     memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 773:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 15


 774:./FreeRTOS/tasks.c ****                     /* Store the stack location in the TCB. */
 775:./FreeRTOS/tasks.c ****                     pxNewTCB->pxStack = pxStack;
 776:./FreeRTOS/tasks.c ****                 }
 777:./FreeRTOS/tasks.c ****                 else
 778:./FreeRTOS/tasks.c ****                 {
 779:./FreeRTOS/tasks.c ****                     /* The stack cannot be used as the TCB was not created.  Free
 780:./FreeRTOS/tasks.c ****                      * it again. */
 781:./FreeRTOS/tasks.c ****                     vPortFreeStack( pxStack );
 782:./FreeRTOS/tasks.c ****                 }
 783:./FreeRTOS/tasks.c ****             }
 784:./FreeRTOS/tasks.c ****             else
 785:./FreeRTOS/tasks.c ****             {
 786:./FreeRTOS/tasks.c ****                 pxNewTCB = NULL;
 787:./FreeRTOS/tasks.c ****             }
 788:./FreeRTOS/tasks.c ****         }
 789:./FreeRTOS/tasks.c ****         #endif /* portSTACK_GROWTH */
 790:./FreeRTOS/tasks.c **** 
 791:./FreeRTOS/tasks.c ****         if( pxNewTCB != NULL )
 792:./FreeRTOS/tasks.c ****         {
 793:./FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has be
 794:./FreeRTOS/tasks.c ****             {
 795:./FreeRTOS/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 796:./FreeRTOS/tasks.c ****                  * task was created dynamically in case it is later deleted. */
 797:./FreeRTOS/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 798:./FreeRTOS/tasks.c ****             }
 799:./FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 800:./FreeRTOS/tasks.c **** 
 801:./FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPr
 802:./FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 803:./FreeRTOS/tasks.c ****             xReturn = pdPASS;
 804:./FreeRTOS/tasks.c ****         }
 805:./FreeRTOS/tasks.c ****         else
 806:./FreeRTOS/tasks.c ****         {
 807:./FreeRTOS/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 808:./FreeRTOS/tasks.c ****         }
 809:./FreeRTOS/tasks.c **** 
 810:./FreeRTOS/tasks.c ****         return xReturn;
 811:./FreeRTOS/tasks.c ****     }
 812:./FreeRTOS/tasks.c **** 
 813:./FreeRTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 814:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 815:./FreeRTOS/tasks.c **** 
 816:./FreeRTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 817:./FreeRTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 818:./FreeRTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 819:./FreeRTOS/tasks.c ****                                   void * const pvParameters,
 820:./FreeRTOS/tasks.c ****                                   UBaseType_t uxPriority,
 821:./FreeRTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 822:./FreeRTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 823:./FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
 824:./FreeRTOS/tasks.c **** {
 825:./FreeRTOS/tasks.c ****     StackType_t * pxTopOfStack;
 826:./FreeRTOS/tasks.c ****     UBaseType_t x;
 827:./FreeRTOS/tasks.c **** 
 828:./FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 829:./FreeRTOS/tasks.c ****         /* Should the task be created in privileged mode? */
 830:./FreeRTOS/tasks.c ****         BaseType_t xRunPrivileged;
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 16


 831:./FreeRTOS/tasks.c **** 
 832:./FreeRTOS/tasks.c ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 833:./FreeRTOS/tasks.c ****         {
 834:./FreeRTOS/tasks.c ****             xRunPrivileged = pdTRUE;
 835:./FreeRTOS/tasks.c ****         }
 836:./FreeRTOS/tasks.c ****         else
 837:./FreeRTOS/tasks.c ****         {
 838:./FreeRTOS/tasks.c ****             xRunPrivileged = pdFALSE;
 839:./FreeRTOS/tasks.c ****         }
 840:./FreeRTOS/tasks.c ****         uxPriority &= ~portPRIVILEGE_BIT;
 841:./FreeRTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
 842:./FreeRTOS/tasks.c **** 
 843:./FreeRTOS/tasks.c ****     /* Avoid dependency on memset() if it is not required. */
 844:./FreeRTOS/tasks.c ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 845:./FreeRTOS/tasks.c ****     {
 846:./FreeRTOS/tasks.c ****         /* Fill the stack with a known value to assist debugging. */
 847:./FreeRTOS/tasks.c ****         ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * s
 848:./FreeRTOS/tasks.c ****     }
 849:./FreeRTOS/tasks.c ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 850:./FreeRTOS/tasks.c **** 
 851:./FreeRTOS/tasks.c ****     /* Calculate the top of stack address.  This depends on whether the stack
 852:./FreeRTOS/tasks.c ****      * grows from high memory to low (as per the 80x86) or vice versa.
 853:./FreeRTOS/tasks.c ****      * portSTACK_GROWTH is used to make the result positive or negative as required
 854:./FreeRTOS/tasks.c ****      * by the port. */
 855:./FreeRTOS/tasks.c ****     #if ( portSTACK_GROWTH < 0 )
 856:./FreeRTOS/tasks.c ****     {
 857:./FreeRTOS/tasks.c ****         pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 858:./FreeRTOS/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 859:./FreeRTOS/tasks.c **** 
 860:./FreeRTOS/tasks.c ****         /* Check the alignment of the calculated top of stack is correct. */
 861:./FreeRTOS/tasks.c ****         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBY
 862:./FreeRTOS/tasks.c **** 
 863:./FreeRTOS/tasks.c ****         #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
 864:./FreeRTOS/tasks.c ****         {
 865:./FreeRTOS/tasks.c ****             /* Also record the stack's high address, which may assist
 866:./FreeRTOS/tasks.c ****              * debugging. */
 867:./FreeRTOS/tasks.c ****             pxNewTCB->pxEndOfStack = pxTopOfStack;
 868:./FreeRTOS/tasks.c ****         }
 869:./FreeRTOS/tasks.c ****         #endif /* configRECORD_STACK_HIGH_ADDRESS */
 870:./FreeRTOS/tasks.c ****     }
 871:./FreeRTOS/tasks.c ****     #else /* portSTACK_GROWTH */
 872:./FreeRTOS/tasks.c ****     {
 873:./FreeRTOS/tasks.c ****         pxTopOfStack = pxNewTCB->pxStack;
 874:./FreeRTOS/tasks.c **** 
 875:./FreeRTOS/tasks.c ****         /* Check the alignment of the stack buffer is correct. */
 876:./FreeRTOS/tasks.c ****         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) p
 877:./FreeRTOS/tasks.c **** 
 878:./FreeRTOS/tasks.c ****         /* The other extreme of the stack space is required if stack checking is
 879:./FreeRTOS/tasks.c ****          * performed. */
 880:./FreeRTOS/tasks.c ****         pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 881:./FreeRTOS/tasks.c ****     }
 882:./FreeRTOS/tasks.c ****     #endif /* portSTACK_GROWTH */
 883:./FreeRTOS/tasks.c **** 
 884:./FreeRTOS/tasks.c ****     /* Store the task name in the TCB. */
 885:./FreeRTOS/tasks.c ****     if( pcName != NULL )
 886:./FreeRTOS/tasks.c ****     {
 887:./FreeRTOS/tasks.c ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 17


 888:./FreeRTOS/tasks.c ****         {
 889:./FreeRTOS/tasks.c ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 890:./FreeRTOS/tasks.c **** 
 891:./FreeRTOS/tasks.c ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 892:./FreeRTOS/tasks.c ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
 893:./FreeRTOS/tasks.c ****              * string is not accessible (extremely unlikely). */
 894:./FreeRTOS/tasks.c ****             if( pcName[ x ] == ( char ) 0x00 )
 895:./FreeRTOS/tasks.c ****             {
 896:./FreeRTOS/tasks.c ****                 break;
 897:./FreeRTOS/tasks.c ****             }
 898:./FreeRTOS/tasks.c ****             else
 899:./FreeRTOS/tasks.c ****             {
 900:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
 901:./FreeRTOS/tasks.c ****             }
 902:./FreeRTOS/tasks.c ****         }
 903:./FreeRTOS/tasks.c **** 
 904:./FreeRTOS/tasks.c ****         /* Ensure the name string is terminated in the case that the string length
 905:./FreeRTOS/tasks.c ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
 906:./FreeRTOS/tasks.c ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 907:./FreeRTOS/tasks.c ****     }
 908:./FreeRTOS/tasks.c ****     else
 909:./FreeRTOS/tasks.c ****     {
 910:./FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 911:./FreeRTOS/tasks.c ****     }
 912:./FreeRTOS/tasks.c **** 
 913:./FreeRTOS/tasks.c ****     /* This is used as an array index so must ensure it's not too large. */
 914:./FreeRTOS/tasks.c ****     configASSERT( uxPriority < configMAX_PRIORITIES );
 915:./FreeRTOS/tasks.c **** 
 916:./FreeRTOS/tasks.c ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 917:./FreeRTOS/tasks.c ****     {
 918:./FreeRTOS/tasks.c ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 919:./FreeRTOS/tasks.c ****     }
 920:./FreeRTOS/tasks.c ****     else
 921:./FreeRTOS/tasks.c ****     {
 922:./FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 923:./FreeRTOS/tasks.c ****     }
 924:./FreeRTOS/tasks.c **** 
 925:./FreeRTOS/tasks.c ****     pxNewTCB->uxPriority = uxPriority;
 926:./FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 927:./FreeRTOS/tasks.c ****     {
 928:./FreeRTOS/tasks.c ****         pxNewTCB->uxBasePriority = uxPriority;
 929:./FreeRTOS/tasks.c ****     }
 930:./FreeRTOS/tasks.c ****     #endif /* configUSE_MUTEXES */
 931:./FreeRTOS/tasks.c **** 
 932:./FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 933:./FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 934:./FreeRTOS/tasks.c **** 
 935:./FreeRTOS/tasks.c ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 936:./FreeRTOS/tasks.c ****      * back to  the containing TCB from a generic item in a list. */
 937:./FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 938:./FreeRTOS/tasks.c **** 
 939:./FreeRTOS/tasks.c ****     /* Event lists are always in priority order. */
 940:./FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
 941:./FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 942:./FreeRTOS/tasks.c **** 
 943:./FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 944:./FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 18


 945:./FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStac
 946:./FreeRTOS/tasks.c ****     }
 947:./FreeRTOS/tasks.c ****     #else
 948:./FreeRTOS/tasks.c ****     {
 949:./FreeRTOS/tasks.c ****         /* Avoid compiler warning about unreferenced parameter. */
 950:./FreeRTOS/tasks.c ****         ( void ) xRegions;
 951:./FreeRTOS/tasks.c ****     }
 952:./FreeRTOS/tasks.c ****     #endif
 953:./FreeRTOS/tasks.c **** 
 954:./FreeRTOS/tasks.c ****     #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
 955:./FreeRTOS/tasks.c ****     {
 956:./FreeRTOS/tasks.c ****         /* Allocate and initialize memory for the task's TLS Block. */
 957:./FreeRTOS/tasks.c ****         configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 958:./FreeRTOS/tasks.c ****     }
 959:./FreeRTOS/tasks.c ****     #endif
 960:./FreeRTOS/tasks.c **** 
 961:./FreeRTOS/tasks.c ****     /* Initialize the TCB stack to look as if the task was already running,
 962:./FreeRTOS/tasks.c ****      * but had been interrupted by the scheduler.  The return address is set
 963:./FreeRTOS/tasks.c ****      * to the start of the task function. Once the stack has been initialised
 964:./FreeRTOS/tasks.c ****      * the top of stack variable is updated. */
 965:./FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 966:./FreeRTOS/tasks.c ****     {
 967:./FreeRTOS/tasks.c ****         /* If the port has capability to detect stack overflow,
 968:./FreeRTOS/tasks.c ****          * pass the stack end address to the stack initialization
 969:./FreeRTOS/tasks.c ****          * function as well. */
 970:./FreeRTOS/tasks.c ****         #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
 971:./FreeRTOS/tasks.c ****         {
 972:./FreeRTOS/tasks.c ****             #if ( portSTACK_GROWTH < 0 )
 973:./FreeRTOS/tasks.c ****             {
 974:./FreeRTOS/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, px
 975:./FreeRTOS/tasks.c ****             }
 976:./FreeRTOS/tasks.c ****             #else /* portSTACK_GROWTH */
 977:./FreeRTOS/tasks.c ****             {
 978:./FreeRTOS/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStac
 979:./FreeRTOS/tasks.c ****             }
 980:./FreeRTOS/tasks.c ****             #endif /* portSTACK_GROWTH */
 981:./FreeRTOS/tasks.c ****         }
 982:./FreeRTOS/tasks.c ****         #else /* portHAS_STACK_OVERFLOW_CHECKING */
 983:./FreeRTOS/tasks.c ****         {
 984:./FreeRTOS/tasks.c ****             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters,
 985:./FreeRTOS/tasks.c ****         }
 986:./FreeRTOS/tasks.c ****         #endif /* portHAS_STACK_OVERFLOW_CHECKING */
 987:./FreeRTOS/tasks.c ****     }
 988:./FreeRTOS/tasks.c ****     #else /* portUSING_MPU_WRAPPERS */
 989:./FreeRTOS/tasks.c ****     {
 990:./FreeRTOS/tasks.c ****         /* If the port has capability to detect stack overflow,
 991:./FreeRTOS/tasks.c ****          * pass the stack end address to the stack initialization
 992:./FreeRTOS/tasks.c ****          * function as well. */
 993:./FreeRTOS/tasks.c ****         #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
 994:./FreeRTOS/tasks.c ****         {
 995:./FreeRTOS/tasks.c ****             #if ( portSTACK_GROWTH < 0 )
 996:./FreeRTOS/tasks.c ****             {
 997:./FreeRTOS/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, px
 998:./FreeRTOS/tasks.c ****             }
 999:./FreeRTOS/tasks.c ****             #else /* portSTACK_GROWTH */
1000:./FreeRTOS/tasks.c ****             {
1001:./FreeRTOS/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStac
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 19


1002:./FreeRTOS/tasks.c ****             }
1003:./FreeRTOS/tasks.c ****             #endif /* portSTACK_GROWTH */
1004:./FreeRTOS/tasks.c ****         }
1005:./FreeRTOS/tasks.c ****         #else /* portHAS_STACK_OVERFLOW_CHECKING */
1006:./FreeRTOS/tasks.c ****         {
1007:./FreeRTOS/tasks.c ****             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters 
1008:./FreeRTOS/tasks.c ****         }
1009:./FreeRTOS/tasks.c ****         #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1010:./FreeRTOS/tasks.c ****     }
1011:./FreeRTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS */
1012:./FreeRTOS/tasks.c **** 
1013:./FreeRTOS/tasks.c ****     if( pxCreatedTask != NULL )
1014:./FreeRTOS/tasks.c ****     {
1015:./FreeRTOS/tasks.c ****         /* Pass the handle out in an anonymous way.  The handle can be used to
1016:./FreeRTOS/tasks.c ****          * change the created task's priority, delete the created task, etc.*/
1017:./FreeRTOS/tasks.c ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1018:./FreeRTOS/tasks.c ****     }
1019:./FreeRTOS/tasks.c ****     else
1020:./FreeRTOS/tasks.c ****     {
1021:./FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1022:./FreeRTOS/tasks.c ****     }
1023:./FreeRTOS/tasks.c **** }
1024:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1025:./FreeRTOS/tasks.c **** 
1026:./FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
1027:./FreeRTOS/tasks.c **** {
1028:./FreeRTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
1029:./FreeRTOS/tasks.c ****      * updated. */
1030:./FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
1031:./FreeRTOS/tasks.c ****     {
1032:./FreeRTOS/tasks.c ****         uxCurrentNumberOfTasks++;
1033:./FreeRTOS/tasks.c **** 
1034:./FreeRTOS/tasks.c ****         if( pxCurrentTCB == NULL )
1035:./FreeRTOS/tasks.c ****         {
1036:./FreeRTOS/tasks.c ****             /* There are no other tasks, or all the other tasks are in
1037:./FreeRTOS/tasks.c ****              * the suspended state - make this the current task. */
1038:./FreeRTOS/tasks.c ****             pxCurrentTCB = pxNewTCB;
1039:./FreeRTOS/tasks.c **** 
1040:./FreeRTOS/tasks.c ****             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1041:./FreeRTOS/tasks.c ****             {
1042:./FreeRTOS/tasks.c ****                 /* This is the first task to be created so do the preliminary
1043:./FreeRTOS/tasks.c ****                  * initialisation required.  We will not recover if this call
1044:./FreeRTOS/tasks.c ****                  * fails, but we will report the failure. */
1045:./FreeRTOS/tasks.c ****                 prvInitialiseTaskLists();
1046:./FreeRTOS/tasks.c ****             }
1047:./FreeRTOS/tasks.c ****             else
1048:./FreeRTOS/tasks.c ****             {
1049:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1050:./FreeRTOS/tasks.c ****             }
1051:./FreeRTOS/tasks.c ****         }
1052:./FreeRTOS/tasks.c ****         else
1053:./FreeRTOS/tasks.c ****         {
1054:./FreeRTOS/tasks.c ****             /* If the scheduler is not already running, make this task the
1055:./FreeRTOS/tasks.c ****              * current task if it is the highest priority task to be created
1056:./FreeRTOS/tasks.c ****              * so far. */
1057:./FreeRTOS/tasks.c ****             if( xSchedulerRunning == pdFALSE )
1058:./FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 20


1059:./FreeRTOS/tasks.c ****                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1060:./FreeRTOS/tasks.c ****                 {
1061:./FreeRTOS/tasks.c ****                     pxCurrentTCB = pxNewTCB;
1062:./FreeRTOS/tasks.c ****                 }
1063:./FreeRTOS/tasks.c ****                 else
1064:./FreeRTOS/tasks.c ****                 {
1065:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1066:./FreeRTOS/tasks.c ****                 }
1067:./FreeRTOS/tasks.c ****             }
1068:./FreeRTOS/tasks.c ****             else
1069:./FreeRTOS/tasks.c ****             {
1070:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1071:./FreeRTOS/tasks.c ****             }
1072:./FreeRTOS/tasks.c ****         }
1073:./FreeRTOS/tasks.c **** 
1074:./FreeRTOS/tasks.c ****         uxTaskNumber++;
1075:./FreeRTOS/tasks.c **** 
1076:./FreeRTOS/tasks.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
1077:./FreeRTOS/tasks.c ****         {
1078:./FreeRTOS/tasks.c ****             /* Add a counter into the TCB for tracing only. */
1079:./FreeRTOS/tasks.c ****             pxNewTCB->uxTCBNumber = uxTaskNumber;
1080:./FreeRTOS/tasks.c ****         }
1081:./FreeRTOS/tasks.c ****         #endif /* configUSE_TRACE_FACILITY */
1082:./FreeRTOS/tasks.c ****         traceTASK_CREATE( pxNewTCB );
1083:./FreeRTOS/tasks.c **** 
1084:./FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxNewTCB );
1085:./FreeRTOS/tasks.c **** 
1086:./FreeRTOS/tasks.c ****         portSETUP_TCB( pxNewTCB );
1087:./FreeRTOS/tasks.c ****     }
1088:./FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
1089:./FreeRTOS/tasks.c **** 
1090:./FreeRTOS/tasks.c ****     if( xSchedulerRunning != pdFALSE )
1091:./FreeRTOS/tasks.c ****     {
1092:./FreeRTOS/tasks.c ****         /* If the created task is of a higher priority than the current task
1093:./FreeRTOS/tasks.c ****          * then it should run now. */
1094:./FreeRTOS/tasks.c ****         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1095:./FreeRTOS/tasks.c ****         {
1096:./FreeRTOS/tasks.c ****             taskYIELD_IF_USING_PREEMPTION();
1097:./FreeRTOS/tasks.c ****         }
1098:./FreeRTOS/tasks.c ****         else
1099:./FreeRTOS/tasks.c ****         {
1100:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1101:./FreeRTOS/tasks.c ****         }
1102:./FreeRTOS/tasks.c ****     }
1103:./FreeRTOS/tasks.c ****     else
1104:./FreeRTOS/tasks.c ****     {
1105:./FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1106:./FreeRTOS/tasks.c ****     }
1107:./FreeRTOS/tasks.c **** }
1108:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1109:./FreeRTOS/tasks.c **** 
1110:./FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1111:./FreeRTOS/tasks.c **** 
1112:./FreeRTOS/tasks.c ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
1113:./FreeRTOS/tasks.c ****     {
1114:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1115:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 21


1116:./FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1117:./FreeRTOS/tasks.c ****         {
1118:./FreeRTOS/tasks.c ****             /* If null is passed in here then it is the calling task that is
1119:./FreeRTOS/tasks.c ****              * being deleted. */
1120:./FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1121:./FreeRTOS/tasks.c **** 
1122:./FreeRTOS/tasks.c ****             /* Remove task from the ready/delayed list. */
1123:./FreeRTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1124:./FreeRTOS/tasks.c ****             {
1125:./FreeRTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1126:./FreeRTOS/tasks.c ****             }
1127:./FreeRTOS/tasks.c ****             else
1128:./FreeRTOS/tasks.c ****             {
1129:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1130:./FreeRTOS/tasks.c ****             }
1131:./FreeRTOS/tasks.c **** 
1132:./FreeRTOS/tasks.c ****             /* Is the task waiting on an event also? */
1133:./FreeRTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1134:./FreeRTOS/tasks.c ****             {
1135:./FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1136:./FreeRTOS/tasks.c ****             }
1137:./FreeRTOS/tasks.c ****             else
1138:./FreeRTOS/tasks.c ****             {
1139:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1140:./FreeRTOS/tasks.c ****             }
1141:./FreeRTOS/tasks.c **** 
1142:./FreeRTOS/tasks.c ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
1143:./FreeRTOS/tasks.c ****              * detect that the task lists need re-generating.  This is done before
1144:./FreeRTOS/tasks.c ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1145:./FreeRTOS/tasks.c ****              * not return. */
1146:./FreeRTOS/tasks.c ****             uxTaskNumber++;
1147:./FreeRTOS/tasks.c **** 
1148:./FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
1149:./FreeRTOS/tasks.c ****             {
1150:./FreeRTOS/tasks.c ****                 /* A task is deleting itself.  This cannot complete within the
1151:./FreeRTOS/tasks.c ****                  * task itself, as a context switch to another task is required.
1152:./FreeRTOS/tasks.c ****                  * Place the task in the termination list.  The idle task will
1153:./FreeRTOS/tasks.c ****                  * check the termination list and free up any memory allocated by
1154:./FreeRTOS/tasks.c ****                  * the scheduler for the TCB and stack of the deleted task. */
1155:./FreeRTOS/tasks.c ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1156:./FreeRTOS/tasks.c **** 
1157:./FreeRTOS/tasks.c ****                 /* Increment the ucTasksDeleted variable so the idle task knows
1158:./FreeRTOS/tasks.c ****                  * there is a task that has been deleted and that it should therefore
1159:./FreeRTOS/tasks.c ****                  * check the xTasksWaitingTermination list. */
1160:./FreeRTOS/tasks.c ****                 ++uxDeletedTasksWaitingCleanUp;
1161:./FreeRTOS/tasks.c **** 
1162:./FreeRTOS/tasks.c ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1163:./FreeRTOS/tasks.c ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1164:./FreeRTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1165:./FreeRTOS/tasks.c **** 
1166:./FreeRTOS/tasks.c ****                 /* The pre-delete hook is primarily for the Windows simulator,
1167:./FreeRTOS/tasks.c ****                  * in which Windows specific clean up operations are performed,
1168:./FreeRTOS/tasks.c ****                  * after which it is not possible to yield away from this task -
1169:./FreeRTOS/tasks.c ****                  * hence xYieldPending is used to latch that a context switch is
1170:./FreeRTOS/tasks.c ****                  * required. */
1171:./FreeRTOS/tasks.c ****                 portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1172:./FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 22


1173:./FreeRTOS/tasks.c ****             else
1174:./FreeRTOS/tasks.c ****             {
1175:./FreeRTOS/tasks.c ****                 --uxCurrentNumberOfTasks;
1176:./FreeRTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1177:./FreeRTOS/tasks.c **** 
1178:./FreeRTOS/tasks.c ****                 /* Reset the next expected unblock time in case it referred to
1179:./FreeRTOS/tasks.c ****                  * the task that has just been deleted. */
1180:./FreeRTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
1181:./FreeRTOS/tasks.c ****             }
1182:./FreeRTOS/tasks.c ****         }
1183:./FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
1184:./FreeRTOS/tasks.c **** 
1185:./FreeRTOS/tasks.c ****         /* If the task is not deleting itself, call prvDeleteTCB from outside of
1186:./FreeRTOS/tasks.c ****          * critical section. If a task deletes itself, prvDeleteTCB is called
1187:./FreeRTOS/tasks.c ****          * from prvCheckTasksWaitingTermination which is called from Idle task. */
1188:./FreeRTOS/tasks.c ****         if( pxTCB != pxCurrentTCB )
1189:./FreeRTOS/tasks.c ****         {
1190:./FreeRTOS/tasks.c ****             prvDeleteTCB( pxTCB );
1191:./FreeRTOS/tasks.c ****         }
1192:./FreeRTOS/tasks.c **** 
1193:./FreeRTOS/tasks.c ****         /* Force a reschedule if it is the currently running task that has just
1194:./FreeRTOS/tasks.c ****          * been deleted. */
1195:./FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1196:./FreeRTOS/tasks.c ****         {
1197:./FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
1198:./FreeRTOS/tasks.c ****             {
1199:./FreeRTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
1200:./FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
1201:./FreeRTOS/tasks.c ****             }
1202:./FreeRTOS/tasks.c ****             else
1203:./FreeRTOS/tasks.c ****             {
1204:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1205:./FreeRTOS/tasks.c ****             }
1206:./FreeRTOS/tasks.c ****         }
1207:./FreeRTOS/tasks.c ****     }
1208:./FreeRTOS/tasks.c **** 
1209:./FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1210:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1211:./FreeRTOS/tasks.c **** 
1212:./FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskDelayUntil == 1 )
1213:./FreeRTOS/tasks.c **** 
1214:./FreeRTOS/tasks.c ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
1215:./FreeRTOS/tasks.c ****                                 const TickType_t xTimeIncrement )
1216:./FreeRTOS/tasks.c ****     {
1217:./FreeRTOS/tasks.c ****         TickType_t xTimeToWake;
1218:./FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1219:./FreeRTOS/tasks.c **** 
1220:./FreeRTOS/tasks.c ****         configASSERT( pxPreviousWakeTime );
1221:./FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
1222:./FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
1223:./FreeRTOS/tasks.c **** 
1224:./FreeRTOS/tasks.c ****         vTaskSuspendAll();
1225:./FreeRTOS/tasks.c ****         {
1226:./FreeRTOS/tasks.c ****             /* Minor optimisation.  The tick count cannot change in this
1227:./FreeRTOS/tasks.c ****              * block. */
1228:./FreeRTOS/tasks.c ****             const TickType_t xConstTickCount = xTickCount;
1229:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 23


1230:./FreeRTOS/tasks.c ****             /* Generate the tick time at which the task wants to wake. */
1231:./FreeRTOS/tasks.c ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1232:./FreeRTOS/tasks.c **** 
1233:./FreeRTOS/tasks.c ****             if( xConstTickCount < *pxPreviousWakeTime )
1234:./FreeRTOS/tasks.c ****             {
1235:./FreeRTOS/tasks.c ****                 /* The tick count has overflowed since this function was
1236:./FreeRTOS/tasks.c ****                  * lasted called.  In this case the only time we should ever
1237:./FreeRTOS/tasks.c ****                  * actually delay is if the wake time has also  overflowed,
1238:./FreeRTOS/tasks.c ****                  * and the wake time is greater than the tick time.  When this
1239:./FreeRTOS/tasks.c ****                  * is the case it is as if neither time had overflowed. */
1240:./FreeRTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1241:./FreeRTOS/tasks.c ****                 {
1242:./FreeRTOS/tasks.c ****                     xShouldDelay = pdTRUE;
1243:./FreeRTOS/tasks.c ****                 }
1244:./FreeRTOS/tasks.c ****                 else
1245:./FreeRTOS/tasks.c ****                 {
1246:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1247:./FreeRTOS/tasks.c ****                 }
1248:./FreeRTOS/tasks.c ****             }
1249:./FreeRTOS/tasks.c ****             else
1250:./FreeRTOS/tasks.c ****             {
1251:./FreeRTOS/tasks.c ****                 /* The tick time has not overflowed.  In this case we will
1252:./FreeRTOS/tasks.c ****                  * delay if either the wake time has overflowed, and/or the
1253:./FreeRTOS/tasks.c ****                  * tick time is less than the wake time. */
1254:./FreeRTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1255:./FreeRTOS/tasks.c ****                 {
1256:./FreeRTOS/tasks.c ****                     xShouldDelay = pdTRUE;
1257:./FreeRTOS/tasks.c ****                 }
1258:./FreeRTOS/tasks.c ****                 else
1259:./FreeRTOS/tasks.c ****                 {
1260:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1261:./FreeRTOS/tasks.c ****                 }
1262:./FreeRTOS/tasks.c ****             }
1263:./FreeRTOS/tasks.c **** 
1264:./FreeRTOS/tasks.c ****             /* Update the wake time ready for the next call. */
1265:./FreeRTOS/tasks.c ****             *pxPreviousWakeTime = xTimeToWake;
1266:./FreeRTOS/tasks.c **** 
1267:./FreeRTOS/tasks.c ****             if( xShouldDelay != pdFALSE )
1268:./FreeRTOS/tasks.c ****             {
1269:./FreeRTOS/tasks.c ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
1270:./FreeRTOS/tasks.c **** 
1271:./FreeRTOS/tasks.c ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
1272:./FreeRTOS/tasks.c ****                  * the time to wake, so subtract the current tick count. */
1273:./FreeRTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1274:./FreeRTOS/tasks.c ****             }
1275:./FreeRTOS/tasks.c ****             else
1276:./FreeRTOS/tasks.c ****             {
1277:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1278:./FreeRTOS/tasks.c ****             }
1279:./FreeRTOS/tasks.c ****         }
1280:./FreeRTOS/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
1281:./FreeRTOS/tasks.c **** 
1282:./FreeRTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1283:./FreeRTOS/tasks.c ****          * have put ourselves to sleep. */
1284:./FreeRTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1285:./FreeRTOS/tasks.c ****         {
1286:./FreeRTOS/tasks.c ****             portYIELD_WITHIN_API();
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 24


1287:./FreeRTOS/tasks.c ****         }
1288:./FreeRTOS/tasks.c ****         else
1289:./FreeRTOS/tasks.c ****         {
1290:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1291:./FreeRTOS/tasks.c ****         }
1292:./FreeRTOS/tasks.c **** 
1293:./FreeRTOS/tasks.c ****         return xShouldDelay;
1294:./FreeRTOS/tasks.c ****     }
1295:./FreeRTOS/tasks.c **** 
1296:./FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskDelayUntil */
1297:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1298:./FreeRTOS/tasks.c **** 
1299:./FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1300:./FreeRTOS/tasks.c **** 
1301:./FreeRTOS/tasks.c ****     void vTaskDelay( const TickType_t xTicksToDelay )
1302:./FreeRTOS/tasks.c ****     {
1303:./FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
1304:./FreeRTOS/tasks.c **** 
1305:./FreeRTOS/tasks.c ****         /* A delay time of zero just forces a reschedule. */
1306:./FreeRTOS/tasks.c ****         if( xTicksToDelay > ( TickType_t ) 0U )
1307:./FreeRTOS/tasks.c ****         {
1308:./FreeRTOS/tasks.c ****             configASSERT( uxSchedulerSuspended == 0 );
1309:./FreeRTOS/tasks.c ****             vTaskSuspendAll();
1310:./FreeRTOS/tasks.c ****             {
1311:./FreeRTOS/tasks.c ****                 traceTASK_DELAY();
1312:./FreeRTOS/tasks.c **** 
1313:./FreeRTOS/tasks.c ****                 /* A task that is removed from the event list while the
1314:./FreeRTOS/tasks.c ****                  * scheduler is suspended will not get placed in the ready
1315:./FreeRTOS/tasks.c ****                  * list or removed from the blocked list until the scheduler
1316:./FreeRTOS/tasks.c ****                  * is resumed.
1317:./FreeRTOS/tasks.c ****                  *
1318:./FreeRTOS/tasks.c ****                  * This task cannot be in an event list as it is the currently
1319:./FreeRTOS/tasks.c ****                  * executing task. */
1320:./FreeRTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1321:./FreeRTOS/tasks.c ****             }
1322:./FreeRTOS/tasks.c ****             xAlreadyYielded = xTaskResumeAll();
1323:./FreeRTOS/tasks.c ****         }
1324:./FreeRTOS/tasks.c ****         else
1325:./FreeRTOS/tasks.c ****         {
1326:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1327:./FreeRTOS/tasks.c ****         }
1328:./FreeRTOS/tasks.c **** 
1329:./FreeRTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1330:./FreeRTOS/tasks.c ****          * have put ourselves to sleep. */
1331:./FreeRTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1332:./FreeRTOS/tasks.c ****         {
1333:./FreeRTOS/tasks.c ****             portYIELD_WITHIN_API();
1334:./FreeRTOS/tasks.c ****         }
1335:./FreeRTOS/tasks.c ****         else
1336:./FreeRTOS/tasks.c ****         {
1337:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1338:./FreeRTOS/tasks.c ****         }
1339:./FreeRTOS/tasks.c ****     }
1340:./FreeRTOS/tasks.c **** 
1341:./FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1342:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1343:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 25


1344:./FreeRTOS/tasks.c **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
1345:./FreeRTOS/tasks.c **** 
1346:./FreeRTOS/tasks.c ****     eTaskState eTaskGetState( TaskHandle_t xTask )
1347:./FreeRTOS/tasks.c ****     {
1348:./FreeRTOS/tasks.c ****         eTaskState eReturn;
1349:./FreeRTOS/tasks.c ****         List_t const * pxStateList;
1350:./FreeRTOS/tasks.c ****         List_t const * pxDelayedList;
1351:./FreeRTOS/tasks.c ****         List_t const * pxOverflowedDelayedList;
1352:./FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
1353:./FreeRTOS/tasks.c **** 
1354:./FreeRTOS/tasks.c ****         configASSERT( pxTCB );
1355:./FreeRTOS/tasks.c **** 
1356:./FreeRTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
1357:./FreeRTOS/tasks.c ****         {
1358:./FreeRTOS/tasks.c ****             /* The task calling this function is querying its own state. */
1359:./FreeRTOS/tasks.c ****             eReturn = eRunning;
1360:./FreeRTOS/tasks.c ****         }
1361:./FreeRTOS/tasks.c ****         else
1362:./FreeRTOS/tasks.c ****         {
1363:./FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
1364:./FreeRTOS/tasks.c ****             {
1365:./FreeRTOS/tasks.c ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1366:./FreeRTOS/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
1367:./FreeRTOS/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1368:./FreeRTOS/tasks.c ****             }
1369:./FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
1370:./FreeRTOS/tasks.c **** 
1371:./FreeRTOS/tasks.c ****             if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1372:./FreeRTOS/tasks.c ****             {
1373:./FreeRTOS/tasks.c ****                 /* The task being queried is referenced from one of the Blocked
1374:./FreeRTOS/tasks.c ****                  * lists. */
1375:./FreeRTOS/tasks.c ****                 eReturn = eBlocked;
1376:./FreeRTOS/tasks.c ****             }
1377:./FreeRTOS/tasks.c **** 
1378:./FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
1379:./FreeRTOS/tasks.c ****                 else if( pxStateList == &xSuspendedTaskList )
1380:./FreeRTOS/tasks.c ****                 {
1381:./FreeRTOS/tasks.c ****                     /* The task being queried is referenced from the suspended
1382:./FreeRTOS/tasks.c ****                      * list.  Is it genuinely suspended or is it blocked
1383:./FreeRTOS/tasks.c ****                      * indefinitely? */
1384:./FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1385:./FreeRTOS/tasks.c ****                     {
1386:./FreeRTOS/tasks.c ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1387:./FreeRTOS/tasks.c ****                         {
1388:./FreeRTOS/tasks.c ****                             BaseType_t x;
1389:./FreeRTOS/tasks.c **** 
1390:./FreeRTOS/tasks.c ****                             /* The task does not appear on the event list item of
1391:./FreeRTOS/tasks.c ****                              * and of the RTOS objects, but could still be in the
1392:./FreeRTOS/tasks.c ****                              * blocked state if it is waiting on its notification
1393:./FreeRTOS/tasks.c ****                              * rather than waiting on an object.  If not, is
1394:./FreeRTOS/tasks.c ****                              * suspended. */
1395:./FreeRTOS/tasks.c ****                             eReturn = eSuspended;
1396:./FreeRTOS/tasks.c **** 
1397:./FreeRTOS/tasks.c ****                             for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1398:./FreeRTOS/tasks.c ****                             {
1399:./FreeRTOS/tasks.c ****                                 if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1400:./FreeRTOS/tasks.c ****                                 {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 26


1401:./FreeRTOS/tasks.c ****                                     eReturn = eBlocked;
1402:./FreeRTOS/tasks.c ****                                     break;
1403:./FreeRTOS/tasks.c ****                                 }
1404:./FreeRTOS/tasks.c ****                             }
1405:./FreeRTOS/tasks.c ****                         }
1406:./FreeRTOS/tasks.c ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1407:./FreeRTOS/tasks.c ****                         {
1408:./FreeRTOS/tasks.c ****                             eReturn = eSuspended;
1409:./FreeRTOS/tasks.c ****                         }
1410:./FreeRTOS/tasks.c ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1411:./FreeRTOS/tasks.c ****                     }
1412:./FreeRTOS/tasks.c ****                     else
1413:./FreeRTOS/tasks.c ****                     {
1414:./FreeRTOS/tasks.c ****                         eReturn = eBlocked;
1415:./FreeRTOS/tasks.c ****                     }
1416:./FreeRTOS/tasks.c ****                 }
1417:./FreeRTOS/tasks.c ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
1418:./FreeRTOS/tasks.c **** 
1419:./FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
1420:./FreeRTOS/tasks.c ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1421:./FreeRTOS/tasks.c ****                 {
1422:./FreeRTOS/tasks.c ****                     /* The task being queried is referenced from the deleted
1423:./FreeRTOS/tasks.c ****                      * tasks list, or it is not referenced from any lists at
1424:./FreeRTOS/tasks.c ****                      * all. */
1425:./FreeRTOS/tasks.c ****                     eReturn = eDeleted;
1426:./FreeRTOS/tasks.c ****                 }
1427:./FreeRTOS/tasks.c ****             #endif
1428:./FreeRTOS/tasks.c **** 
1429:./FreeRTOS/tasks.c ****             else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer
1430:./FreeRTOS/tasks.c ****             {
1431:./FreeRTOS/tasks.c ****                 /* If the task is not in any other state, it must be in the
1432:./FreeRTOS/tasks.c ****                  * Ready (including pending ready) state. */
1433:./FreeRTOS/tasks.c ****                 eReturn = eReady;
1434:./FreeRTOS/tasks.c ****             }
1435:./FreeRTOS/tasks.c ****         }
1436:./FreeRTOS/tasks.c **** 
1437:./FreeRTOS/tasks.c ****         return eReturn;
1438:./FreeRTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1439:./FreeRTOS/tasks.c **** 
1440:./FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1441:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1442:./FreeRTOS/tasks.c **** 
1443:./FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1444:./FreeRTOS/tasks.c **** 
1445:./FreeRTOS/tasks.c ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1446:./FreeRTOS/tasks.c ****     {
1447:./FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
1448:./FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
1449:./FreeRTOS/tasks.c **** 
1450:./FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1451:./FreeRTOS/tasks.c ****         {
1452:./FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the task
1453:./FreeRTOS/tasks.c ****              * that called uxTaskPriorityGet() that is being queried. */
1454:./FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1455:./FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
1456:./FreeRTOS/tasks.c ****         }
1457:./FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 27


1458:./FreeRTOS/tasks.c **** 
1459:./FreeRTOS/tasks.c ****         return uxReturn;
1460:./FreeRTOS/tasks.c ****     }
1461:./FreeRTOS/tasks.c **** 
1462:./FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1463:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1464:./FreeRTOS/tasks.c **** 
1465:./FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1466:./FreeRTOS/tasks.c **** 
1467:./FreeRTOS/tasks.c ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1468:./FreeRTOS/tasks.c ****     {
1469:./FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
1470:./FreeRTOS/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
1471:./FreeRTOS/tasks.c **** 
1472:./FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1473:./FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1474:./FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1475:./FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1476:./FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1477:./FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1478:./FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1479:./FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1480:./FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1481:./FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1482:./FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1483:./FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1484:./FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1485:./FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1486:./FreeRTOS/tasks.c ****          * provided on the following link:
1487:./FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1488:./FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1489:./FreeRTOS/tasks.c **** 
1490:./FreeRTOS/tasks.c ****         uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1491:./FreeRTOS/tasks.c ****         {
1492:./FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1493:./FreeRTOS/tasks.c ****              * task that is being queried. */
1494:./FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1495:./FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
1496:./FreeRTOS/tasks.c ****         }
1497:./FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1498:./FreeRTOS/tasks.c **** 
1499:./FreeRTOS/tasks.c ****         return uxReturn;
1500:./FreeRTOS/tasks.c ****     }
1501:./FreeRTOS/tasks.c **** 
1502:./FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1503:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1504:./FreeRTOS/tasks.c **** 
1505:./FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1506:./FreeRTOS/tasks.c **** 
1507:./FreeRTOS/tasks.c ****     void vTaskPrioritySet( TaskHandle_t xTask,
1508:./FreeRTOS/tasks.c ****                            UBaseType_t uxNewPriority )
1509:./FreeRTOS/tasks.c ****     {
1510:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1511:./FreeRTOS/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1512:./FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1513:./FreeRTOS/tasks.c **** 
1514:./FreeRTOS/tasks.c ****         configASSERT( uxNewPriority < configMAX_PRIORITIES );
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 28


1515:./FreeRTOS/tasks.c **** 
1516:./FreeRTOS/tasks.c ****         /* Ensure the new priority is valid. */
1517:./FreeRTOS/tasks.c ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1518:./FreeRTOS/tasks.c ****         {
1519:./FreeRTOS/tasks.c ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1520:./FreeRTOS/tasks.c ****         }
1521:./FreeRTOS/tasks.c ****         else
1522:./FreeRTOS/tasks.c ****         {
1523:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1524:./FreeRTOS/tasks.c ****         }
1525:./FreeRTOS/tasks.c **** 
1526:./FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1527:./FreeRTOS/tasks.c ****         {
1528:./FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1529:./FreeRTOS/tasks.c ****              * task that is being changed. */
1530:./FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1531:./FreeRTOS/tasks.c **** 
1532:./FreeRTOS/tasks.c ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1533:./FreeRTOS/tasks.c **** 
1534:./FreeRTOS/tasks.c ****             #if ( configUSE_MUTEXES == 1 )
1535:./FreeRTOS/tasks.c ****             {
1536:./FreeRTOS/tasks.c ****                 uxCurrentBasePriority = pxTCB->uxBasePriority;
1537:./FreeRTOS/tasks.c ****             }
1538:./FreeRTOS/tasks.c ****             #else
1539:./FreeRTOS/tasks.c ****             {
1540:./FreeRTOS/tasks.c ****                 uxCurrentBasePriority = pxTCB->uxPriority;
1541:./FreeRTOS/tasks.c ****             }
1542:./FreeRTOS/tasks.c ****             #endif
1543:./FreeRTOS/tasks.c **** 
1544:./FreeRTOS/tasks.c ****             if( uxCurrentBasePriority != uxNewPriority )
1545:./FreeRTOS/tasks.c ****             {
1546:./FreeRTOS/tasks.c ****                 /* The priority change may have readied a task of higher
1547:./FreeRTOS/tasks.c ****                  * priority than the calling task. */
1548:./FreeRTOS/tasks.c ****                 if( uxNewPriority > uxCurrentBasePriority )
1549:./FreeRTOS/tasks.c ****                 {
1550:./FreeRTOS/tasks.c ****                     if( pxTCB != pxCurrentTCB )
1551:./FreeRTOS/tasks.c ****                     {
1552:./FreeRTOS/tasks.c ****                         /* The priority of a task other than the currently
1553:./FreeRTOS/tasks.c ****                          * running task is being raised.  Is the priority being
1554:./FreeRTOS/tasks.c ****                          * raised above that of the running task? */
1555:./FreeRTOS/tasks.c ****                         if( uxNewPriority >= pxCurrentTCB->uxPriority )
1556:./FreeRTOS/tasks.c ****                         {
1557:./FreeRTOS/tasks.c ****                             xYieldRequired = pdTRUE;
1558:./FreeRTOS/tasks.c ****                         }
1559:./FreeRTOS/tasks.c ****                         else
1560:./FreeRTOS/tasks.c ****                         {
1561:./FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1562:./FreeRTOS/tasks.c ****                         }
1563:./FreeRTOS/tasks.c ****                     }
1564:./FreeRTOS/tasks.c ****                     else
1565:./FreeRTOS/tasks.c ****                     {
1566:./FreeRTOS/tasks.c ****                         /* The priority of the running task is being raised,
1567:./FreeRTOS/tasks.c ****                          * but the running task must already be the highest
1568:./FreeRTOS/tasks.c ****                          * priority task able to run so no yield is required. */
1569:./FreeRTOS/tasks.c ****                     }
1570:./FreeRTOS/tasks.c ****                 }
1571:./FreeRTOS/tasks.c ****                 else if( pxTCB == pxCurrentTCB )
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 29


1572:./FreeRTOS/tasks.c ****                 {
1573:./FreeRTOS/tasks.c ****                     /* Setting the priority of the running task down means
1574:./FreeRTOS/tasks.c ****                      * there may now be another task of higher priority that
1575:./FreeRTOS/tasks.c ****                      * is ready to execute. */
1576:./FreeRTOS/tasks.c ****                     xYieldRequired = pdTRUE;
1577:./FreeRTOS/tasks.c ****                 }
1578:./FreeRTOS/tasks.c ****                 else
1579:./FreeRTOS/tasks.c ****                 {
1580:./FreeRTOS/tasks.c ****                     /* Setting the priority of any other task down does not
1581:./FreeRTOS/tasks.c ****                      * require a yield as the running task must be above the
1582:./FreeRTOS/tasks.c ****                      * new priority of the task being modified. */
1583:./FreeRTOS/tasks.c ****                 }
1584:./FreeRTOS/tasks.c **** 
1585:./FreeRTOS/tasks.c ****                 /* Remember the ready list the task might be referenced from
1586:./FreeRTOS/tasks.c ****                  * before its uxPriority member is changed so the
1587:./FreeRTOS/tasks.c ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
1588:./FreeRTOS/tasks.c ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
1589:./FreeRTOS/tasks.c **** 
1590:./FreeRTOS/tasks.c ****                 #if ( configUSE_MUTEXES == 1 )
1591:./FreeRTOS/tasks.c ****                 {
1592:./FreeRTOS/tasks.c ****                     /* Only change the priority being used if the task is not
1593:./FreeRTOS/tasks.c ****                      * currently using an inherited priority. */
1594:./FreeRTOS/tasks.c ****                     if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1595:./FreeRTOS/tasks.c ****                     {
1596:./FreeRTOS/tasks.c ****                         pxTCB->uxPriority = uxNewPriority;
1597:./FreeRTOS/tasks.c ****                     }
1598:./FreeRTOS/tasks.c ****                     else
1599:./FreeRTOS/tasks.c ****                     {
1600:./FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1601:./FreeRTOS/tasks.c ****                     }
1602:./FreeRTOS/tasks.c **** 
1603:./FreeRTOS/tasks.c ****                     /* The base priority gets set whatever. */
1604:./FreeRTOS/tasks.c ****                     pxTCB->uxBasePriority = uxNewPriority;
1605:./FreeRTOS/tasks.c ****                 }
1606:./FreeRTOS/tasks.c ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
1607:./FreeRTOS/tasks.c ****                 {
1608:./FreeRTOS/tasks.c ****                     pxTCB->uxPriority = uxNewPriority;
1609:./FreeRTOS/tasks.c ****                 }
1610:./FreeRTOS/tasks.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1611:./FreeRTOS/tasks.c **** 
1612:./FreeRTOS/tasks.c ****                 /* Only reset the event list item value if the value is not
1613:./FreeRTOS/tasks.c ****                  * being used for anything else. */
1614:./FreeRTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
1615:./FreeRTOS/tasks.c ****                 {
1616:./FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
1617:./FreeRTOS/tasks.c ****                 }
1618:./FreeRTOS/tasks.c ****                 else
1619:./FreeRTOS/tasks.c ****                 {
1620:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1621:./FreeRTOS/tasks.c ****                 }
1622:./FreeRTOS/tasks.c **** 
1623:./FreeRTOS/tasks.c ****                 /* If the task is in the blocked or suspended list we need do
1624:./FreeRTOS/tasks.c ****                  * nothing more than change its priority variable. However, if
1625:./FreeRTOS/tasks.c ****                  * the task is in a ready list it needs to be removed and placed
1626:./FreeRTOS/tasks.c ****                  * in the list appropriate to its new priority. */
1627:./FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
1628:./FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 30


1629:./FreeRTOS/tasks.c ****                     /* The task is currently in its ready list - remove before
1630:./FreeRTOS/tasks.c ****                      * adding it to its new ready list.  As we are in a critical
1631:./FreeRTOS/tasks.c ****                      * section we can do this even if the scheduler is suspended. */
1632:./FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1633:./FreeRTOS/tasks.c ****                     {
1634:./FreeRTOS/tasks.c ****                         /* It is known that the task is in its ready list so
1635:./FreeRTOS/tasks.c ****                          * there is no need to check again and the port level
1636:./FreeRTOS/tasks.c ****                          * reset macro can be called directly. */
1637:./FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1638:./FreeRTOS/tasks.c ****                     }
1639:./FreeRTOS/tasks.c ****                     else
1640:./FreeRTOS/tasks.c ****                     {
1641:./FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1642:./FreeRTOS/tasks.c ****                     }
1643:./FreeRTOS/tasks.c **** 
1644:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1645:./FreeRTOS/tasks.c ****                 }
1646:./FreeRTOS/tasks.c ****                 else
1647:./FreeRTOS/tasks.c ****                 {
1648:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1649:./FreeRTOS/tasks.c ****                 }
1650:./FreeRTOS/tasks.c **** 
1651:./FreeRTOS/tasks.c ****                 if( xYieldRequired != pdFALSE )
1652:./FreeRTOS/tasks.c ****                 {
1653:./FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
1654:./FreeRTOS/tasks.c ****                 }
1655:./FreeRTOS/tasks.c ****                 else
1656:./FreeRTOS/tasks.c ****                 {
1657:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1658:./FreeRTOS/tasks.c ****                 }
1659:./FreeRTOS/tasks.c **** 
1660:./FreeRTOS/tasks.c ****                 /* Remove compiler warning about unused variables when the port
1661:./FreeRTOS/tasks.c ****                  * optimised task selection is not being used. */
1662:./FreeRTOS/tasks.c ****                 ( void ) uxPriorityUsedOnEntry;
1663:./FreeRTOS/tasks.c ****             }
1664:./FreeRTOS/tasks.c ****         }
1665:./FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
1666:./FreeRTOS/tasks.c ****     }
1667:./FreeRTOS/tasks.c **** 
1668:./FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1669:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1670:./FreeRTOS/tasks.c **** 
1671:./FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1672:./FreeRTOS/tasks.c **** 
1673:./FreeRTOS/tasks.c ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1674:./FreeRTOS/tasks.c ****     {
1675:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1676:./FreeRTOS/tasks.c **** 
1677:./FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1678:./FreeRTOS/tasks.c ****         {
1679:./FreeRTOS/tasks.c ****             /* If null is passed in here then it is the running task that is
1680:./FreeRTOS/tasks.c ****              * being suspended. */
1681:./FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1682:./FreeRTOS/tasks.c **** 
1683:./FreeRTOS/tasks.c ****             traceTASK_SUSPEND( pxTCB );
1684:./FreeRTOS/tasks.c **** 
1685:./FreeRTOS/tasks.c ****             /* Remove task from the ready/delayed list and place in the
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 31


1686:./FreeRTOS/tasks.c ****              * suspended list. */
1687:./FreeRTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1688:./FreeRTOS/tasks.c ****             {
1689:./FreeRTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1690:./FreeRTOS/tasks.c ****             }
1691:./FreeRTOS/tasks.c ****             else
1692:./FreeRTOS/tasks.c ****             {
1693:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1694:./FreeRTOS/tasks.c ****             }
1695:./FreeRTOS/tasks.c **** 
1696:./FreeRTOS/tasks.c ****             /* Is the task waiting on an event also? */
1697:./FreeRTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1698:./FreeRTOS/tasks.c ****             {
1699:./FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1700:./FreeRTOS/tasks.c ****             }
1701:./FreeRTOS/tasks.c ****             else
1702:./FreeRTOS/tasks.c ****             {
1703:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1704:./FreeRTOS/tasks.c ****             }
1705:./FreeRTOS/tasks.c **** 
1706:./FreeRTOS/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1707:./FreeRTOS/tasks.c **** 
1708:./FreeRTOS/tasks.c ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1709:./FreeRTOS/tasks.c ****             {
1710:./FreeRTOS/tasks.c ****                 BaseType_t x;
1711:./FreeRTOS/tasks.c **** 
1712:./FreeRTOS/tasks.c ****                 for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1713:./FreeRTOS/tasks.c ****                 {
1714:./FreeRTOS/tasks.c ****                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1715:./FreeRTOS/tasks.c ****                     {
1716:./FreeRTOS/tasks.c ****                         /* The task was blocked to wait for a notification, but is
1717:./FreeRTOS/tasks.c ****                          * now suspended, so no notification was received. */
1718:./FreeRTOS/tasks.c ****                         pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
1719:./FreeRTOS/tasks.c ****                     }
1720:./FreeRTOS/tasks.c ****                 }
1721:./FreeRTOS/tasks.c ****             }
1722:./FreeRTOS/tasks.c ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1723:./FreeRTOS/tasks.c ****         }
1724:./FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
1725:./FreeRTOS/tasks.c **** 
1726:./FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1727:./FreeRTOS/tasks.c ****         {
1728:./FreeRTOS/tasks.c ****             /* Reset the next expected unblock time in case it referred to the
1729:./FreeRTOS/tasks.c ****              * task that is now in the Suspended state. */
1730:./FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
1731:./FreeRTOS/tasks.c ****             {
1732:./FreeRTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
1733:./FreeRTOS/tasks.c ****             }
1734:./FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
1735:./FreeRTOS/tasks.c ****         }
1736:./FreeRTOS/tasks.c ****         else
1737:./FreeRTOS/tasks.c ****         {
1738:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1739:./FreeRTOS/tasks.c ****         }
1740:./FreeRTOS/tasks.c **** 
1741:./FreeRTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
1742:./FreeRTOS/tasks.c ****         {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 32


1743:./FreeRTOS/tasks.c ****             if( xSchedulerRunning != pdFALSE )
1744:./FreeRTOS/tasks.c ****             {
1745:./FreeRTOS/tasks.c ****                 /* The current task has just been suspended. */
1746:./FreeRTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
1747:./FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
1748:./FreeRTOS/tasks.c ****             }
1749:./FreeRTOS/tasks.c ****             else
1750:./FreeRTOS/tasks.c ****             {
1751:./FreeRTOS/tasks.c ****                 /* The scheduler is not running, but the task that was pointed
1752:./FreeRTOS/tasks.c ****                  * to by pxCurrentTCB has just been suspended and pxCurrentTCB
1753:./FreeRTOS/tasks.c ****                  * must be adjusted to point to a different task. */
1754:./FreeRTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*li
1755:./FreeRTOS/tasks.c ****                 {
1756:./FreeRTOS/tasks.c ****                     /* No other tasks are ready, so set pxCurrentTCB back to
1757:./FreeRTOS/tasks.c ****                      * NULL so when the next task is created pxCurrentTCB will
1758:./FreeRTOS/tasks.c ****                      * be set to point to it no matter what its relative priority
1759:./FreeRTOS/tasks.c ****                      * is. */
1760:./FreeRTOS/tasks.c ****                     pxCurrentTCB = NULL;
1761:./FreeRTOS/tasks.c ****                 }
1762:./FreeRTOS/tasks.c ****                 else
1763:./FreeRTOS/tasks.c ****                 {
1764:./FreeRTOS/tasks.c ****                     vTaskSwitchContext();
1765:./FreeRTOS/tasks.c ****                 }
1766:./FreeRTOS/tasks.c ****             }
1767:./FreeRTOS/tasks.c ****         }
1768:./FreeRTOS/tasks.c ****         else
1769:./FreeRTOS/tasks.c ****         {
1770:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1771:./FreeRTOS/tasks.c ****         }
1772:./FreeRTOS/tasks.c ****     }
1773:./FreeRTOS/tasks.c **** 
1774:./FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1775:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1776:./FreeRTOS/tasks.c **** 
1777:./FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1778:./FreeRTOS/tasks.c **** 
1779:./FreeRTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1780:./FreeRTOS/tasks.c ****     {
  27              		.loc 1 1780 5 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
1781:./FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
  32              		.loc 1 1781 9 view .LVU1
1782:./FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  33              		.loc 1 1782 9 view .LVU2
1783:./FreeRTOS/tasks.c **** 
1784:./FreeRTOS/tasks.c ****         /* Accesses xPendingReadyList so must be called from a critical
1785:./FreeRTOS/tasks.c ****          * section. */
1786:./FreeRTOS/tasks.c **** 
1787:./FreeRTOS/tasks.c ****         /* It does not make sense to check if the calling task is suspended. */
1788:./FreeRTOS/tasks.c ****         configASSERT( xTask );
  34              		.loc 1 1788 30 view .LVU3
1789:./FreeRTOS/tasks.c **** 
1790:./FreeRTOS/tasks.c ****         /* Is the task being resumed actually in the suspended list? */
1791:./FreeRTOS/tasks.c ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 33


  35              		.loc 1 1791 9 view .LVU4
  36              		.loc 1 1791 13 is_stmt 0 view .LVU5
  37 0000 4269     		ldr	r2, [r0, #20]
  38              		.loc 1 1791 11 view .LVU6
  39 0002 084B     		ldr	r3, .L7
  40 0004 9A42     		cmp	r2, r3
  41 0006 01D0     		beq	.L6
1781:./FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  42              		.loc 1 1781 20 view .LVU7
  43 0008 0020     		movs	r0, #0
  44              	.LVL1:
1781:./FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  45              		.loc 1 1781 20 view .LVU8
  46 000a 7047     		bx	lr
  47              	.LVL2:
  48              	.L6:
1792:./FreeRTOS/tasks.c ****         {
1793:./FreeRTOS/tasks.c ****             /* Has the task already been resumed from within an ISR? */
1794:./FreeRTOS/tasks.c ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
  49              		.loc 1 1794 13 is_stmt 1 view .LVU9
  50              		.loc 1 1794 17 is_stmt 0 view .LVU10
  51 000c 836A     		ldr	r3, [r0, #40]
  52              		.loc 1 1794 15 view .LVU11
  53 000e 064A     		ldr	r2, .L7+4
  54 0010 9342     		cmp	r3, r2
  55 0012 02D0     		beq	.L4
1795:./FreeRTOS/tasks.c ****             {
1796:./FreeRTOS/tasks.c ****                 /* Is it in the suspended list because it is in the Suspended
1797:./FreeRTOS/tasks.c ****                  * state, or because is is blocked with no timeout? */
1798:./FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint
  56              		.loc 1 1798 17 is_stmt 1 view .LVU12
  57              		.loc 1 1798 19 is_stmt 0 view .LVU13
  58 0014 1BB1     		cbz	r3, .L5
1781:./FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  59              		.loc 1 1781 20 view .LVU14
  60 0016 0020     		movs	r0, #0
  61              	.LVL3:
1781:./FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  62              		.loc 1 1781 20 view .LVU15
  63 0018 7047     		bx	lr
  64              	.LVL4:
  65              	.L4:
1781:./FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  66              		.loc 1 1781 20 view .LVU16
  67 001a 0020     		movs	r0, #0
  68              	.LVL5:
1781:./FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  69              		.loc 1 1781 20 view .LVU17
  70 001c 7047     		bx	lr
  71              	.LVL6:
  72              	.L5:
1799:./FreeRTOS/tasks.c ****                 {
1800:./FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
  73              		.loc 1 1800 29 view .LVU18
  74 001e 0120     		movs	r0, #1
  75              	.LVL7:
1801:./FreeRTOS/tasks.c ****                 }
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 34


1802:./FreeRTOS/tasks.c ****                 else
1803:./FreeRTOS/tasks.c ****                 {
1804:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1805:./FreeRTOS/tasks.c ****                 }
1806:./FreeRTOS/tasks.c ****             }
1807:./FreeRTOS/tasks.c ****             else
1808:./FreeRTOS/tasks.c ****             {
1809:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1810:./FreeRTOS/tasks.c ****             }
1811:./FreeRTOS/tasks.c ****         }
1812:./FreeRTOS/tasks.c ****         else
1813:./FreeRTOS/tasks.c ****         {
1814:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
  76              		.loc 1 1814 37 is_stmt 1 view .LVU19
1815:./FreeRTOS/tasks.c ****         }
1816:./FreeRTOS/tasks.c **** 
1817:./FreeRTOS/tasks.c ****         return xReturn;
  77              		.loc 1 1817 9 view .LVU20
1818:./FreeRTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  78              		.loc 1 1818 5 is_stmt 0 view .LVU21
  79 0020 7047     		bx	lr
  80              	.L8:
  81 0022 00BF     		.align	2
  82              	.L7:
  83 0024 00000000 		.word	xSuspendedTaskList
  84 0028 00000000 		.word	xPendingReadyList
  85              		.cfi_endproc
  86              	.LFE44:
  88              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
  89              		.align	1
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  94              	prvResetNextTaskUnblockTime:
  95              	.LFB71:
1819:./FreeRTOS/tasks.c **** 
1820:./FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1821:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1822:./FreeRTOS/tasks.c **** 
1823:./FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1824:./FreeRTOS/tasks.c **** 
1825:./FreeRTOS/tasks.c ****     void vTaskResume( TaskHandle_t xTaskToResume )
1826:./FreeRTOS/tasks.c ****     {
1827:./FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1828:./FreeRTOS/tasks.c **** 
1829:./FreeRTOS/tasks.c ****         /* It does not make sense to resume the calling task. */
1830:./FreeRTOS/tasks.c ****         configASSERT( xTaskToResume );
1831:./FreeRTOS/tasks.c **** 
1832:./FreeRTOS/tasks.c ****         /* The parameter cannot be NULL as it is impossible to resume the
1833:./FreeRTOS/tasks.c ****          * currently executing task. */
1834:./FreeRTOS/tasks.c ****         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1835:./FreeRTOS/tasks.c ****         {
1836:./FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
1837:./FreeRTOS/tasks.c ****             {
1838:./FreeRTOS/tasks.c ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1839:./FreeRTOS/tasks.c ****                 {
1840:./FreeRTOS/tasks.c ****                     traceTASK_RESUME( pxTCB );
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 35


1841:./FreeRTOS/tasks.c **** 
1842:./FreeRTOS/tasks.c ****                     /* The ready list can be accessed even if the scheduler is
1843:./FreeRTOS/tasks.c ****                      * suspended because this is inside a critical section. */
1844:./FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1845:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1846:./FreeRTOS/tasks.c **** 
1847:./FreeRTOS/tasks.c ****                     /* A higher priority task may have just been resumed. */
1848:./FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1849:./FreeRTOS/tasks.c ****                     {
1850:./FreeRTOS/tasks.c ****                         /* This yield may not cause the task just resumed to run,
1851:./FreeRTOS/tasks.c ****                          * but will leave the lists in the correct state for the
1852:./FreeRTOS/tasks.c ****                          * next yield. */
1853:./FreeRTOS/tasks.c ****                         taskYIELD_IF_USING_PREEMPTION();
1854:./FreeRTOS/tasks.c ****                     }
1855:./FreeRTOS/tasks.c ****                     else
1856:./FreeRTOS/tasks.c ****                     {
1857:./FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1858:./FreeRTOS/tasks.c ****                     }
1859:./FreeRTOS/tasks.c ****                 }
1860:./FreeRTOS/tasks.c ****                 else
1861:./FreeRTOS/tasks.c ****                 {
1862:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1863:./FreeRTOS/tasks.c ****                 }
1864:./FreeRTOS/tasks.c ****             }
1865:./FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
1866:./FreeRTOS/tasks.c ****         }
1867:./FreeRTOS/tasks.c ****         else
1868:./FreeRTOS/tasks.c ****         {
1869:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1870:./FreeRTOS/tasks.c ****         }
1871:./FreeRTOS/tasks.c ****     }
1872:./FreeRTOS/tasks.c **** 
1873:./FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1874:./FreeRTOS/tasks.c **** 
1875:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1876:./FreeRTOS/tasks.c **** 
1877:./FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1878:./FreeRTOS/tasks.c **** 
1879:./FreeRTOS/tasks.c ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1880:./FreeRTOS/tasks.c ****     {
1881:./FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1882:./FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1883:./FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
1884:./FreeRTOS/tasks.c **** 
1885:./FreeRTOS/tasks.c ****         configASSERT( xTaskToResume );
1886:./FreeRTOS/tasks.c **** 
1887:./FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1888:./FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1889:./FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1890:./FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1891:./FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1892:./FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1893:./FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1894:./FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1895:./FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1896:./FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1897:./FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 36


1898:./FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1899:./FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1900:./FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1901:./FreeRTOS/tasks.c ****          * provided on the following link:
1902:./FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1903:./FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1904:./FreeRTOS/tasks.c **** 
1905:./FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1906:./FreeRTOS/tasks.c ****         {
1907:./FreeRTOS/tasks.c ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1908:./FreeRTOS/tasks.c ****             {
1909:./FreeRTOS/tasks.c ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
1910:./FreeRTOS/tasks.c **** 
1911:./FreeRTOS/tasks.c ****                 /* Check the ready lists can be accessed. */
1912:./FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1913:./FreeRTOS/tasks.c ****                 {
1914:./FreeRTOS/tasks.c ****                     /* Ready lists can be accessed so move the task from the
1915:./FreeRTOS/tasks.c ****                      * suspended list to the ready list directly. */
1916:./FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1917:./FreeRTOS/tasks.c ****                     {
1918:./FreeRTOS/tasks.c ****                         xYieldRequired = pdTRUE;
1919:./FreeRTOS/tasks.c **** 
1920:./FreeRTOS/tasks.c ****                         /* Mark that a yield is pending in case the user is not
1921:./FreeRTOS/tasks.c ****                          * using the return value to initiate a context switch
1922:./FreeRTOS/tasks.c ****                          * from the ISR using portYIELD_FROM_ISR. */
1923:./FreeRTOS/tasks.c ****                         xYieldPending = pdTRUE;
1924:./FreeRTOS/tasks.c ****                     }
1925:./FreeRTOS/tasks.c ****                     else
1926:./FreeRTOS/tasks.c ****                     {
1927:./FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1928:./FreeRTOS/tasks.c ****                     }
1929:./FreeRTOS/tasks.c **** 
1930:./FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1931:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1932:./FreeRTOS/tasks.c ****                 }
1933:./FreeRTOS/tasks.c ****                 else
1934:./FreeRTOS/tasks.c ****                 {
1935:./FreeRTOS/tasks.c ****                     /* The delayed or ready lists cannot be accessed so the task
1936:./FreeRTOS/tasks.c ****                      * is held in the pending ready list until the scheduler is
1937:./FreeRTOS/tasks.c ****                      * unsuspended. */
1938:./FreeRTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1939:./FreeRTOS/tasks.c ****                 }
1940:./FreeRTOS/tasks.c ****             }
1941:./FreeRTOS/tasks.c ****             else
1942:./FreeRTOS/tasks.c ****             {
1943:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1944:./FreeRTOS/tasks.c ****             }
1945:./FreeRTOS/tasks.c ****         }
1946:./FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1947:./FreeRTOS/tasks.c **** 
1948:./FreeRTOS/tasks.c ****         return xYieldRequired;
1949:./FreeRTOS/tasks.c ****     }
1950:./FreeRTOS/tasks.c **** 
1951:./FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1952:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1953:./FreeRTOS/tasks.c **** 
1954:./FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 37


1955:./FreeRTOS/tasks.c **** {
1956:./FreeRTOS/tasks.c ****     BaseType_t xReturn;
1957:./FreeRTOS/tasks.c **** 
1958:./FreeRTOS/tasks.c ****     /* Add the idle task at the lowest priority. */
1959:./FreeRTOS/tasks.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
1960:./FreeRTOS/tasks.c ****     {
1961:./FreeRTOS/tasks.c ****         StaticTask_t * pxIdleTaskTCBBuffer = NULL;
1962:./FreeRTOS/tasks.c ****         StackType_t * pxIdleTaskStackBuffer = NULL;
1963:./FreeRTOS/tasks.c ****         uint32_t ulIdleTaskStackSize;
1964:./FreeRTOS/tasks.c **** 
1965:./FreeRTOS/tasks.c ****         /* The Idle task is created using user provided RAM - obtain the
1966:./FreeRTOS/tasks.c ****          * address of the RAM then create the idle task. */
1967:./FreeRTOS/tasks.c ****         vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskSta
1968:./FreeRTOS/tasks.c ****         xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
1969:./FreeRTOS/tasks.c ****                                              configIDLE_TASK_NAME,
1970:./FreeRTOS/tasks.c ****                                              ulIdleTaskStackSize,
1971:./FreeRTOS/tasks.c ****                                              ( void * ) NULL,       /*lint !e961.  The cast is not 
1972:./FreeRTOS/tasks.c ****                                              portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY
1973:./FreeRTOS/tasks.c ****                                              pxIdleTaskStackBuffer,
1974:./FreeRTOS/tasks.c ****                                              pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, j
1975:./FreeRTOS/tasks.c **** 
1976:./FreeRTOS/tasks.c ****         if( xIdleTaskHandle != NULL )
1977:./FreeRTOS/tasks.c ****         {
1978:./FreeRTOS/tasks.c ****             xReturn = pdPASS;
1979:./FreeRTOS/tasks.c ****         }
1980:./FreeRTOS/tasks.c ****         else
1981:./FreeRTOS/tasks.c ****         {
1982:./FreeRTOS/tasks.c ****             xReturn = pdFAIL;
1983:./FreeRTOS/tasks.c ****         }
1984:./FreeRTOS/tasks.c ****     }
1985:./FreeRTOS/tasks.c ****     #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
1986:./FreeRTOS/tasks.c ****     {
1987:./FreeRTOS/tasks.c ****         /* The Idle task is being created using dynamically allocated RAM. */
1988:./FreeRTOS/tasks.c ****         xReturn = xTaskCreate( prvIdleTask,
1989:./FreeRTOS/tasks.c ****                                configIDLE_TASK_NAME,
1990:./FreeRTOS/tasks.c ****                                configMINIMAL_STACK_SIZE,
1991:./FreeRTOS/tasks.c ****                                ( void * ) NULL,
1992:./FreeRTOS/tasks.c ****                                portPRIVILEGE_BIT,  /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_
1993:./FreeRTOS/tasks.c ****                                &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is
1994:./FreeRTOS/tasks.c ****     }
1995:./FreeRTOS/tasks.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
1996:./FreeRTOS/tasks.c **** 
1997:./FreeRTOS/tasks.c ****     #if ( configUSE_TIMERS == 1 )
1998:./FreeRTOS/tasks.c ****     {
1999:./FreeRTOS/tasks.c ****         if( xReturn == pdPASS )
2000:./FreeRTOS/tasks.c ****         {
2001:./FreeRTOS/tasks.c ****             xReturn = xTimerCreateTimerTask();
2002:./FreeRTOS/tasks.c ****         }
2003:./FreeRTOS/tasks.c ****         else
2004:./FreeRTOS/tasks.c ****         {
2005:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2006:./FreeRTOS/tasks.c ****         }
2007:./FreeRTOS/tasks.c ****     }
2008:./FreeRTOS/tasks.c ****     #endif /* configUSE_TIMERS */
2009:./FreeRTOS/tasks.c **** 
2010:./FreeRTOS/tasks.c ****     if( xReturn == pdPASS )
2011:./FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 38


2012:./FreeRTOS/tasks.c ****         /* freertos_tasks_c_additions_init() should only be called if the user
2013:./FreeRTOS/tasks.c ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2014:./FreeRTOS/tasks.c ****          * the only macro called by the function. */
2015:./FreeRTOS/tasks.c ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2016:./FreeRTOS/tasks.c ****         {
2017:./FreeRTOS/tasks.c ****             freertos_tasks_c_additions_init();
2018:./FreeRTOS/tasks.c ****         }
2019:./FreeRTOS/tasks.c ****         #endif
2020:./FreeRTOS/tasks.c **** 
2021:./FreeRTOS/tasks.c ****         /* Interrupts are turned off here, to ensure a tick does not occur
2022:./FreeRTOS/tasks.c ****          * before or during the call to xPortStartScheduler().  The stacks of
2023:./FreeRTOS/tasks.c ****          * the created tasks contain a status word with interrupts switched on
2024:./FreeRTOS/tasks.c ****          * so interrupts will automatically get re-enabled when the first task
2025:./FreeRTOS/tasks.c ****          * starts to run. */
2026:./FreeRTOS/tasks.c ****         portDISABLE_INTERRUPTS();
2027:./FreeRTOS/tasks.c **** 
2028:./FreeRTOS/tasks.c ****         #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
2029:./FreeRTOS/tasks.c ****         {
2030:./FreeRTOS/tasks.c ****             /* Switch C-Runtime's TLS Block to point to the TLS
2031:./FreeRTOS/tasks.c ****              * block specific to the task that will run first. */
2032:./FreeRTOS/tasks.c ****             configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
2033:./FreeRTOS/tasks.c ****         }
2034:./FreeRTOS/tasks.c ****         #endif
2035:./FreeRTOS/tasks.c **** 
2036:./FreeRTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
2037:./FreeRTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
2038:./FreeRTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2039:./FreeRTOS/tasks.c **** 
2040:./FreeRTOS/tasks.c ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
2041:./FreeRTOS/tasks.c ****          * macro must be defined to configure the timer/counter used to generate
2042:./FreeRTOS/tasks.c ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2043:./FreeRTOS/tasks.c ****          * is set to 0 and the following line fails to build then ensure you do not
2044:./FreeRTOS/tasks.c ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2045:./FreeRTOS/tasks.c ****          * FreeRTOSConfig.h file. */
2046:./FreeRTOS/tasks.c ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2047:./FreeRTOS/tasks.c **** 
2048:./FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
2049:./FreeRTOS/tasks.c **** 
2050:./FreeRTOS/tasks.c ****         /* Setting up the timer tick is hardware specific and thus in the
2051:./FreeRTOS/tasks.c ****          * portable interface. */
2052:./FreeRTOS/tasks.c ****         xPortStartScheduler();
2053:./FreeRTOS/tasks.c **** 
2054:./FreeRTOS/tasks.c ****         /* In most cases, xPortStartScheduler() will not return. If it
2055:./FreeRTOS/tasks.c ****          * returns pdTRUE then there was not enough heap memory available
2056:./FreeRTOS/tasks.c ****          * to create either the Idle or the Timer task. If it returned
2057:./FreeRTOS/tasks.c ****          * pdFALSE, then the application called xTaskEndScheduler().
2058:./FreeRTOS/tasks.c ****          * Most ports don't implement xTaskEndScheduler() as there is
2059:./FreeRTOS/tasks.c ****          * nothing to return to. */
2060:./FreeRTOS/tasks.c ****     }
2061:./FreeRTOS/tasks.c ****     else
2062:./FreeRTOS/tasks.c ****     {
2063:./FreeRTOS/tasks.c ****         /* This line will only be reached if the kernel could not be started,
2064:./FreeRTOS/tasks.c ****          * because there was not enough FreeRTOS heap to create the idle task
2065:./FreeRTOS/tasks.c ****          * or the timer task. */
2066:./FreeRTOS/tasks.c ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2067:./FreeRTOS/tasks.c ****     }
2068:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 39


2069:./FreeRTOS/tasks.c ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2070:./FreeRTOS/tasks.c ****      * meaning xIdleTaskHandle is not used anywhere else. */
2071:./FreeRTOS/tasks.c ****     ( void ) xIdleTaskHandle;
2072:./FreeRTOS/tasks.c **** 
2073:./FreeRTOS/tasks.c ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
2074:./FreeRTOS/tasks.c ****      * from getting optimized out as it is no longer used by the kernel. */
2075:./FreeRTOS/tasks.c ****     ( void ) uxTopUsedPriority;
2076:./FreeRTOS/tasks.c **** }
2077:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2078:./FreeRTOS/tasks.c **** 
2079:./FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
2080:./FreeRTOS/tasks.c **** {
2081:./FreeRTOS/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
2082:./FreeRTOS/tasks.c ****      * routine so the original ISRs can be restored if necessary.  The port
2083:./FreeRTOS/tasks.c ****      * layer must ensure interrupts enable  bit is left in the correct state. */
2084:./FreeRTOS/tasks.c ****     portDISABLE_INTERRUPTS();
2085:./FreeRTOS/tasks.c ****     xSchedulerRunning = pdFALSE;
2086:./FreeRTOS/tasks.c ****     vPortEndScheduler();
2087:./FreeRTOS/tasks.c **** }
2088:./FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2089:./FreeRTOS/tasks.c **** 
2090:./FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
2091:./FreeRTOS/tasks.c **** {
2092:./FreeRTOS/tasks.c ****     /* A critical section is not required as the variable is of type
2093:./FreeRTOS/tasks.c ****      * BaseType_t.  Please read Richard Barry's reply in the following link to a
2094:./FreeRTOS/tasks.c ****      * post in the FreeRTOS support forum before reporting this as a bug! -
2095:./FreeRTOS/tasks.c ****      * https://goo.gl/wu4acr */
2096:./FreeRTOS/tasks.c **** 
2097:./FreeRTOS/tasks.c ****     /* portSOFTWARE_BARRIER() is only implemented for emulated/simulated ports that
2098:./FreeRTOS/tasks.c ****      * do not otherwise exhibit real time behaviour. */
2099:./FreeRTOS/tasks.c ****     portSOFTWARE_BARRIER();
2100:./FreeRTOS/tasks.c **** 
2101:./FreeRTOS/tasks.c ****     /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2102:./FreeRTOS/tasks.c ****      * is used to allow calls to vTaskSuspendAll() to nest. */
2103:./FreeRTOS/tasks.c ****     ++uxSchedulerSuspended;
2104:./FreeRTOS/tasks.c **** 
2105:./FreeRTOS/tasks.c ****     /* Enforces ordering for ports and optimised compilers that may otherwise place
2106:./FreeRTOS/tasks.c ****      * the above increment elsewhere. */
2107:./FreeRTOS/tasks.c ****     portMEMORY_BARRIER();
2108:./FreeRTOS/tasks.c **** }
2109:./FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2110:./FreeRTOS/tasks.c **** 
2111:./FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2112:./FreeRTOS/tasks.c **** 
2113:./FreeRTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void )
2114:./FreeRTOS/tasks.c ****     {
2115:./FreeRTOS/tasks.c ****         TickType_t xReturn;
2116:./FreeRTOS/tasks.c ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2117:./FreeRTOS/tasks.c **** 
2118:./FreeRTOS/tasks.c ****         /* uxHigherPriorityReadyTasks takes care of the case where
2119:./FreeRTOS/tasks.c ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:./FreeRTOS/tasks.c ****          * task that are in the Ready state, even though the idle task is
2121:./FreeRTOS/tasks.c ****          * running. */
2122:./FreeRTOS/tasks.c ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:./FreeRTOS/tasks.c ****         {
2124:./FreeRTOS/tasks.c ****             if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:./FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 40


2126:./FreeRTOS/tasks.c ****                 uxHigherPriorityReadyTasks = pdTRUE;
2127:./FreeRTOS/tasks.c ****             }
2128:./FreeRTOS/tasks.c ****         }
2129:./FreeRTOS/tasks.c ****         #else
2130:./FreeRTOS/tasks.c ****         {
2131:./FreeRTOS/tasks.c ****             const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:./FreeRTOS/tasks.c **** 
2133:./FreeRTOS/tasks.c ****             /* When port optimised task selection is used the uxTopReadyPriority
2134:./FreeRTOS/tasks.c ****              * variable is used as a bit map.  If bits other than the least
2135:./FreeRTOS/tasks.c ****              * significant bit are set then there are tasks that have a priority
2136:./FreeRTOS/tasks.c ****              * above the idle priority that are in the Ready state.  This takes
2137:./FreeRTOS/tasks.c ****              * care of the case where the co-operative scheduler is in use. */
2138:./FreeRTOS/tasks.c ****             if( uxTopReadyPriority > uxLeastSignificantBit )
2139:./FreeRTOS/tasks.c ****             {
2140:./FreeRTOS/tasks.c ****                 uxHigherPriorityReadyTasks = pdTRUE;
2141:./FreeRTOS/tasks.c ****             }
2142:./FreeRTOS/tasks.c ****         }
2143:./FreeRTOS/tasks.c ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
2144:./FreeRTOS/tasks.c **** 
2145:./FreeRTOS/tasks.c ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:./FreeRTOS/tasks.c ****         {
2147:./FreeRTOS/tasks.c ****             xReturn = 0;
2148:./FreeRTOS/tasks.c ****         }
2149:./FreeRTOS/tasks.c ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:./FreeRTOS/tasks.c ****         {
2151:./FreeRTOS/tasks.c ****             /* There are other idle priority tasks in the ready state.  If
2152:./FreeRTOS/tasks.c ****              * time slicing is used then the very next tick interrupt must be
2153:./FreeRTOS/tasks.c ****              * processed. */
2154:./FreeRTOS/tasks.c ****             xReturn = 0;
2155:./FreeRTOS/tasks.c ****         }
2156:./FreeRTOS/tasks.c ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:./FreeRTOS/tasks.c ****         {
2158:./FreeRTOS/tasks.c ****             /* There are tasks in the Ready state that have a priority above the
2159:./FreeRTOS/tasks.c ****              * idle priority.  This path can only be reached if
2160:./FreeRTOS/tasks.c ****              * configUSE_PREEMPTION is 0. */
2161:./FreeRTOS/tasks.c ****             xReturn = 0;
2162:./FreeRTOS/tasks.c ****         }
2163:./FreeRTOS/tasks.c ****         else
2164:./FreeRTOS/tasks.c ****         {
2165:./FreeRTOS/tasks.c ****             xReturn = xNextTaskUnblockTime - xTickCount;
2166:./FreeRTOS/tasks.c ****         }
2167:./FreeRTOS/tasks.c **** 
2168:./FreeRTOS/tasks.c ****         return xReturn;
2169:./FreeRTOS/tasks.c ****     }
2170:./FreeRTOS/tasks.c **** 
2171:./FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:./FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2173:./FreeRTOS/tasks.c **** 
2174:./FreeRTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2175:./FreeRTOS/tasks.c **** {
2176:./FreeRTOS/tasks.c ****     TCB_t * pxTCB = NULL;
2177:./FreeRTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
2178:./FreeRTOS/tasks.c **** 
2179:./FreeRTOS/tasks.c ****     /* If uxSchedulerSuspended is zero then this function does not match a
2180:./FreeRTOS/tasks.c ****      * previous call to vTaskSuspendAll(). */
2181:./FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended );
2182:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 41


2183:./FreeRTOS/tasks.c ****     /* It is possible that an ISR caused a task to be removed from an event
2184:./FreeRTOS/tasks.c ****      * list while the scheduler was suspended.  If this was the case then the
2185:./FreeRTOS/tasks.c ****      * removed task will have been added to the xPendingReadyList.  Once the
2186:./FreeRTOS/tasks.c ****      * scheduler has been resumed it is safe to move all the pending ready
2187:./FreeRTOS/tasks.c ****      * tasks from this list into their appropriate ready list. */
2188:./FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
2189:./FreeRTOS/tasks.c ****     {
2190:./FreeRTOS/tasks.c ****         --uxSchedulerSuspended;
2191:./FreeRTOS/tasks.c **** 
2192:./FreeRTOS/tasks.c ****         if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2193:./FreeRTOS/tasks.c ****         {
2194:./FreeRTOS/tasks.c ****             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2195:./FreeRTOS/tasks.c ****             {
2196:./FreeRTOS/tasks.c ****                 /* Move any readied tasks from the pending list into the
2197:./FreeRTOS/tasks.c ****                  * appropriate ready list. */
2198:./FreeRTOS/tasks.c ****                 while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2199:./FreeRTOS/tasks.c ****                 {
2200:./FreeRTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 vo
2201:./FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
2202:./FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
2203:./FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
2204:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2205:./FreeRTOS/tasks.c **** 
2206:./FreeRTOS/tasks.c ****                     /* If the moved task has a priority higher than or equal to
2207:./FreeRTOS/tasks.c ****                      * the current task then a yield must be performed. */
2208:./FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2209:./FreeRTOS/tasks.c ****                     {
2210:./FreeRTOS/tasks.c ****                         xYieldPending = pdTRUE;
2211:./FreeRTOS/tasks.c ****                     }
2212:./FreeRTOS/tasks.c ****                     else
2213:./FreeRTOS/tasks.c ****                     {
2214:./FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2215:./FreeRTOS/tasks.c ****                     }
2216:./FreeRTOS/tasks.c ****                 }
2217:./FreeRTOS/tasks.c **** 
2218:./FreeRTOS/tasks.c ****                 if( pxTCB != NULL )
2219:./FreeRTOS/tasks.c ****                 {
2220:./FreeRTOS/tasks.c ****                     /* A task was unblocked while the scheduler was suspended,
2221:./FreeRTOS/tasks.c ****                      * which may have prevented the next unblock time from being
2222:./FreeRTOS/tasks.c ****                      * re-calculated, in which case re-calculate it now.  Mainly
2223:./FreeRTOS/tasks.c ****                      * important for low power tickless implementations, where
2224:./FreeRTOS/tasks.c ****                      * this can prevent an unnecessary exit from low power
2225:./FreeRTOS/tasks.c ****                      * state. */
2226:./FreeRTOS/tasks.c ****                     prvResetNextTaskUnblockTime();
2227:./FreeRTOS/tasks.c ****                 }
2228:./FreeRTOS/tasks.c **** 
2229:./FreeRTOS/tasks.c ****                 /* If any ticks occurred while the scheduler was suspended then
2230:./FreeRTOS/tasks.c ****                  * they should be processed now.  This ensures the tick count does
2231:./FreeRTOS/tasks.c ****                  * not  slip, and that any delayed tasks are resumed at the correct
2232:./FreeRTOS/tasks.c ****                  * time. */
2233:./FreeRTOS/tasks.c ****                 {
2234:./FreeRTOS/tasks.c ****                     TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2235:./FreeRTOS/tasks.c **** 
2236:./FreeRTOS/tasks.c ****                     if( xPendedCounts > ( TickType_t ) 0U )
2237:./FreeRTOS/tasks.c ****                     {
2238:./FreeRTOS/tasks.c ****                         do
2239:./FreeRTOS/tasks.c ****                         {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 42


2240:./FreeRTOS/tasks.c ****                             if( xTaskIncrementTick() != pdFALSE )
2241:./FreeRTOS/tasks.c ****                             {
2242:./FreeRTOS/tasks.c ****                                 xYieldPending = pdTRUE;
2243:./FreeRTOS/tasks.c ****                             }
2244:./FreeRTOS/tasks.c ****                             else
2245:./FreeRTOS/tasks.c ****                             {
2246:./FreeRTOS/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2247:./FreeRTOS/tasks.c ****                             }
2248:./FreeRTOS/tasks.c **** 
2249:./FreeRTOS/tasks.c ****                             --xPendedCounts;
2250:./FreeRTOS/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
2251:./FreeRTOS/tasks.c **** 
2252:./FreeRTOS/tasks.c ****                         xPendedTicks = 0;
2253:./FreeRTOS/tasks.c ****                     }
2254:./FreeRTOS/tasks.c ****                     else
2255:./FreeRTOS/tasks.c ****                     {
2256:./FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2257:./FreeRTOS/tasks.c ****                     }
2258:./FreeRTOS/tasks.c ****                 }
2259:./FreeRTOS/tasks.c **** 
2260:./FreeRTOS/tasks.c ****                 if( xYieldPending != pdFALSE )
2261:./FreeRTOS/tasks.c ****                 {
2262:./FreeRTOS/tasks.c ****                     #if ( configUSE_PREEMPTION != 0 )
2263:./FreeRTOS/tasks.c ****                     {
2264:./FreeRTOS/tasks.c ****                         xAlreadyYielded = pdTRUE;
2265:./FreeRTOS/tasks.c ****                     }
2266:./FreeRTOS/tasks.c ****                     #endif
2267:./FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
2268:./FreeRTOS/tasks.c ****                 }
2269:./FreeRTOS/tasks.c ****                 else
2270:./FreeRTOS/tasks.c ****                 {
2271:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2272:./FreeRTOS/tasks.c ****                 }
2273:./FreeRTOS/tasks.c ****             }
2274:./FreeRTOS/tasks.c ****         }
2275:./FreeRTOS/tasks.c ****         else
2276:./FreeRTOS/tasks.c ****         {
2277:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2278:./FreeRTOS/tasks.c ****         }
2279:./FreeRTOS/tasks.c ****     }
2280:./FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
2281:./FreeRTOS/tasks.c **** 
2282:./FreeRTOS/tasks.c ****     return xAlreadyYielded;
2283:./FreeRTOS/tasks.c **** }
2284:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2285:./FreeRTOS/tasks.c **** 
2286:./FreeRTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2287:./FreeRTOS/tasks.c **** {
2288:./FreeRTOS/tasks.c ****     TickType_t xTicks;
2289:./FreeRTOS/tasks.c **** 
2290:./FreeRTOS/tasks.c ****     /* Critical section required if running on a 16 bit processor. */
2291:./FreeRTOS/tasks.c ****     portTICK_TYPE_ENTER_CRITICAL();
2292:./FreeRTOS/tasks.c ****     {
2293:./FreeRTOS/tasks.c ****         xTicks = xTickCount;
2294:./FreeRTOS/tasks.c ****     }
2295:./FreeRTOS/tasks.c ****     portTICK_TYPE_EXIT_CRITICAL();
2296:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 43


2297:./FreeRTOS/tasks.c ****     return xTicks;
2298:./FreeRTOS/tasks.c **** }
2299:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2300:./FreeRTOS/tasks.c **** 
2301:./FreeRTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2302:./FreeRTOS/tasks.c **** {
2303:./FreeRTOS/tasks.c ****     TickType_t xReturn;
2304:./FreeRTOS/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
2305:./FreeRTOS/tasks.c **** 
2306:./FreeRTOS/tasks.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2307:./FreeRTOS/tasks.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2308:./FreeRTOS/tasks.c ****      * above the maximum system call priority are kept permanently enabled, even
2309:./FreeRTOS/tasks.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2310:./FreeRTOS/tasks.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2311:./FreeRTOS/tasks.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2312:./FreeRTOS/tasks.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2313:./FreeRTOS/tasks.c ****      * assigned a priority above the configured maximum system call priority.
2314:./FreeRTOS/tasks.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2315:./FreeRTOS/tasks.c ****      * that have been assigned a priority at or (logically) below the maximum
2316:./FreeRTOS/tasks.c ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
2317:./FreeRTOS/tasks.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2318:./FreeRTOS/tasks.c ****      * More information (albeit Cortex-M specific) is provided on the following
2319:./FreeRTOS/tasks.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2320:./FreeRTOS/tasks.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2321:./FreeRTOS/tasks.c **** 
2322:./FreeRTOS/tasks.c ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2323:./FreeRTOS/tasks.c ****     {
2324:./FreeRTOS/tasks.c ****         xReturn = xTickCount;
2325:./FreeRTOS/tasks.c ****     }
2326:./FreeRTOS/tasks.c ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2327:./FreeRTOS/tasks.c **** 
2328:./FreeRTOS/tasks.c ****     return xReturn;
2329:./FreeRTOS/tasks.c **** }
2330:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2331:./FreeRTOS/tasks.c **** 
2332:./FreeRTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2333:./FreeRTOS/tasks.c **** {
2334:./FreeRTOS/tasks.c ****     /* A critical section is not required because the variables are of type
2335:./FreeRTOS/tasks.c ****      * BaseType_t. */
2336:./FreeRTOS/tasks.c ****     return uxCurrentNumberOfTasks;
2337:./FreeRTOS/tasks.c **** }
2338:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2339:./FreeRTOS/tasks.c **** 
2340:./FreeRTOS/tasks.c **** char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed f
2341:./FreeRTOS/tasks.c **** {
2342:./FreeRTOS/tasks.c ****     TCB_t * pxTCB;
2343:./FreeRTOS/tasks.c **** 
2344:./FreeRTOS/tasks.c ****     /* If null is passed in here then the name of the calling task is being
2345:./FreeRTOS/tasks.c ****      * queried. */
2346:./FreeRTOS/tasks.c ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2347:./FreeRTOS/tasks.c ****     configASSERT( pxTCB );
2348:./FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
2349:./FreeRTOS/tasks.c **** }
2350:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2351:./FreeRTOS/tasks.c **** 
2352:./FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2353:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 44


2354:./FreeRTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
2355:./FreeRTOS/tasks.c ****                                                      const char pcNameToQuery[] )
2356:./FreeRTOS/tasks.c ****     {
2357:./FreeRTOS/tasks.c ****         TCB_t * pxNextTCB;
2358:./FreeRTOS/tasks.c ****         TCB_t * pxFirstTCB;
2359:./FreeRTOS/tasks.c ****         TCB_t * pxReturn = NULL;
2360:./FreeRTOS/tasks.c ****         UBaseType_t x;
2361:./FreeRTOS/tasks.c ****         char cNextChar;
2362:./FreeRTOS/tasks.c ****         BaseType_t xBreakLoop;
2363:./FreeRTOS/tasks.c **** 
2364:./FreeRTOS/tasks.c ****         /* This function is called with the scheduler suspended. */
2365:./FreeRTOS/tasks.c **** 
2366:./FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2367:./FreeRTOS/tasks.c ****         {
2368:./FreeRTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
2369:./FreeRTOS/tasks.c **** 
2370:./FreeRTOS/tasks.c ****             do
2371:./FreeRTOS/tasks.c ****             {
2372:./FreeRTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
2373:./FreeRTOS/tasks.c **** 
2374:./FreeRTOS/tasks.c ****                 /* Check each character in the name looking for a match or
2375:./FreeRTOS/tasks.c ****                  * mismatch. */
2376:./FreeRTOS/tasks.c ****                 xBreakLoop = pdFALSE;
2377:./FreeRTOS/tasks.c **** 
2378:./FreeRTOS/tasks.c ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2379:./FreeRTOS/tasks.c ****                 {
2380:./FreeRTOS/tasks.c ****                     cNextChar = pxNextTCB->pcTaskName[ x ];
2381:./FreeRTOS/tasks.c **** 
2382:./FreeRTOS/tasks.c ****                     if( cNextChar != pcNameToQuery[ x ] )
2383:./FreeRTOS/tasks.c ****                     {
2384:./FreeRTOS/tasks.c ****                         /* Characters didn't match. */
2385:./FreeRTOS/tasks.c ****                         xBreakLoop = pdTRUE;
2386:./FreeRTOS/tasks.c ****                     }
2387:./FreeRTOS/tasks.c ****                     else if( cNextChar == ( char ) 0x00 )
2388:./FreeRTOS/tasks.c ****                     {
2389:./FreeRTOS/tasks.c ****                         /* Both strings terminated, a match must have been
2390:./FreeRTOS/tasks.c ****                          * found. */
2391:./FreeRTOS/tasks.c ****                         pxReturn = pxNextTCB;
2392:./FreeRTOS/tasks.c ****                         xBreakLoop = pdTRUE;
2393:./FreeRTOS/tasks.c ****                     }
2394:./FreeRTOS/tasks.c ****                     else
2395:./FreeRTOS/tasks.c ****                     {
2396:./FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2397:./FreeRTOS/tasks.c ****                     }
2398:./FreeRTOS/tasks.c **** 
2399:./FreeRTOS/tasks.c ****                     if( xBreakLoop != pdFALSE )
2400:./FreeRTOS/tasks.c ****                     {
2401:./FreeRTOS/tasks.c ****                         break;
2402:./FreeRTOS/tasks.c ****                     }
2403:./FreeRTOS/tasks.c ****                 }
2404:./FreeRTOS/tasks.c **** 
2405:./FreeRTOS/tasks.c ****                 if( pxReturn != NULL )
2406:./FreeRTOS/tasks.c ****                 {
2407:./FreeRTOS/tasks.c ****                     /* The handle has been found. */
2408:./FreeRTOS/tasks.c ****                     break;
2409:./FreeRTOS/tasks.c ****                 }
2410:./FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 45


2411:./FreeRTOS/tasks.c ****         }
2412:./FreeRTOS/tasks.c ****         else
2413:./FreeRTOS/tasks.c ****         {
2414:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2415:./FreeRTOS/tasks.c ****         }
2416:./FreeRTOS/tasks.c **** 
2417:./FreeRTOS/tasks.c ****         return pxReturn;
2418:./FreeRTOS/tasks.c ****     }
2419:./FreeRTOS/tasks.c **** 
2420:./FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2421:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2422:./FreeRTOS/tasks.c **** 
2423:./FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2424:./FreeRTOS/tasks.c **** 
2425:./FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types a
2426:./FreeRTOS/tasks.c ****     {
2427:./FreeRTOS/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
2428:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2429:./FreeRTOS/tasks.c **** 
2430:./FreeRTOS/tasks.c ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2431:./FreeRTOS/tasks.c ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2432:./FreeRTOS/tasks.c **** 
2433:./FreeRTOS/tasks.c ****         vTaskSuspendAll();
2434:./FreeRTOS/tasks.c ****         {
2435:./FreeRTOS/tasks.c ****             /* Search the ready lists. */
2436:./FreeRTOS/tasks.c ****             do
2437:./FreeRTOS/tasks.c ****             {
2438:./FreeRTOS/tasks.c ****                 uxQueue--;
2439:./FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
2440:./FreeRTOS/tasks.c **** 
2441:./FreeRTOS/tasks.c ****                 if( pxTCB != NULL )
2442:./FreeRTOS/tasks.c ****                 {
2443:./FreeRTOS/tasks.c ****                     /* Found the handle. */
2444:./FreeRTOS/tasks.c ****                     break;
2445:./FreeRTOS/tasks.c ****                 }
2446:./FreeRTOS/tasks.c ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as 
2447:./FreeRTOS/tasks.c **** 
2448:./FreeRTOS/tasks.c ****             /* Search the delayed lists. */
2449:./FreeRTOS/tasks.c ****             if( pxTCB == NULL )
2450:./FreeRTOS/tasks.c ****             {
2451:./FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
2452:./FreeRTOS/tasks.c ****             }
2453:./FreeRTOS/tasks.c **** 
2454:./FreeRTOS/tasks.c ****             if( pxTCB == NULL )
2455:./FreeRTOS/tasks.c ****             {
2456:./FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
2457:./FreeRTOS/tasks.c ****             }
2458:./FreeRTOS/tasks.c **** 
2459:./FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
2460:./FreeRTOS/tasks.c ****             {
2461:./FreeRTOS/tasks.c ****                 if( pxTCB == NULL )
2462:./FreeRTOS/tasks.c ****                 {
2463:./FreeRTOS/tasks.c ****                     /* Search the suspended list. */
2464:./FreeRTOS/tasks.c ****                     pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2465:./FreeRTOS/tasks.c ****                 }
2466:./FreeRTOS/tasks.c ****             }
2467:./FreeRTOS/tasks.c ****             #endif
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 46


2468:./FreeRTOS/tasks.c **** 
2469:./FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
2470:./FreeRTOS/tasks.c ****             {
2471:./FreeRTOS/tasks.c ****                 if( pxTCB == NULL )
2472:./FreeRTOS/tasks.c ****                 {
2473:./FreeRTOS/tasks.c ****                     /* Search the deleted list. */
2474:./FreeRTOS/tasks.c ****                     pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQu
2475:./FreeRTOS/tasks.c ****                 }
2476:./FreeRTOS/tasks.c ****             }
2477:./FreeRTOS/tasks.c ****             #endif
2478:./FreeRTOS/tasks.c ****         }
2479:./FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2480:./FreeRTOS/tasks.c **** 
2481:./FreeRTOS/tasks.c ****         return pxTCB;
2482:./FreeRTOS/tasks.c ****     }
2483:./FreeRTOS/tasks.c **** 
2484:./FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2485:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2486:./FreeRTOS/tasks.c **** 
2487:./FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2488:./FreeRTOS/tasks.c **** 
2489:./FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
2490:./FreeRTOS/tasks.c ****                                       const UBaseType_t uxArraySize,
2491:./FreeRTOS/tasks.c ****                                       configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
2492:./FreeRTOS/tasks.c ****     {
2493:./FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2494:./FreeRTOS/tasks.c **** 
2495:./FreeRTOS/tasks.c ****         vTaskSuspendAll();
2496:./FreeRTOS/tasks.c ****         {
2497:./FreeRTOS/tasks.c ****             /* Is there a space in the array for each task in the system? */
2498:./FreeRTOS/tasks.c ****             if( uxArraySize >= uxCurrentNumberOfTasks )
2499:./FreeRTOS/tasks.c ****             {
2500:./FreeRTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2501:./FreeRTOS/tasks.c ****                  * task in the Ready state. */
2502:./FreeRTOS/tasks.c ****                 do
2503:./FreeRTOS/tasks.c ****                 {
2504:./FreeRTOS/tasks.c ****                     uxQueue--;
2505:./FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
2506:./FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
2507:./FreeRTOS/tasks.c **** 
2508:./FreeRTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2509:./FreeRTOS/tasks.c ****                  * task in the Blocked state. */
2510:./FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2511:./FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2512:./FreeRTOS/tasks.c **** 
2513:./FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskDelete == 1 )
2514:./FreeRTOS/tasks.c ****                 {
2515:./FreeRTOS/tasks.c ****                     /* Fill in an TaskStatus_t structure with information on
2516:./FreeRTOS/tasks.c ****                      * each task that has been deleted but not yet cleaned up. */
2517:./FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTas
2518:./FreeRTOS/tasks.c ****                 }
2519:./FreeRTOS/tasks.c ****                 #endif
2520:./FreeRTOS/tasks.c **** 
2521:./FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
2522:./FreeRTOS/tasks.c ****                 {
2523:./FreeRTOS/tasks.c ****                     /* Fill in an TaskStatus_t structure with information on
2524:./FreeRTOS/tasks.c ****                      * each task in the Suspended state. */
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 47


2525:./FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSus
2526:./FreeRTOS/tasks.c ****                 }
2527:./FreeRTOS/tasks.c ****                 #endif
2528:./FreeRTOS/tasks.c **** 
2529:./FreeRTOS/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
2530:./FreeRTOS/tasks.c ****                 {
2531:./FreeRTOS/tasks.c ****                     if( pulTotalRunTime != NULL )
2532:./FreeRTOS/tasks.c ****                     {
2533:./FreeRTOS/tasks.c ****                         #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2534:./FreeRTOS/tasks.c ****                             portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2535:./FreeRTOS/tasks.c ****                         #else
2536:./FreeRTOS/tasks.c ****                             *pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2537:./FreeRTOS/tasks.c ****                         #endif
2538:./FreeRTOS/tasks.c ****                     }
2539:./FreeRTOS/tasks.c ****                 }
2540:./FreeRTOS/tasks.c ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2541:./FreeRTOS/tasks.c ****                 {
2542:./FreeRTOS/tasks.c ****                     if( pulTotalRunTime != NULL )
2543:./FreeRTOS/tasks.c ****                     {
2544:./FreeRTOS/tasks.c ****                         *pulTotalRunTime = 0;
2545:./FreeRTOS/tasks.c ****                     }
2546:./FreeRTOS/tasks.c ****                 }
2547:./FreeRTOS/tasks.c ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2548:./FreeRTOS/tasks.c ****             }
2549:./FreeRTOS/tasks.c ****             else
2550:./FreeRTOS/tasks.c ****             {
2551:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2552:./FreeRTOS/tasks.c ****             }
2553:./FreeRTOS/tasks.c ****         }
2554:./FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2555:./FreeRTOS/tasks.c **** 
2556:./FreeRTOS/tasks.c ****         return uxTask;
2557:./FreeRTOS/tasks.c ****     }
2558:./FreeRTOS/tasks.c **** 
2559:./FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2560:./FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2561:./FreeRTOS/tasks.c **** 
2562:./FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2563:./FreeRTOS/tasks.c **** 
2564:./FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetIdleTaskHandle( void )
2565:./FreeRTOS/tasks.c ****     {
2566:./FreeRTOS/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2567:./FreeRTOS/tasks.c ****          * started, then xIdleTaskHandle will be NULL. */
2568:./FreeRTOS/tasks.c ****         configASSERT( ( xIdleTaskHandle != NULL ) );
2569:./FreeRTOS/tasks.c ****         return xIdleTaskHandle;
2570:./FreeRTOS/tasks.c ****     }
2571:./FreeRTOS/tasks.c **** 
2572:./FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2573:./FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2574:./FreeRTOS/tasks.c **** 
2575:./FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2576:./FreeRTOS/tasks.c ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
2577:./FreeRTOS/tasks.c ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2578:./FreeRTOS/tasks.c ****  * 1. */
2579:./FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2580:./FreeRTOS/tasks.c **** 
2581:./FreeRTOS/tasks.c ****     void vTaskStepTick( TickType_t xTicksToJump )
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 48


2582:./FreeRTOS/tasks.c ****     {
2583:./FreeRTOS/tasks.c ****         /* Correct the tick count value after a period during which the tick
2584:./FreeRTOS/tasks.c ****          * was suppressed.  Note this does *not* call the tick hook function for
2585:./FreeRTOS/tasks.c ****          * each stepped tick. */
2586:./FreeRTOS/tasks.c ****         configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2587:./FreeRTOS/tasks.c **** 
2588:./FreeRTOS/tasks.c ****         if( ( xTickCount + xTicksToJump ) == xNextTaskUnblockTime )
2589:./FreeRTOS/tasks.c ****         {
2590:./FreeRTOS/tasks.c ****             /* Arrange for xTickCount to reach xNextTaskUnblockTime in
2591:./FreeRTOS/tasks.c ****              * xTaskIncrementTick() when the scheduler resumes.  This ensures
2592:./FreeRTOS/tasks.c ****              * that any delayed tasks are resumed at the correct time. */
2593:./FreeRTOS/tasks.c ****             configASSERT( uxSchedulerSuspended );
2594:./FreeRTOS/tasks.c ****             configASSERT( xTicksToJump != ( TickType_t ) 0 );
2595:./FreeRTOS/tasks.c **** 
2596:./FreeRTOS/tasks.c ****             /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
2597:./FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
2598:./FreeRTOS/tasks.c ****             {
2599:./FreeRTOS/tasks.c ****                 xPendedTicks++;
2600:./FreeRTOS/tasks.c ****             }
2601:./FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
2602:./FreeRTOS/tasks.c ****             xTicksToJump--;
2603:./FreeRTOS/tasks.c ****         }
2604:./FreeRTOS/tasks.c ****         else
2605:./FreeRTOS/tasks.c ****         {
2606:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2607:./FreeRTOS/tasks.c ****         }
2608:./FreeRTOS/tasks.c **** 
2609:./FreeRTOS/tasks.c ****         xTickCount += xTicksToJump;
2610:./FreeRTOS/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
2611:./FreeRTOS/tasks.c ****     }
2612:./FreeRTOS/tasks.c **** 
2613:./FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2614:./FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2615:./FreeRTOS/tasks.c **** 
2616:./FreeRTOS/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2617:./FreeRTOS/tasks.c **** {
2618:./FreeRTOS/tasks.c ****     BaseType_t xYieldOccurred;
2619:./FreeRTOS/tasks.c **** 
2620:./FreeRTOS/tasks.c ****     /* Must not be called with the scheduler suspended as the implementation
2621:./FreeRTOS/tasks.c ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2622:./FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended == 0 );
2623:./FreeRTOS/tasks.c **** 
2624:./FreeRTOS/tasks.c ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2625:./FreeRTOS/tasks.c ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2626:./FreeRTOS/tasks.c ****     vTaskSuspendAll();
2627:./FreeRTOS/tasks.c **** 
2628:./FreeRTOS/tasks.c ****     /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
2629:./FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
2630:./FreeRTOS/tasks.c ****     {
2631:./FreeRTOS/tasks.c ****         xPendedTicks += xTicksToCatchUp;
2632:./FreeRTOS/tasks.c ****     }
2633:./FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
2634:./FreeRTOS/tasks.c ****     xYieldOccurred = xTaskResumeAll();
2635:./FreeRTOS/tasks.c **** 
2636:./FreeRTOS/tasks.c ****     return xYieldOccurred;
2637:./FreeRTOS/tasks.c **** }
2638:./FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 49


2639:./FreeRTOS/tasks.c **** 
2640:./FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2641:./FreeRTOS/tasks.c **** 
2642:./FreeRTOS/tasks.c ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2643:./FreeRTOS/tasks.c ****     {
2644:./FreeRTOS/tasks.c ****         TCB_t * pxTCB = xTask;
2645:./FreeRTOS/tasks.c ****         BaseType_t xReturn;
2646:./FreeRTOS/tasks.c **** 
2647:./FreeRTOS/tasks.c ****         configASSERT( pxTCB );
2648:./FreeRTOS/tasks.c **** 
2649:./FreeRTOS/tasks.c ****         vTaskSuspendAll();
2650:./FreeRTOS/tasks.c ****         {
2651:./FreeRTOS/tasks.c ****             /* A task can only be prematurely removed from the Blocked state if
2652:./FreeRTOS/tasks.c ****              * it is actually in the Blocked state. */
2653:./FreeRTOS/tasks.c ****             if( eTaskGetState( xTask ) == eBlocked )
2654:./FreeRTOS/tasks.c ****             {
2655:./FreeRTOS/tasks.c ****                 xReturn = pdPASS;
2656:./FreeRTOS/tasks.c **** 
2657:./FreeRTOS/tasks.c ****                 /* Remove the reference to the task from the blocked list.  An
2658:./FreeRTOS/tasks.c ****                  * interrupt won't touch the xStateListItem because the
2659:./FreeRTOS/tasks.c ****                  * scheduler is suspended. */
2660:./FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2661:./FreeRTOS/tasks.c **** 
2662:./FreeRTOS/tasks.c ****                 /* Is the task waiting on an event also?  If so remove it from
2663:./FreeRTOS/tasks.c ****                  * the event list too.  Interrupts can touch the event list item,
2664:./FreeRTOS/tasks.c ****                  * even though the scheduler is suspended, so a critical section
2665:./FreeRTOS/tasks.c ****                  * is used. */
2666:./FreeRTOS/tasks.c ****                 taskENTER_CRITICAL();
2667:./FreeRTOS/tasks.c ****                 {
2668:./FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2669:./FreeRTOS/tasks.c ****                     {
2670:./FreeRTOS/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2671:./FreeRTOS/tasks.c **** 
2672:./FreeRTOS/tasks.c ****                         /* This lets the task know it was forcibly removed from the
2673:./FreeRTOS/tasks.c ****                          * blocked state so it should not re-evaluate its block time and
2674:./FreeRTOS/tasks.c ****                          * then block again. */
2675:./FreeRTOS/tasks.c ****                         pxTCB->ucDelayAborted = pdTRUE;
2676:./FreeRTOS/tasks.c ****                     }
2677:./FreeRTOS/tasks.c ****                     else
2678:./FreeRTOS/tasks.c ****                     {
2679:./FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2680:./FreeRTOS/tasks.c ****                     }
2681:./FreeRTOS/tasks.c ****                 }
2682:./FreeRTOS/tasks.c ****                 taskEXIT_CRITICAL();
2683:./FreeRTOS/tasks.c **** 
2684:./FreeRTOS/tasks.c ****                 /* Place the unblocked task into the appropriate ready list. */
2685:./FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
2686:./FreeRTOS/tasks.c **** 
2687:./FreeRTOS/tasks.c ****                 /* A task being unblocked cannot cause an immediate context
2688:./FreeRTOS/tasks.c ****                  * switch if preemption is turned off. */
2689:./FreeRTOS/tasks.c ****                 #if ( configUSE_PREEMPTION == 1 )
2690:./FreeRTOS/tasks.c ****                 {
2691:./FreeRTOS/tasks.c ****                     /* Preemption is on, but a context switch should only be
2692:./FreeRTOS/tasks.c ****                      * performed if the unblocked task has a priority that is
2693:./FreeRTOS/tasks.c ****                      * higher than the currently executing task. */
2694:./FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2695:./FreeRTOS/tasks.c ****                     {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 50


2696:./FreeRTOS/tasks.c ****                         /* Pend the yield to be performed when the scheduler
2697:./FreeRTOS/tasks.c ****                          * is unsuspended. */
2698:./FreeRTOS/tasks.c ****                         xYieldPending = pdTRUE;
2699:./FreeRTOS/tasks.c ****                     }
2700:./FreeRTOS/tasks.c ****                     else
2701:./FreeRTOS/tasks.c ****                     {
2702:./FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2703:./FreeRTOS/tasks.c ****                     }
2704:./FreeRTOS/tasks.c ****                 }
2705:./FreeRTOS/tasks.c ****                 #endif /* configUSE_PREEMPTION */
2706:./FreeRTOS/tasks.c ****             }
2707:./FreeRTOS/tasks.c ****             else
2708:./FreeRTOS/tasks.c ****             {
2709:./FreeRTOS/tasks.c ****                 xReturn = pdFAIL;
2710:./FreeRTOS/tasks.c ****             }
2711:./FreeRTOS/tasks.c ****         }
2712:./FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2713:./FreeRTOS/tasks.c **** 
2714:./FreeRTOS/tasks.c ****         return xReturn;
2715:./FreeRTOS/tasks.c ****     }
2716:./FreeRTOS/tasks.c **** 
2717:./FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2718:./FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2719:./FreeRTOS/tasks.c **** 
2720:./FreeRTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2721:./FreeRTOS/tasks.c **** {
2722:./FreeRTOS/tasks.c ****     TCB_t * pxTCB;
2723:./FreeRTOS/tasks.c ****     TickType_t xItemValue;
2724:./FreeRTOS/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
2725:./FreeRTOS/tasks.c **** 
2726:./FreeRTOS/tasks.c ****     /* Called by the portable layer each time a tick interrupt occurs.
2727:./FreeRTOS/tasks.c ****      * Increments the tick then checks to see if the new tick value will cause any
2728:./FreeRTOS/tasks.c ****      * tasks to be unblocked. */
2729:./FreeRTOS/tasks.c ****     traceTASK_INCREMENT_TICK( xTickCount );
2730:./FreeRTOS/tasks.c **** 
2731:./FreeRTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2732:./FreeRTOS/tasks.c ****     {
2733:./FreeRTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this
2734:./FreeRTOS/tasks.c ****          * block. */
2735:./FreeRTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2736:./FreeRTOS/tasks.c **** 
2737:./FreeRTOS/tasks.c ****         /* Increment the RTOS tick, switching the delayed and overflowed
2738:./FreeRTOS/tasks.c ****          * delayed lists if it wraps to 0. */
2739:./FreeRTOS/tasks.c ****         xTickCount = xConstTickCount;
2740:./FreeRTOS/tasks.c **** 
2741:./FreeRTOS/tasks.c ****         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to fa
2742:./FreeRTOS/tasks.c ****         {
2743:./FreeRTOS/tasks.c ****             taskSWITCH_DELAYED_LISTS();
2744:./FreeRTOS/tasks.c ****         }
2745:./FreeRTOS/tasks.c ****         else
2746:./FreeRTOS/tasks.c ****         {
2747:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2748:./FreeRTOS/tasks.c ****         }
2749:./FreeRTOS/tasks.c **** 
2750:./FreeRTOS/tasks.c ****         /* See if this tick has made a timeout expire.  Tasks are stored in
2751:./FreeRTOS/tasks.c ****          * the  queue in the order of their wake time - meaning once one task
2752:./FreeRTOS/tasks.c ****          * has been found whose block time has not expired there is no need to
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 51


2753:./FreeRTOS/tasks.c ****          * look any further down the list. */
2754:./FreeRTOS/tasks.c ****         if( xConstTickCount >= xNextTaskUnblockTime )
2755:./FreeRTOS/tasks.c ****         {
2756:./FreeRTOS/tasks.c ****             for( ; ; )
2757:./FreeRTOS/tasks.c ****             {
2758:./FreeRTOS/tasks.c ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2759:./FreeRTOS/tasks.c ****                 {
2760:./FreeRTOS/tasks.c ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
2761:./FreeRTOS/tasks.c ****                      * to the maximum possible value so it is extremely
2762:./FreeRTOS/tasks.c ****                      * unlikely that the
2763:./FreeRTOS/tasks.c ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
2764:./FreeRTOS/tasks.c ****                      * next time through. */
2765:./FreeRTOS/tasks.c ****                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts
2766:./FreeRTOS/tasks.c ****                     break;
2767:./FreeRTOS/tasks.c ****                 }
2768:./FreeRTOS/tasks.c ****                 else
2769:./FreeRTOS/tasks.c ****                 {
2770:./FreeRTOS/tasks.c ****                     /* The delayed list is not empty, get the value of the
2771:./FreeRTOS/tasks.c ****                      * item at the head of the delayed list.  This is the time
2772:./FreeRTOS/tasks.c ****                      * at which the task at the head of the delayed list must
2773:./FreeRTOS/tasks.c ****                      * be removed from the Blocked state. */
2774:./FreeRTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * 
2775:./FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2776:./FreeRTOS/tasks.c **** 
2777:./FreeRTOS/tasks.c ****                     if( xConstTickCount < xItemValue )
2778:./FreeRTOS/tasks.c ****                     {
2779:./FreeRTOS/tasks.c ****                         /* It is not time to unblock this item yet, but the
2780:./FreeRTOS/tasks.c ****                          * item value is the time at which the task at the head
2781:./FreeRTOS/tasks.c ****                          * of the blocked list must be removed from the Blocked
2782:./FreeRTOS/tasks.c ****                          * state -  so record the item value in
2783:./FreeRTOS/tasks.c ****                          * xNextTaskUnblockTime. */
2784:./FreeRTOS/tasks.c ****                         xNextTaskUnblockTime = xItemValue;
2785:./FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
2786:./FreeRTOS/tasks.c ****                     }
2787:./FreeRTOS/tasks.c ****                     else
2788:./FreeRTOS/tasks.c ****                     {
2789:./FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2790:./FreeRTOS/tasks.c ****                     }
2791:./FreeRTOS/tasks.c **** 
2792:./FreeRTOS/tasks.c ****                     /* It is time to remove the item from the Blocked state. */
2793:./FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
2794:./FreeRTOS/tasks.c **** 
2795:./FreeRTOS/tasks.c ****                     /* Is the task waiting on an event also?  If so remove
2796:./FreeRTOS/tasks.c ****                      * it from the event list. */
2797:./FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2798:./FreeRTOS/tasks.c ****                     {
2799:./FreeRTOS/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
2800:./FreeRTOS/tasks.c ****                     }
2801:./FreeRTOS/tasks.c ****                     else
2802:./FreeRTOS/tasks.c ****                     {
2803:./FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2804:./FreeRTOS/tasks.c ****                     }
2805:./FreeRTOS/tasks.c **** 
2806:./FreeRTOS/tasks.c ****                     /* Place the unblocked task into the appropriate ready
2807:./FreeRTOS/tasks.c ****                      * list. */
2808:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2809:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 52


2810:./FreeRTOS/tasks.c ****                     /* A task being unblocked cannot cause an immediate
2811:./FreeRTOS/tasks.c ****                      * context switch if preemption is turned off. */
2812:./FreeRTOS/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
2813:./FreeRTOS/tasks.c ****                     {
2814:./FreeRTOS/tasks.c ****                         /* Preemption is on, but a context switch should
2815:./FreeRTOS/tasks.c ****                          * only be performed if the unblocked task's
2816:./FreeRTOS/tasks.c ****                          * priority is higher than the currently executing
2817:./FreeRTOS/tasks.c ****                          * task.
2818:./FreeRTOS/tasks.c ****                          * The case of equal priority tasks sharing
2819:./FreeRTOS/tasks.c ****                          * processing time (which happens when both
2820:./FreeRTOS/tasks.c ****                          * preemption and time slicing are on) is
2821:./FreeRTOS/tasks.c ****                          * handled below.*/
2822:./FreeRTOS/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2823:./FreeRTOS/tasks.c ****                         {
2824:./FreeRTOS/tasks.c ****                             xSwitchRequired = pdTRUE;
2825:./FreeRTOS/tasks.c ****                         }
2826:./FreeRTOS/tasks.c ****                         else
2827:./FreeRTOS/tasks.c ****                         {
2828:./FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
2829:./FreeRTOS/tasks.c ****                         }
2830:./FreeRTOS/tasks.c ****                     }
2831:./FreeRTOS/tasks.c ****                     #endif /* configUSE_PREEMPTION */
2832:./FreeRTOS/tasks.c ****                 }
2833:./FreeRTOS/tasks.c ****             }
2834:./FreeRTOS/tasks.c ****         }
2835:./FreeRTOS/tasks.c **** 
2836:./FreeRTOS/tasks.c ****         /* Tasks of equal priority to the currently running task will share
2837:./FreeRTOS/tasks.c ****          * processing time (time slice) if preemption is on, and the application
2838:./FreeRTOS/tasks.c ****          * writer has not explicitly turned time slicing off. */
2839:./FreeRTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2840:./FreeRTOS/tasks.c ****         {
2841:./FreeRTOS/tasks.c ****             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( U
2842:./FreeRTOS/tasks.c ****             {
2843:./FreeRTOS/tasks.c ****                 xSwitchRequired = pdTRUE;
2844:./FreeRTOS/tasks.c ****             }
2845:./FreeRTOS/tasks.c ****             else
2846:./FreeRTOS/tasks.c ****             {
2847:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2848:./FreeRTOS/tasks.c ****             }
2849:./FreeRTOS/tasks.c ****         }
2850:./FreeRTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2851:./FreeRTOS/tasks.c **** 
2852:./FreeRTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2853:./FreeRTOS/tasks.c ****         {
2854:./FreeRTOS/tasks.c ****             /* Guard against the tick hook being called when the pended tick
2855:./FreeRTOS/tasks.c ****              * count is being unwound (when the scheduler is being unlocked). */
2856:./FreeRTOS/tasks.c ****             if( xPendedTicks == ( TickType_t ) 0 )
2857:./FreeRTOS/tasks.c ****             {
2858:./FreeRTOS/tasks.c ****                 vApplicationTickHook();
2859:./FreeRTOS/tasks.c ****             }
2860:./FreeRTOS/tasks.c ****             else
2861:./FreeRTOS/tasks.c ****             {
2862:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2863:./FreeRTOS/tasks.c ****             }
2864:./FreeRTOS/tasks.c ****         }
2865:./FreeRTOS/tasks.c ****         #endif /* configUSE_TICK_HOOK */
2866:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 53


2867:./FreeRTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
2868:./FreeRTOS/tasks.c ****         {
2869:./FreeRTOS/tasks.c ****             if( xYieldPending != pdFALSE )
2870:./FreeRTOS/tasks.c ****             {
2871:./FreeRTOS/tasks.c ****                 xSwitchRequired = pdTRUE;
2872:./FreeRTOS/tasks.c ****             }
2873:./FreeRTOS/tasks.c ****             else
2874:./FreeRTOS/tasks.c ****             {
2875:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2876:./FreeRTOS/tasks.c ****             }
2877:./FreeRTOS/tasks.c ****         }
2878:./FreeRTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
2879:./FreeRTOS/tasks.c ****     }
2880:./FreeRTOS/tasks.c ****     else
2881:./FreeRTOS/tasks.c ****     {
2882:./FreeRTOS/tasks.c ****         ++xPendedTicks;
2883:./FreeRTOS/tasks.c **** 
2884:./FreeRTOS/tasks.c ****         /* The tick hook gets called at regular intervals, even if the
2885:./FreeRTOS/tasks.c ****          * scheduler is locked. */
2886:./FreeRTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2887:./FreeRTOS/tasks.c ****         {
2888:./FreeRTOS/tasks.c ****             vApplicationTickHook();
2889:./FreeRTOS/tasks.c ****         }
2890:./FreeRTOS/tasks.c ****         #endif
2891:./FreeRTOS/tasks.c ****     }
2892:./FreeRTOS/tasks.c **** 
2893:./FreeRTOS/tasks.c ****     return xSwitchRequired;
2894:./FreeRTOS/tasks.c **** }
2895:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2896:./FreeRTOS/tasks.c **** 
2897:./FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2898:./FreeRTOS/tasks.c **** 
2899:./FreeRTOS/tasks.c ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
2900:./FreeRTOS/tasks.c ****                                      TaskHookFunction_t pxHookFunction )
2901:./FreeRTOS/tasks.c ****     {
2902:./FreeRTOS/tasks.c ****         TCB_t * xTCB;
2903:./FreeRTOS/tasks.c **** 
2904:./FreeRTOS/tasks.c ****         /* If xTask is NULL then it is the task hook of the calling task that is
2905:./FreeRTOS/tasks.c ****          * getting set. */
2906:./FreeRTOS/tasks.c ****         if( xTask == NULL )
2907:./FreeRTOS/tasks.c ****         {
2908:./FreeRTOS/tasks.c ****             xTCB = ( TCB_t * ) pxCurrentTCB;
2909:./FreeRTOS/tasks.c ****         }
2910:./FreeRTOS/tasks.c ****         else
2911:./FreeRTOS/tasks.c ****         {
2912:./FreeRTOS/tasks.c ****             xTCB = xTask;
2913:./FreeRTOS/tasks.c ****         }
2914:./FreeRTOS/tasks.c **** 
2915:./FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2916:./FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2917:./FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
2918:./FreeRTOS/tasks.c ****         {
2919:./FreeRTOS/tasks.c ****             xTCB->pxTaskTag = pxHookFunction;
2920:./FreeRTOS/tasks.c ****         }
2921:./FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
2922:./FreeRTOS/tasks.c ****     }
2923:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 54


2924:./FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2925:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2926:./FreeRTOS/tasks.c **** 
2927:./FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2928:./FreeRTOS/tasks.c **** 
2929:./FreeRTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2930:./FreeRTOS/tasks.c ****     {
2931:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2932:./FreeRTOS/tasks.c ****         TaskHookFunction_t xReturn;
2933:./FreeRTOS/tasks.c **** 
2934:./FreeRTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2935:./FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2936:./FreeRTOS/tasks.c **** 
2937:./FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2938:./FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2939:./FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
2940:./FreeRTOS/tasks.c ****         {
2941:./FreeRTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2942:./FreeRTOS/tasks.c ****         }
2943:./FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
2944:./FreeRTOS/tasks.c **** 
2945:./FreeRTOS/tasks.c ****         return xReturn;
2946:./FreeRTOS/tasks.c ****     }
2947:./FreeRTOS/tasks.c **** 
2948:./FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2949:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2950:./FreeRTOS/tasks.c **** 
2951:./FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2952:./FreeRTOS/tasks.c **** 
2953:./FreeRTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2954:./FreeRTOS/tasks.c ****     {
2955:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2956:./FreeRTOS/tasks.c ****         TaskHookFunction_t xReturn;
2957:./FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
2958:./FreeRTOS/tasks.c **** 
2959:./FreeRTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2960:./FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2961:./FreeRTOS/tasks.c **** 
2962:./FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2963:./FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2964:./FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2965:./FreeRTOS/tasks.c ****         {
2966:./FreeRTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2967:./FreeRTOS/tasks.c ****         }
2968:./FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2969:./FreeRTOS/tasks.c **** 
2970:./FreeRTOS/tasks.c ****         return xReturn;
2971:./FreeRTOS/tasks.c ****     }
2972:./FreeRTOS/tasks.c **** 
2973:./FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2974:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2975:./FreeRTOS/tasks.c **** 
2976:./FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2977:./FreeRTOS/tasks.c **** 
2978:./FreeRTOS/tasks.c ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
2979:./FreeRTOS/tasks.c ****                                              void * pvParameter )
2980:./FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 55


2981:./FreeRTOS/tasks.c ****         TCB_t * xTCB;
2982:./FreeRTOS/tasks.c ****         BaseType_t xReturn;
2983:./FreeRTOS/tasks.c **** 
2984:./FreeRTOS/tasks.c ****         /* If xTask is NULL then we are calling our own task hook. */
2985:./FreeRTOS/tasks.c ****         if( xTask == NULL )
2986:./FreeRTOS/tasks.c ****         {
2987:./FreeRTOS/tasks.c ****             xTCB = pxCurrentTCB;
2988:./FreeRTOS/tasks.c ****         }
2989:./FreeRTOS/tasks.c ****         else
2990:./FreeRTOS/tasks.c ****         {
2991:./FreeRTOS/tasks.c ****             xTCB = xTask;
2992:./FreeRTOS/tasks.c ****         }
2993:./FreeRTOS/tasks.c **** 
2994:./FreeRTOS/tasks.c ****         if( xTCB->pxTaskTag != NULL )
2995:./FreeRTOS/tasks.c ****         {
2996:./FreeRTOS/tasks.c ****             xReturn = xTCB->pxTaskTag( pvParameter );
2997:./FreeRTOS/tasks.c ****         }
2998:./FreeRTOS/tasks.c ****         else
2999:./FreeRTOS/tasks.c ****         {
3000:./FreeRTOS/tasks.c ****             xReturn = pdFAIL;
3001:./FreeRTOS/tasks.c ****         }
3002:./FreeRTOS/tasks.c **** 
3003:./FreeRTOS/tasks.c ****         return xReturn;
3004:./FreeRTOS/tasks.c ****     }
3005:./FreeRTOS/tasks.c **** 
3006:./FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
3007:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3008:./FreeRTOS/tasks.c **** 
3009:./FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
3010:./FreeRTOS/tasks.c **** {
3011:./FreeRTOS/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
3012:./FreeRTOS/tasks.c ****     {
3013:./FreeRTOS/tasks.c ****         /* The scheduler is currently suspended - do not allow a context
3014:./FreeRTOS/tasks.c ****          * switch. */
3015:./FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
3016:./FreeRTOS/tasks.c ****     }
3017:./FreeRTOS/tasks.c ****     else
3018:./FreeRTOS/tasks.c ****     {
3019:./FreeRTOS/tasks.c ****         xYieldPending = pdFALSE;
3020:./FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
3021:./FreeRTOS/tasks.c **** 
3022:./FreeRTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3023:./FreeRTOS/tasks.c ****         {
3024:./FreeRTOS/tasks.c ****             #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3025:./FreeRTOS/tasks.c ****                 portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3026:./FreeRTOS/tasks.c ****             #else
3027:./FreeRTOS/tasks.c ****                 ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3028:./FreeRTOS/tasks.c ****             #endif
3029:./FreeRTOS/tasks.c **** 
3030:./FreeRTOS/tasks.c ****             /* Add the amount of time the task has been running to the
3031:./FreeRTOS/tasks.c ****              * accumulated time so far.  The time the task started running was
3032:./FreeRTOS/tasks.c ****              * stored in ulTaskSwitchedInTime.  Note that there is no overflow
3033:./FreeRTOS/tasks.c ****              * protection here so count values are only valid until the timer
3034:./FreeRTOS/tasks.c ****              * overflows.  The guard against negative values is to protect
3035:./FreeRTOS/tasks.c ****              * against suspect run time stat counter implementations - which
3036:./FreeRTOS/tasks.c ****              * are provided by the application, not the kernel. */
3037:./FreeRTOS/tasks.c ****             if( ulTotalRunTime > ulTaskSwitchedInTime )
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 56


3038:./FreeRTOS/tasks.c ****             {
3039:./FreeRTOS/tasks.c ****                 pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3040:./FreeRTOS/tasks.c ****             }
3041:./FreeRTOS/tasks.c ****             else
3042:./FreeRTOS/tasks.c ****             {
3043:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3044:./FreeRTOS/tasks.c ****             }
3045:./FreeRTOS/tasks.c **** 
3046:./FreeRTOS/tasks.c ****             ulTaskSwitchedInTime = ulTotalRunTime;
3047:./FreeRTOS/tasks.c ****         }
3048:./FreeRTOS/tasks.c ****         #endif /* configGENERATE_RUN_TIME_STATS */
3049:./FreeRTOS/tasks.c **** 
3050:./FreeRTOS/tasks.c ****         /* Check for stack overflow, if configured. */
3051:./FreeRTOS/tasks.c ****         taskCHECK_FOR_STACK_OVERFLOW();
3052:./FreeRTOS/tasks.c **** 
3053:./FreeRTOS/tasks.c ****         /* Before the currently running task is switched out, save its errno. */
3054:./FreeRTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3055:./FreeRTOS/tasks.c ****         {
3056:./FreeRTOS/tasks.c ****             pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3057:./FreeRTOS/tasks.c ****         }
3058:./FreeRTOS/tasks.c ****         #endif
3059:./FreeRTOS/tasks.c **** 
3060:./FreeRTOS/tasks.c ****         /* Select a new task to run using either the generic C or port
3061:./FreeRTOS/tasks.c ****          * optimised asm code. */
3062:./FreeRTOS/tasks.c ****         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with
3063:./FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
3064:./FreeRTOS/tasks.c **** 
3065:./FreeRTOS/tasks.c ****         /* After the new task is switched in, update the global errno. */
3066:./FreeRTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3067:./FreeRTOS/tasks.c ****         {
3068:./FreeRTOS/tasks.c ****             FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3069:./FreeRTOS/tasks.c ****         }
3070:./FreeRTOS/tasks.c ****         #endif
3071:./FreeRTOS/tasks.c **** 
3072:./FreeRTOS/tasks.c ****         #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
3073:./FreeRTOS/tasks.c ****         {
3074:./FreeRTOS/tasks.c ****             /* Switch C-Runtime's TLS Block to point to the TLS
3075:./FreeRTOS/tasks.c ****              * Block specific to this task. */
3076:./FreeRTOS/tasks.c ****             configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
3077:./FreeRTOS/tasks.c ****         }
3078:./FreeRTOS/tasks.c ****         #endif
3079:./FreeRTOS/tasks.c ****     }
3080:./FreeRTOS/tasks.c **** }
3081:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3082:./FreeRTOS/tasks.c **** 
3083:./FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList,
3084:./FreeRTOS/tasks.c ****                             const TickType_t xTicksToWait )
3085:./FreeRTOS/tasks.c **** {
3086:./FreeRTOS/tasks.c ****     configASSERT( pxEventList );
3087:./FreeRTOS/tasks.c **** 
3088:./FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3089:./FreeRTOS/tasks.c ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3090:./FreeRTOS/tasks.c **** 
3091:./FreeRTOS/tasks.c ****     /* Place the event list item of the TCB in the appropriate event list.
3092:./FreeRTOS/tasks.c ****      * This is placed in the list in priority order so the highest priority task
3093:./FreeRTOS/tasks.c ****      * is the first to be woken by the event.
3094:./FreeRTOS/tasks.c ****      *
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 57


3095:./FreeRTOS/tasks.c ****      * Note: Lists are sorted in ascending order by ListItem_t.xItemValue.
3096:./FreeRTOS/tasks.c ****      * Normally, the xItemValue of a TCB's ListItem_t members is:
3097:./FreeRTOS/tasks.c ****      *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
3098:./FreeRTOS/tasks.c ****      * Therefore, the event list is sorted in descending priority order.
3099:./FreeRTOS/tasks.c ****      *
3100:./FreeRTOS/tasks.c ****      * The queue that contains the event list is locked, preventing
3101:./FreeRTOS/tasks.c ****      * simultaneous access from interrupts. */
3102:./FreeRTOS/tasks.c ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3103:./FreeRTOS/tasks.c **** 
3104:./FreeRTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3105:./FreeRTOS/tasks.c **** }
3106:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3107:./FreeRTOS/tasks.c **** 
3108:./FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
3109:./FreeRTOS/tasks.c ****                                      const TickType_t xItemValue,
3110:./FreeRTOS/tasks.c ****                                      const TickType_t xTicksToWait )
3111:./FreeRTOS/tasks.c **** {
3112:./FreeRTOS/tasks.c ****     configASSERT( pxEventList );
3113:./FreeRTOS/tasks.c **** 
3114:./FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3115:./FreeRTOS/tasks.c ****      * the event groups implementation. */
3116:./FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != 0 );
3117:./FreeRTOS/tasks.c **** 
3118:./FreeRTOS/tasks.c ****     /* Store the item value in the event list item.  It is safe to access the
3119:./FreeRTOS/tasks.c ****      * event list item here as interrupts won't access the event list item of a
3120:./FreeRTOS/tasks.c ****      * task that is not in the Blocked state. */
3121:./FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
3122:./FreeRTOS/tasks.c **** 
3123:./FreeRTOS/tasks.c ****     /* Place the event list item of the TCB at the end of the appropriate event
3124:./FreeRTOS/tasks.c ****      * list.  It is safe to access the event list here because it is part of an
3125:./FreeRTOS/tasks.c ****      * event group implementation - and interrupts don't access event groups
3126:./FreeRTOS/tasks.c ****      * directly (instead they access them indirectly by pending function calls to
3127:./FreeRTOS/tasks.c ****      * the task level). */
3128:./FreeRTOS/tasks.c ****     listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3129:./FreeRTOS/tasks.c **** 
3130:./FreeRTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3131:./FreeRTOS/tasks.c **** }
3132:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3133:./FreeRTOS/tasks.c **** 
3134:./FreeRTOS/tasks.c **** #if ( configUSE_TIMERS == 1 )
3135:./FreeRTOS/tasks.c **** 
3136:./FreeRTOS/tasks.c ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
3137:./FreeRTOS/tasks.c ****                                           TickType_t xTicksToWait,
3138:./FreeRTOS/tasks.c ****                                           const BaseType_t xWaitIndefinitely )
3139:./FreeRTOS/tasks.c ****     {
3140:./FreeRTOS/tasks.c ****         configASSERT( pxEventList );
3141:./FreeRTOS/tasks.c **** 
3142:./FreeRTOS/tasks.c ****         /* This function should not be called by application code hence the
3143:./FreeRTOS/tasks.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3144:./FreeRTOS/tasks.c ****          * designed for use by kernel code, and has special calling requirements -
3145:./FreeRTOS/tasks.c ****          * it should be called with the scheduler suspended. */
3146:./FreeRTOS/tasks.c **** 
3147:./FreeRTOS/tasks.c **** 
3148:./FreeRTOS/tasks.c ****         /* Place the event list item of the TCB in the appropriate event list.
3149:./FreeRTOS/tasks.c ****          * In this case it is assume that this is the only task that is going to
3150:./FreeRTOS/tasks.c ****          * be waiting on this event list, so the faster vListInsertEnd() function
3151:./FreeRTOS/tasks.c ****          * can be used in place of vListInsert. */
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 58


3152:./FreeRTOS/tasks.c ****         listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3153:./FreeRTOS/tasks.c **** 
3154:./FreeRTOS/tasks.c ****         /* If the task should block indefinitely then set the block time to a
3155:./FreeRTOS/tasks.c ****          * value that will be recognised as an indefinite delay inside the
3156:./FreeRTOS/tasks.c ****          * prvAddCurrentTaskToDelayedList() function. */
3157:./FreeRTOS/tasks.c ****         if( xWaitIndefinitely != pdFALSE )
3158:./FreeRTOS/tasks.c ****         {
3159:./FreeRTOS/tasks.c ****             xTicksToWait = portMAX_DELAY;
3160:./FreeRTOS/tasks.c ****         }
3161:./FreeRTOS/tasks.c **** 
3162:./FreeRTOS/tasks.c ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3163:./FreeRTOS/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3164:./FreeRTOS/tasks.c ****     }
3165:./FreeRTOS/tasks.c **** 
3166:./FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
3167:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3168:./FreeRTOS/tasks.c **** 
3169:./FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3170:./FreeRTOS/tasks.c **** {
3171:./FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3172:./FreeRTOS/tasks.c ****     BaseType_t xReturn;
3173:./FreeRTOS/tasks.c **** 
3174:./FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3175:./FreeRTOS/tasks.c ****      * called from a critical section within an ISR. */
3176:./FreeRTOS/tasks.c **** 
3177:./FreeRTOS/tasks.c ****     /* The event list is sorted in priority order, so the first in the list can
3178:./FreeRTOS/tasks.c ****      * be removed as it is known to be the highest priority.  Remove the TCB from
3179:./FreeRTOS/tasks.c ****      * the delayed list, and add it to the ready list.
3180:./FreeRTOS/tasks.c ****      *
3181:./FreeRTOS/tasks.c ****      * If an event is for a queue that is locked then this function will never
3182:./FreeRTOS/tasks.c ****      * get called - the lock count on the queue will get modified instead.  This
3183:./FreeRTOS/tasks.c ****      * means exclusive access to the event list is guaranteed here.
3184:./FreeRTOS/tasks.c ****      *
3185:./FreeRTOS/tasks.c ****      * This function assumes that a check has already been made to ensure that
3186:./FreeRTOS/tasks.c ****      * pxEventList is not empty. */
3187:./FreeRTOS/tasks.c ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as th
3188:./FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
3189:./FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
3190:./FreeRTOS/tasks.c **** 
3191:./FreeRTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3192:./FreeRTOS/tasks.c ****     {
3193:./FreeRTOS/tasks.c ****         listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
3194:./FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
3195:./FreeRTOS/tasks.c **** 
3196:./FreeRTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3197:./FreeRTOS/tasks.c ****         {
3198:./FreeRTOS/tasks.c ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3199:./FreeRTOS/tasks.c ****              * might be set to the blocked task's time out time.  If the task is
3200:./FreeRTOS/tasks.c ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3201:./FreeRTOS/tasks.c ****              * normally left unchanged, because it is automatically reset to a new
3202:./FreeRTOS/tasks.c ****              * value when the tick count equals xNextTaskUnblockTime.  However if
3203:./FreeRTOS/tasks.c ****              * tickless idling is used it might be more important to enter sleep mode
3204:./FreeRTOS/tasks.c ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
3205:./FreeRTOS/tasks.c ****              * ensure it is updated at the earliest possible time. */
3206:./FreeRTOS/tasks.c ****             prvResetNextTaskUnblockTime();
3207:./FreeRTOS/tasks.c ****         }
3208:./FreeRTOS/tasks.c ****         #endif
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 59


3209:./FreeRTOS/tasks.c ****     }
3210:./FreeRTOS/tasks.c ****     else
3211:./FreeRTOS/tasks.c ****     {
3212:./FreeRTOS/tasks.c ****         /* The delayed and ready lists cannot be accessed, so hold this task
3213:./FreeRTOS/tasks.c ****          * pending until the scheduler is resumed. */
3214:./FreeRTOS/tasks.c ****         listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3215:./FreeRTOS/tasks.c ****     }
3216:./FreeRTOS/tasks.c **** 
3217:./FreeRTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3218:./FreeRTOS/tasks.c ****     {
3219:./FreeRTOS/tasks.c ****         /* Return true if the task removed from the event list has a higher
3220:./FreeRTOS/tasks.c ****          * priority than the calling task.  This allows the calling task to know if
3221:./FreeRTOS/tasks.c ****          * it should force a context switch now. */
3222:./FreeRTOS/tasks.c ****         xReturn = pdTRUE;
3223:./FreeRTOS/tasks.c **** 
3224:./FreeRTOS/tasks.c ****         /* Mark that a yield is pending in case the user is not using the
3225:./FreeRTOS/tasks.c ****          * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3226:./FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
3227:./FreeRTOS/tasks.c ****     }
3228:./FreeRTOS/tasks.c ****     else
3229:./FreeRTOS/tasks.c ****     {
3230:./FreeRTOS/tasks.c ****         xReturn = pdFALSE;
3231:./FreeRTOS/tasks.c ****     }
3232:./FreeRTOS/tasks.c **** 
3233:./FreeRTOS/tasks.c ****     return xReturn;
3234:./FreeRTOS/tasks.c **** }
3235:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3236:./FreeRTOS/tasks.c **** 
3237:./FreeRTOS/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
3238:./FreeRTOS/tasks.c ****                                         const TickType_t xItemValue )
3239:./FreeRTOS/tasks.c **** {
3240:./FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3241:./FreeRTOS/tasks.c **** 
3242:./FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3243:./FreeRTOS/tasks.c ****      * the event flags implementation. */
3244:./FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != pdFALSE );
3245:./FreeRTOS/tasks.c **** 
3246:./FreeRTOS/tasks.c ****     /* Store the new item value in the event list. */
3247:./FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3248:./FreeRTOS/tasks.c **** 
3249:./FreeRTOS/tasks.c ****     /* Remove the event list form the event flag.  Interrupts do not access
3250:./FreeRTOS/tasks.c ****      * event flags. */
3251:./FreeRTOS/tasks.c ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as th
3252:./FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
3253:./FreeRTOS/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
3254:./FreeRTOS/tasks.c **** 
3255:./FreeRTOS/tasks.c ****     #if ( configUSE_TICKLESS_IDLE != 0 )
3256:./FreeRTOS/tasks.c ****     {
3257:./FreeRTOS/tasks.c ****         /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3258:./FreeRTOS/tasks.c ****          * might be set to the blocked task's time out time.  If the task is
3259:./FreeRTOS/tasks.c ****          * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3260:./FreeRTOS/tasks.c ****          * normally left unchanged, because it is automatically reset to a new
3261:./FreeRTOS/tasks.c ****          * value when the tick count equals xNextTaskUnblockTime.  However if
3262:./FreeRTOS/tasks.c ****          * tickless idling is used it might be more important to enter sleep mode
3263:./FreeRTOS/tasks.c ****          * at the earliest possible time - so reset xNextTaskUnblockTime here to
3264:./FreeRTOS/tasks.c ****          * ensure it is updated at the earliest possible time. */
3265:./FreeRTOS/tasks.c ****         prvResetNextTaskUnblockTime();
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 60


3266:./FreeRTOS/tasks.c ****     }
3267:./FreeRTOS/tasks.c ****     #endif
3268:./FreeRTOS/tasks.c **** 
3269:./FreeRTOS/tasks.c ****     /* Remove the task from the delayed list and add it to the ready list.  The
3270:./FreeRTOS/tasks.c ****      * scheduler is suspended so interrupts will not be accessing the ready
3271:./FreeRTOS/tasks.c ****      * lists. */
3272:./FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
3273:./FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
3274:./FreeRTOS/tasks.c **** 
3275:./FreeRTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3276:./FreeRTOS/tasks.c ****     {
3277:./FreeRTOS/tasks.c ****         /* The unblocked task has a priority above that of the calling task, so
3278:./FreeRTOS/tasks.c ****          * a context switch is required.  This function is called with the
3279:./FreeRTOS/tasks.c ****          * scheduler suspended so xYieldPending is set so the context switch
3280:./FreeRTOS/tasks.c ****          * occurs immediately that the scheduler is resumed (unsuspended). */
3281:./FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
3282:./FreeRTOS/tasks.c ****     }
3283:./FreeRTOS/tasks.c **** }
3284:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3285:./FreeRTOS/tasks.c **** 
3286:./FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3287:./FreeRTOS/tasks.c **** {
3288:./FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
3289:./FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
3290:./FreeRTOS/tasks.c ****     {
3291:./FreeRTOS/tasks.c ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
3292:./FreeRTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
3293:./FreeRTOS/tasks.c ****     }
3294:./FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
3295:./FreeRTOS/tasks.c **** }
3296:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3297:./FreeRTOS/tasks.c **** 
3298:./FreeRTOS/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3299:./FreeRTOS/tasks.c **** {
3300:./FreeRTOS/tasks.c ****     /* For internal use only as it does not use a critical section. */
3301:./FreeRTOS/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
3302:./FreeRTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
3303:./FreeRTOS/tasks.c **** }
3304:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3305:./FreeRTOS/tasks.c **** 
3306:./FreeRTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
3307:./FreeRTOS/tasks.c ****                                  TickType_t * const pxTicksToWait )
3308:./FreeRTOS/tasks.c **** {
3309:./FreeRTOS/tasks.c ****     BaseType_t xReturn;
3310:./FreeRTOS/tasks.c **** 
3311:./FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
3312:./FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
3313:./FreeRTOS/tasks.c **** 
3314:./FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
3315:./FreeRTOS/tasks.c ****     {
3316:./FreeRTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this block. */
3317:./FreeRTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount;
3318:./FreeRTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3319:./FreeRTOS/tasks.c **** 
3320:./FreeRTOS/tasks.c ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
3321:./FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3322:./FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 61


3323:./FreeRTOS/tasks.c ****                 /* The delay was aborted, which is not the same as a time out,
3324:./FreeRTOS/tasks.c ****                  * but has the same result. */
3325:./FreeRTOS/tasks.c ****                 pxCurrentTCB->ucDelayAborted = pdFALSE;
3326:./FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
3327:./FreeRTOS/tasks.c ****             }
3328:./FreeRTOS/tasks.c ****             else
3329:./FreeRTOS/tasks.c ****         #endif
3330:./FreeRTOS/tasks.c **** 
3331:./FreeRTOS/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3332:./FreeRTOS/tasks.c ****             if( *pxTicksToWait == portMAX_DELAY )
3333:./FreeRTOS/tasks.c ****             {
3334:./FreeRTOS/tasks.c ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
3335:./FreeRTOS/tasks.c ****                  * specified is the maximum block time then the task should block
3336:./FreeRTOS/tasks.c ****                  * indefinitely, and therefore never time out. */
3337:./FreeRTOS/tasks.c ****                 xReturn = pdFALSE;
3338:./FreeRTOS/tasks.c ****             }
3339:./FreeRTOS/tasks.c ****             else
3340:./FreeRTOS/tasks.c ****         #endif
3341:./FreeRTOS/tasks.c **** 
3342:./FreeRTOS/tasks.c ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
3343:./FreeRTOS/tasks.c ****         {
3344:./FreeRTOS/tasks.c ****             /* The tick count is greater than the time at which
3345:./FreeRTOS/tasks.c ****              * vTaskSetTimeout() was called, but has also overflowed since
3346:./FreeRTOS/tasks.c ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
3347:./FreeRTOS/tasks.c ****              * around and gone past again. This passed since vTaskSetTimeout()
3348:./FreeRTOS/tasks.c ****              * was called. */
3349:./FreeRTOS/tasks.c ****             xReturn = pdTRUE;
3350:./FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3351:./FreeRTOS/tasks.c ****         }
3352:./FreeRTOS/tasks.c ****         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant wi
3353:./FreeRTOS/tasks.c ****         {
3354:./FreeRTOS/tasks.c ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
3355:./FreeRTOS/tasks.c ****             *pxTicksToWait -= xElapsedTime;
3356:./FreeRTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
3357:./FreeRTOS/tasks.c ****             xReturn = pdFALSE;
3358:./FreeRTOS/tasks.c ****         }
3359:./FreeRTOS/tasks.c ****         else
3360:./FreeRTOS/tasks.c ****         {
3361:./FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3362:./FreeRTOS/tasks.c ****             xReturn = pdTRUE;
3363:./FreeRTOS/tasks.c ****         }
3364:./FreeRTOS/tasks.c ****     }
3365:./FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
3366:./FreeRTOS/tasks.c **** 
3367:./FreeRTOS/tasks.c ****     return xReturn;
3368:./FreeRTOS/tasks.c **** }
3369:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3370:./FreeRTOS/tasks.c **** 
3371:./FreeRTOS/tasks.c **** void vTaskMissedYield( void )
3372:./FreeRTOS/tasks.c **** {
3373:./FreeRTOS/tasks.c ****     xYieldPending = pdTRUE;
3374:./FreeRTOS/tasks.c **** }
3375:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3376:./FreeRTOS/tasks.c **** 
3377:./FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3378:./FreeRTOS/tasks.c **** 
3379:./FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 62


3380:./FreeRTOS/tasks.c ****     {
3381:./FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
3382:./FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
3383:./FreeRTOS/tasks.c **** 
3384:./FreeRTOS/tasks.c ****         if( xTask != NULL )
3385:./FreeRTOS/tasks.c ****         {
3386:./FreeRTOS/tasks.c ****             pxTCB = xTask;
3387:./FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
3388:./FreeRTOS/tasks.c ****         }
3389:./FreeRTOS/tasks.c ****         else
3390:./FreeRTOS/tasks.c ****         {
3391:./FreeRTOS/tasks.c ****             uxReturn = 0U;
3392:./FreeRTOS/tasks.c ****         }
3393:./FreeRTOS/tasks.c **** 
3394:./FreeRTOS/tasks.c ****         return uxReturn;
3395:./FreeRTOS/tasks.c ****     }
3396:./FreeRTOS/tasks.c **** 
3397:./FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3398:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3399:./FreeRTOS/tasks.c **** 
3400:./FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3401:./FreeRTOS/tasks.c **** 
3402:./FreeRTOS/tasks.c ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
3403:./FreeRTOS/tasks.c ****                              const UBaseType_t uxHandle )
3404:./FreeRTOS/tasks.c ****     {
3405:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3406:./FreeRTOS/tasks.c **** 
3407:./FreeRTOS/tasks.c ****         if( xTask != NULL )
3408:./FreeRTOS/tasks.c ****         {
3409:./FreeRTOS/tasks.c ****             pxTCB = xTask;
3410:./FreeRTOS/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
3411:./FreeRTOS/tasks.c ****         }
3412:./FreeRTOS/tasks.c ****     }
3413:./FreeRTOS/tasks.c **** 
3414:./FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3415:./FreeRTOS/tasks.c **** 
3416:./FreeRTOS/tasks.c **** /*
3417:./FreeRTOS/tasks.c ****  * -----------------------------------------------------------
3418:./FreeRTOS/tasks.c ****  * The Idle task.
3419:./FreeRTOS/tasks.c ****  * ----------------------------------------------------------
3420:./FreeRTOS/tasks.c ****  *
3421:./FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3422:./FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3423:./FreeRTOS/tasks.c ****  *
3424:./FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3425:./FreeRTOS/tasks.c ****  *
3426:./FreeRTOS/tasks.c ****  */
3427:./FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3428:./FreeRTOS/tasks.c **** {
3429:./FreeRTOS/tasks.c ****     /* Stop warnings. */
3430:./FreeRTOS/tasks.c ****     ( void ) pvParameters;
3431:./FreeRTOS/tasks.c **** 
3432:./FreeRTOS/tasks.c ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3433:./FreeRTOS/tasks.c ****      * SCHEDULER IS STARTED. **/
3434:./FreeRTOS/tasks.c **** 
3435:./FreeRTOS/tasks.c ****     /* In case a task that has a secure context deletes itself, in which case
3436:./FreeRTOS/tasks.c ****      * the idle task is responsible for deleting the task's secure context, if
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 63


3437:./FreeRTOS/tasks.c ****      * any. */
3438:./FreeRTOS/tasks.c ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3439:./FreeRTOS/tasks.c **** 
3440:./FreeRTOS/tasks.c ****     for( ; ; )
3441:./FreeRTOS/tasks.c ****     {
3442:./FreeRTOS/tasks.c ****         /* See if any tasks have deleted themselves - if so then the idle task
3443:./FreeRTOS/tasks.c ****          * is responsible for freeing the deleted task's TCB and stack. */
3444:./FreeRTOS/tasks.c ****         prvCheckTasksWaitingTermination();
3445:./FreeRTOS/tasks.c **** 
3446:./FreeRTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 0 )
3447:./FreeRTOS/tasks.c ****         {
3448:./FreeRTOS/tasks.c ****             /* If we are not using preemption we keep forcing a task switch to
3449:./FreeRTOS/tasks.c ****              * see if any other task has become available.  If we are using
3450:./FreeRTOS/tasks.c ****              * preemption we don't need to do this as any task becoming available
3451:./FreeRTOS/tasks.c ****              * will automatically get the processor anyway. */
3452:./FreeRTOS/tasks.c ****             taskYIELD();
3453:./FreeRTOS/tasks.c ****         }
3454:./FreeRTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
3455:./FreeRTOS/tasks.c **** 
3456:./FreeRTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3457:./FreeRTOS/tasks.c ****         {
3458:./FreeRTOS/tasks.c ****             /* When using preemption tasks of equal priority will be
3459:./FreeRTOS/tasks.c ****              * timesliced.  If a task that is sharing the idle priority is ready
3460:./FreeRTOS/tasks.c ****              * to run then the idle task should yield before the end of the
3461:./FreeRTOS/tasks.c ****              * timeslice.
3462:./FreeRTOS/tasks.c ****              *
3463:./FreeRTOS/tasks.c ****              * A critical region is not required here as we are just reading from
3464:./FreeRTOS/tasks.c ****              * the list, and an occasional incorrect value will not matter.  If
3465:./FreeRTOS/tasks.c ****              * the ready list at the idle priority contains more than one task
3466:./FreeRTOS/tasks.c ****              * then a task other than the idle task is ready to execute. */
3467:./FreeRTOS/tasks.c ****             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType
3468:./FreeRTOS/tasks.c ****             {
3469:./FreeRTOS/tasks.c ****                 taskYIELD();
3470:./FreeRTOS/tasks.c ****             }
3471:./FreeRTOS/tasks.c ****             else
3472:./FreeRTOS/tasks.c ****             {
3473:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3474:./FreeRTOS/tasks.c ****             }
3475:./FreeRTOS/tasks.c ****         }
3476:./FreeRTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3477:./FreeRTOS/tasks.c **** 
3478:./FreeRTOS/tasks.c ****         #if ( configUSE_IDLE_HOOK == 1 )
3479:./FreeRTOS/tasks.c ****         {
3480:./FreeRTOS/tasks.c ****             extern void vApplicationIdleHook( void );
3481:./FreeRTOS/tasks.c **** 
3482:./FreeRTOS/tasks.c ****             /* Call the user defined function from within the idle task.  This
3483:./FreeRTOS/tasks.c ****              * allows the application designer to add background functionality
3484:./FreeRTOS/tasks.c ****              * without the overhead of a separate task.
3485:./FreeRTOS/tasks.c ****              * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3486:./FreeRTOS/tasks.c ****              * CALL A FUNCTION THAT MIGHT BLOCK. */
3487:./FreeRTOS/tasks.c ****             vApplicationIdleHook();
3488:./FreeRTOS/tasks.c ****         }
3489:./FreeRTOS/tasks.c ****         #endif /* configUSE_IDLE_HOOK */
3490:./FreeRTOS/tasks.c **** 
3491:./FreeRTOS/tasks.c ****         /* This conditional compilation should use inequality to 0, not equality
3492:./FreeRTOS/tasks.c ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3493:./FreeRTOS/tasks.c ****          * user defined low power mode  implementations require
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 64


3494:./FreeRTOS/tasks.c ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3495:./FreeRTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3496:./FreeRTOS/tasks.c ****         {
3497:./FreeRTOS/tasks.c ****             TickType_t xExpectedIdleTime;
3498:./FreeRTOS/tasks.c **** 
3499:./FreeRTOS/tasks.c ****             /* It is not desirable to suspend then resume the scheduler on
3500:./FreeRTOS/tasks.c ****              * each iteration of the idle task.  Therefore, a preliminary
3501:./FreeRTOS/tasks.c ****              * test of the expected idle time is performed without the
3502:./FreeRTOS/tasks.c ****              * scheduler suspended.  The result here is not necessarily
3503:./FreeRTOS/tasks.c ****              * valid. */
3504:./FreeRTOS/tasks.c ****             xExpectedIdleTime = prvGetExpectedIdleTime();
3505:./FreeRTOS/tasks.c **** 
3506:./FreeRTOS/tasks.c ****             if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3507:./FreeRTOS/tasks.c ****             {
3508:./FreeRTOS/tasks.c ****                 vTaskSuspendAll();
3509:./FreeRTOS/tasks.c ****                 {
3510:./FreeRTOS/tasks.c ****                     /* Now the scheduler is suspended, the expected idle
3511:./FreeRTOS/tasks.c ****                      * time can be sampled again, and this time its value can
3512:./FreeRTOS/tasks.c ****                      * be used. */
3513:./FreeRTOS/tasks.c ****                     configASSERT( xNextTaskUnblockTime >= xTickCount );
3514:./FreeRTOS/tasks.c ****                     xExpectedIdleTime = prvGetExpectedIdleTime();
3515:./FreeRTOS/tasks.c **** 
3516:./FreeRTOS/tasks.c ****                     /* Define the following macro to set xExpectedIdleTime to 0
3517:./FreeRTOS/tasks.c ****                      * if the application does not want
3518:./FreeRTOS/tasks.c ****                      * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3519:./FreeRTOS/tasks.c ****                     configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3520:./FreeRTOS/tasks.c **** 
3521:./FreeRTOS/tasks.c ****                     if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3522:./FreeRTOS/tasks.c ****                     {
3523:./FreeRTOS/tasks.c ****                         traceLOW_POWER_IDLE_BEGIN();
3524:./FreeRTOS/tasks.c ****                         portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3525:./FreeRTOS/tasks.c ****                         traceLOW_POWER_IDLE_END();
3526:./FreeRTOS/tasks.c ****                     }
3527:./FreeRTOS/tasks.c ****                     else
3528:./FreeRTOS/tasks.c ****                     {
3529:./FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
3530:./FreeRTOS/tasks.c ****                     }
3531:./FreeRTOS/tasks.c ****                 }
3532:./FreeRTOS/tasks.c ****                 ( void ) xTaskResumeAll();
3533:./FreeRTOS/tasks.c ****             }
3534:./FreeRTOS/tasks.c ****             else
3535:./FreeRTOS/tasks.c ****             {
3536:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3537:./FreeRTOS/tasks.c ****             }
3538:./FreeRTOS/tasks.c ****         }
3539:./FreeRTOS/tasks.c ****         #endif /* configUSE_TICKLESS_IDLE */
3540:./FreeRTOS/tasks.c ****     }
3541:./FreeRTOS/tasks.c **** }
3542:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3543:./FreeRTOS/tasks.c **** 
3544:./FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
3545:./FreeRTOS/tasks.c **** 
3546:./FreeRTOS/tasks.c ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3547:./FreeRTOS/tasks.c ****     {
3548:./FreeRTOS/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3549:./FreeRTOS/tasks.c ****             /* The idle task exists in addition to the application tasks. */
3550:./FreeRTOS/tasks.c ****             const UBaseType_t uxNonApplicationTasks = 1;
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 65


3551:./FreeRTOS/tasks.c ****         #endif /* INCLUDE_vTaskSuspend */
3552:./FreeRTOS/tasks.c **** 
3553:./FreeRTOS/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
3554:./FreeRTOS/tasks.c **** 
3555:./FreeRTOS/tasks.c ****         /* This function must be called from a critical section. */
3556:./FreeRTOS/tasks.c **** 
3557:./FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3558:./FreeRTOS/tasks.c ****         {
3559:./FreeRTOS/tasks.c ****             /* A task was made ready while the scheduler was suspended. */
3560:./FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3561:./FreeRTOS/tasks.c ****         }
3562:./FreeRTOS/tasks.c ****         else if( xYieldPending != pdFALSE )
3563:./FreeRTOS/tasks.c ****         {
3564:./FreeRTOS/tasks.c ****             /* A yield was pended while the scheduler was suspended. */
3565:./FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3566:./FreeRTOS/tasks.c ****         }
3567:./FreeRTOS/tasks.c ****         else if( xPendedTicks != 0 )
3568:./FreeRTOS/tasks.c ****         {
3569:./FreeRTOS/tasks.c ****             /* A tick interrupt has already occurred but was held pending
3570:./FreeRTOS/tasks.c ****              * because the scheduler is suspended. */
3571:./FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3572:./FreeRTOS/tasks.c ****         }
3573:./FreeRTOS/tasks.c **** 
3574:./FreeRTOS/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3575:./FreeRTOS/tasks.c ****             else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - u
3576:./FreeRTOS/tasks.c ****             {
3577:./FreeRTOS/tasks.c ****                 /* If all the tasks are in the suspended list (which might mean they
3578:./FreeRTOS/tasks.c ****                  * have an infinite block time rather than actually being suspended)
3579:./FreeRTOS/tasks.c ****                  * then it is safe to turn all clocks off and just wait for external
3580:./FreeRTOS/tasks.c ****                  * interrupts. */
3581:./FreeRTOS/tasks.c ****                 eReturn = eNoTasksWaitingTimeout;
3582:./FreeRTOS/tasks.c ****             }
3583:./FreeRTOS/tasks.c ****         #endif /* INCLUDE_vTaskSuspend */
3584:./FreeRTOS/tasks.c ****         else
3585:./FreeRTOS/tasks.c ****         {
3586:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3587:./FreeRTOS/tasks.c ****         }
3588:./FreeRTOS/tasks.c **** 
3589:./FreeRTOS/tasks.c ****         return eReturn;
3590:./FreeRTOS/tasks.c ****     }
3591:./FreeRTOS/tasks.c **** 
3592:./FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3593:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3594:./FreeRTOS/tasks.c **** 
3595:./FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3596:./FreeRTOS/tasks.c **** 
3597:./FreeRTOS/tasks.c ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
3598:./FreeRTOS/tasks.c ****                                             BaseType_t xIndex,
3599:./FreeRTOS/tasks.c ****                                             void * pvValue )
3600:./FreeRTOS/tasks.c ****     {
3601:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3602:./FreeRTOS/tasks.c **** 
3603:./FreeRTOS/tasks.c ****         if( ( xIndex >= 0 ) &&
3604:./FreeRTOS/tasks.c ****             ( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS ) )
3605:./FreeRTOS/tasks.c ****         {
3606:./FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
3607:./FreeRTOS/tasks.c ****             configASSERT( pxTCB != NULL );
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 66


3608:./FreeRTOS/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3609:./FreeRTOS/tasks.c ****         }
3610:./FreeRTOS/tasks.c ****     }
3611:./FreeRTOS/tasks.c **** 
3612:./FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3613:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3614:./FreeRTOS/tasks.c **** 
3615:./FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3616:./FreeRTOS/tasks.c **** 
3617:./FreeRTOS/tasks.c ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
3618:./FreeRTOS/tasks.c ****                                                BaseType_t xIndex )
3619:./FreeRTOS/tasks.c ****     {
3620:./FreeRTOS/tasks.c ****         void * pvReturn = NULL;
3621:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3622:./FreeRTOS/tasks.c **** 
3623:./FreeRTOS/tasks.c ****         if( ( xIndex >= 0 ) &&
3624:./FreeRTOS/tasks.c ****             ( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS ) )
3625:./FreeRTOS/tasks.c ****         {
3626:./FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3627:./FreeRTOS/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3628:./FreeRTOS/tasks.c ****         }
3629:./FreeRTOS/tasks.c ****         else
3630:./FreeRTOS/tasks.c ****         {
3631:./FreeRTOS/tasks.c ****             pvReturn = NULL;
3632:./FreeRTOS/tasks.c ****         }
3633:./FreeRTOS/tasks.c **** 
3634:./FreeRTOS/tasks.c ****         return pvReturn;
3635:./FreeRTOS/tasks.c ****     }
3636:./FreeRTOS/tasks.c **** 
3637:./FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3638:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3639:./FreeRTOS/tasks.c **** 
3640:./FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3641:./FreeRTOS/tasks.c **** 
3642:./FreeRTOS/tasks.c ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
3643:./FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
3644:./FreeRTOS/tasks.c ****     {
3645:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3646:./FreeRTOS/tasks.c **** 
3647:./FreeRTOS/tasks.c ****         /* If null is passed in here then we are modifying the MPU settings of
3648:./FreeRTOS/tasks.c ****          * the calling task. */
3649:./FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
3650:./FreeRTOS/tasks.c **** 
3651:./FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3652:./FreeRTOS/tasks.c ****     }
3653:./FreeRTOS/tasks.c **** 
3654:./FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3655:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3656:./FreeRTOS/tasks.c **** 
3657:./FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3658:./FreeRTOS/tasks.c **** {
3659:./FreeRTOS/tasks.c ****     UBaseType_t uxPriority;
3660:./FreeRTOS/tasks.c **** 
3661:./FreeRTOS/tasks.c ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
3662:./FreeRTOS/tasks.c ****     {
3663:./FreeRTOS/tasks.c ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3664:./FreeRTOS/tasks.c ****     }
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 67


3665:./FreeRTOS/tasks.c **** 
3666:./FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList1 );
3667:./FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
3668:./FreeRTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
3669:./FreeRTOS/tasks.c **** 
3670:./FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3671:./FreeRTOS/tasks.c ****     {
3672:./FreeRTOS/tasks.c ****         vListInitialise( &xTasksWaitingTermination );
3673:./FreeRTOS/tasks.c ****     }
3674:./FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3675:./FreeRTOS/tasks.c **** 
3676:./FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
3677:./FreeRTOS/tasks.c ****     {
3678:./FreeRTOS/tasks.c ****         vListInitialise( &xSuspendedTaskList );
3679:./FreeRTOS/tasks.c ****     }
3680:./FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
3681:./FreeRTOS/tasks.c **** 
3682:./FreeRTOS/tasks.c ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3683:./FreeRTOS/tasks.c ****      * using list2. */
3684:./FreeRTOS/tasks.c ****     pxDelayedTaskList = &xDelayedTaskList1;
3685:./FreeRTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
3686:./FreeRTOS/tasks.c **** }
3687:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3688:./FreeRTOS/tasks.c **** 
3689:./FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3690:./FreeRTOS/tasks.c **** {
3691:./FreeRTOS/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3692:./FreeRTOS/tasks.c **** 
3693:./FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3694:./FreeRTOS/tasks.c ****     {
3695:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3696:./FreeRTOS/tasks.c **** 
3697:./FreeRTOS/tasks.c ****         /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3698:./FreeRTOS/tasks.c ****          * being called too often in the idle task. */
3699:./FreeRTOS/tasks.c ****         while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3700:./FreeRTOS/tasks.c ****         {
3701:./FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
3702:./FreeRTOS/tasks.c ****             {
3703:./FreeRTOS/tasks.c ****                 pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079
3704:./FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3705:./FreeRTOS/tasks.c ****                 --uxCurrentNumberOfTasks;
3706:./FreeRTOS/tasks.c ****                 --uxDeletedTasksWaitingCleanUp;
3707:./FreeRTOS/tasks.c ****             }
3708:./FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
3709:./FreeRTOS/tasks.c **** 
3710:./FreeRTOS/tasks.c ****             prvDeleteTCB( pxTCB );
3711:./FreeRTOS/tasks.c ****         }
3712:./FreeRTOS/tasks.c ****     }
3713:./FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3714:./FreeRTOS/tasks.c **** }
3715:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3716:./FreeRTOS/tasks.c **** 
3717:./FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3718:./FreeRTOS/tasks.c **** 
3719:./FreeRTOS/tasks.c ****     void vTaskGetInfo( TaskHandle_t xTask,
3720:./FreeRTOS/tasks.c ****                        TaskStatus_t * pxTaskStatus,
3721:./FreeRTOS/tasks.c ****                        BaseType_t xGetFreeStackSpace,
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 68


3722:./FreeRTOS/tasks.c ****                        eTaskState eState )
3723:./FreeRTOS/tasks.c ****     {
3724:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3725:./FreeRTOS/tasks.c **** 
3726:./FreeRTOS/tasks.c ****         /* xTask is NULL then get the state of the calling task. */
3727:./FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3728:./FreeRTOS/tasks.c **** 
3729:./FreeRTOS/tasks.c ****         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3730:./FreeRTOS/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
3731:./FreeRTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3732:./FreeRTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
3733:./FreeRTOS/tasks.c ****         #if ( ( portSTACK_GROWTH > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
3734:./FreeRTOS/tasks.c ****             pxTaskStatus->pxTopOfStack = pxTCB->pxTopOfStack;
3735:./FreeRTOS/tasks.c ****             pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
3736:./FreeRTOS/tasks.c ****         #endif
3737:./FreeRTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3738:./FreeRTOS/tasks.c **** 
3739:./FreeRTOS/tasks.c ****         #if ( configUSE_MUTEXES == 1 )
3740:./FreeRTOS/tasks.c ****         {
3741:./FreeRTOS/tasks.c ****             pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3742:./FreeRTOS/tasks.c ****         }
3743:./FreeRTOS/tasks.c ****         #else
3744:./FreeRTOS/tasks.c ****         {
3745:./FreeRTOS/tasks.c ****             pxTaskStatus->uxBasePriority = 0;
3746:./FreeRTOS/tasks.c ****         }
3747:./FreeRTOS/tasks.c ****         #endif
3748:./FreeRTOS/tasks.c **** 
3749:./FreeRTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3750:./FreeRTOS/tasks.c ****         {
3751:./FreeRTOS/tasks.c ****             pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3752:./FreeRTOS/tasks.c ****         }
3753:./FreeRTOS/tasks.c ****         #else
3754:./FreeRTOS/tasks.c ****         {
3755:./FreeRTOS/tasks.c ****             pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
3756:./FreeRTOS/tasks.c ****         }
3757:./FreeRTOS/tasks.c ****         #endif
3758:./FreeRTOS/tasks.c **** 
3759:./FreeRTOS/tasks.c ****         /* Obtaining the task state is a little fiddly, so is only done if the
3760:./FreeRTOS/tasks.c ****          * value of eState passed into this function is eInvalid - otherwise the
3761:./FreeRTOS/tasks.c ****          * state is just set to whatever is passed in. */
3762:./FreeRTOS/tasks.c ****         if( eState != eInvalid )
3763:./FreeRTOS/tasks.c ****         {
3764:./FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
3765:./FreeRTOS/tasks.c ****             {
3766:./FreeRTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eRunning;
3767:./FreeRTOS/tasks.c ****             }
3768:./FreeRTOS/tasks.c ****             else
3769:./FreeRTOS/tasks.c ****             {
3770:./FreeRTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eState;
3771:./FreeRTOS/tasks.c **** 
3772:./FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
3773:./FreeRTOS/tasks.c ****                 {
3774:./FreeRTOS/tasks.c ****                     /* If the task is in the suspended list then there is a
3775:./FreeRTOS/tasks.c ****                      *  chance it is actually just blocked indefinitely - so really
3776:./FreeRTOS/tasks.c ****                      *  it should be reported as being in the Blocked state. */
3777:./FreeRTOS/tasks.c ****                     if( eState == eSuspended )
3778:./FreeRTOS/tasks.c ****                     {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 69


3779:./FreeRTOS/tasks.c ****                         vTaskSuspendAll();
3780:./FreeRTOS/tasks.c ****                         {
3781:./FreeRTOS/tasks.c ****                             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3782:./FreeRTOS/tasks.c ****                             {
3783:./FreeRTOS/tasks.c ****                                 pxTaskStatus->eCurrentState = eBlocked;
3784:./FreeRTOS/tasks.c ****                             }
3785:./FreeRTOS/tasks.c ****                         }
3786:./FreeRTOS/tasks.c ****                         ( void ) xTaskResumeAll();
3787:./FreeRTOS/tasks.c ****                     }
3788:./FreeRTOS/tasks.c ****                 }
3789:./FreeRTOS/tasks.c ****                 #endif /* INCLUDE_vTaskSuspend */
3790:./FreeRTOS/tasks.c ****             }
3791:./FreeRTOS/tasks.c ****         }
3792:./FreeRTOS/tasks.c ****         else
3793:./FreeRTOS/tasks.c ****         {
3794:./FreeRTOS/tasks.c ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3795:./FreeRTOS/tasks.c ****         }
3796:./FreeRTOS/tasks.c **** 
3797:./FreeRTOS/tasks.c ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3798:./FreeRTOS/tasks.c ****          * parameter is provided to allow it to be skipped. */
3799:./FreeRTOS/tasks.c ****         if( xGetFreeStackSpace != pdFALSE )
3800:./FreeRTOS/tasks.c ****         {
3801:./FreeRTOS/tasks.c ****             #if ( portSTACK_GROWTH > 0 )
3802:./FreeRTOS/tasks.c ****             {
3803:./FreeRTOS/tasks.c ****                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTC
3804:./FreeRTOS/tasks.c ****             }
3805:./FreeRTOS/tasks.c ****             #else
3806:./FreeRTOS/tasks.c ****             {
3807:./FreeRTOS/tasks.c ****                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTC
3808:./FreeRTOS/tasks.c ****             }
3809:./FreeRTOS/tasks.c ****             #endif
3810:./FreeRTOS/tasks.c ****         }
3811:./FreeRTOS/tasks.c ****         else
3812:./FreeRTOS/tasks.c ****         {
3813:./FreeRTOS/tasks.c ****             pxTaskStatus->usStackHighWaterMark = 0;
3814:./FreeRTOS/tasks.c ****         }
3815:./FreeRTOS/tasks.c ****     }
3816:./FreeRTOS/tasks.c **** 
3817:./FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3818:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3819:./FreeRTOS/tasks.c **** 
3820:./FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3821:./FreeRTOS/tasks.c **** 
3822:./FreeRTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
3823:./FreeRTOS/tasks.c ****                                                      List_t * pxList,
3824:./FreeRTOS/tasks.c ****                                                      eTaskState eState )
3825:./FreeRTOS/tasks.c ****     {
3826:./FreeRTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB;
3827:./FreeRTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxFirstTCB;
3828:./FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0;
3829:./FreeRTOS/tasks.c **** 
3830:./FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3831:./FreeRTOS/tasks.c ****         {
3832:./FreeRTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
3833:./FreeRTOS/tasks.c **** 
3834:./FreeRTOS/tasks.c ****             /* Populate an TaskStatus_t structure within the
3835:./FreeRTOS/tasks.c ****              * pxTaskStatusArray array for each task that is referenced from
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 70


3836:./FreeRTOS/tasks.c ****              * pxList.  See the definition of TaskStatus_t in task.h for the
3837:./FreeRTOS/tasks.c ****              * meaning of each TaskStatus_t structure member. */
3838:./FreeRTOS/tasks.c ****             do
3839:./FreeRTOS/tasks.c ****             {
3840:./FreeRTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
3841:./FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
3842:./FreeRTOS/tasks.c ****                 uxTask++;
3843:./FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
3844:./FreeRTOS/tasks.c ****         }
3845:./FreeRTOS/tasks.c ****         else
3846:./FreeRTOS/tasks.c ****         {
3847:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3848:./FreeRTOS/tasks.c ****         }
3849:./FreeRTOS/tasks.c **** 
3850:./FreeRTOS/tasks.c ****         return uxTask;
3851:./FreeRTOS/tasks.c ****     }
3852:./FreeRTOS/tasks.c **** 
3853:./FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3854:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3855:./FreeRTOS/tasks.c **** 
3856:./FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3857:./FreeRTOS/tasks.c **** 
3858:./FreeRTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3859:./FreeRTOS/tasks.c ****     {
3860:./FreeRTOS/tasks.c ****         uint32_t ulCount = 0U;
3861:./FreeRTOS/tasks.c **** 
3862:./FreeRTOS/tasks.c ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3863:./FreeRTOS/tasks.c ****         {
3864:./FreeRTOS/tasks.c ****             pucStackByte -= portSTACK_GROWTH;
3865:./FreeRTOS/tasks.c ****             ulCount++;
3866:./FreeRTOS/tasks.c ****         }
3867:./FreeRTOS/tasks.c **** 
3868:./FreeRTOS/tasks.c ****         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on sma
3869:./FreeRTOS/tasks.c **** 
3870:./FreeRTOS/tasks.c ****         return ( configSTACK_DEPTH_TYPE ) ulCount;
3871:./FreeRTOS/tasks.c ****     }
3872:./FreeRTOS/tasks.c **** 
3873:./FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3874:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3875:./FreeRTOS/tasks.c **** 
3876:./FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3877:./FreeRTOS/tasks.c **** 
3878:./FreeRTOS/tasks.c **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3879:./FreeRTOS/tasks.c ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3880:./FreeRTOS/tasks.c ****  * user to determine the return type.  It gets around the problem of the value
3881:./FreeRTOS/tasks.c ****  * overflowing on 8-bit types without breaking backward compatibility for
3882:./FreeRTOS/tasks.c ****  * applications that expect an 8-bit return type. */
3883:./FreeRTOS/tasks.c ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3884:./FreeRTOS/tasks.c ****     {
3885:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3886:./FreeRTOS/tasks.c ****         uint8_t * pucEndOfStack;
3887:./FreeRTOS/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
3888:./FreeRTOS/tasks.c **** 
3889:./FreeRTOS/tasks.c ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3890:./FreeRTOS/tasks.c ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
3891:./FreeRTOS/tasks.c ****          * allows the user to determine the return type.  It gets around the
3892:./FreeRTOS/tasks.c ****          * problem of the value overflowing on 8-bit types without breaking
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 71


3893:./FreeRTOS/tasks.c ****          * backward compatibility for applications that expect an 8-bit return
3894:./FreeRTOS/tasks.c ****          * type. */
3895:./FreeRTOS/tasks.c **** 
3896:./FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3897:./FreeRTOS/tasks.c **** 
3898:./FreeRTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3899:./FreeRTOS/tasks.c ****         {
3900:./FreeRTOS/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3901:./FreeRTOS/tasks.c ****         }
3902:./FreeRTOS/tasks.c ****         #else
3903:./FreeRTOS/tasks.c ****         {
3904:./FreeRTOS/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3905:./FreeRTOS/tasks.c ****         }
3906:./FreeRTOS/tasks.c ****         #endif
3907:./FreeRTOS/tasks.c **** 
3908:./FreeRTOS/tasks.c ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3909:./FreeRTOS/tasks.c **** 
3910:./FreeRTOS/tasks.c ****         return uxReturn;
3911:./FreeRTOS/tasks.c ****     }
3912:./FreeRTOS/tasks.c **** 
3913:./FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3914:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3915:./FreeRTOS/tasks.c **** 
3916:./FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3917:./FreeRTOS/tasks.c **** 
3918:./FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3919:./FreeRTOS/tasks.c ****     {
3920:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3921:./FreeRTOS/tasks.c ****         uint8_t * pucEndOfStack;
3922:./FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
3923:./FreeRTOS/tasks.c **** 
3924:./FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3925:./FreeRTOS/tasks.c **** 
3926:./FreeRTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3927:./FreeRTOS/tasks.c ****         {
3928:./FreeRTOS/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3929:./FreeRTOS/tasks.c ****         }
3930:./FreeRTOS/tasks.c ****         #else
3931:./FreeRTOS/tasks.c ****         {
3932:./FreeRTOS/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3933:./FreeRTOS/tasks.c ****         }
3934:./FreeRTOS/tasks.c ****         #endif
3935:./FreeRTOS/tasks.c **** 
3936:./FreeRTOS/tasks.c ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3937:./FreeRTOS/tasks.c **** 
3938:./FreeRTOS/tasks.c ****         return uxReturn;
3939:./FreeRTOS/tasks.c ****     }
3940:./FreeRTOS/tasks.c **** 
3941:./FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3942:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3943:./FreeRTOS/tasks.c **** 
3944:./FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3945:./FreeRTOS/tasks.c **** 
3946:./FreeRTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB )
3947:./FreeRTOS/tasks.c ****     {
3948:./FreeRTOS/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
3949:./FreeRTOS/tasks.c ****          * above the vPortFree() calls.  The call is also used by ports/demos that
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 72


3950:./FreeRTOS/tasks.c ****          * want to allocate and clean RAM statically. */
3951:./FreeRTOS/tasks.c ****         portCLEAN_UP_TCB( pxTCB );
3952:./FreeRTOS/tasks.c **** 
3953:./FreeRTOS/tasks.c ****         #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
3954:./FreeRTOS/tasks.c ****         {
3955:./FreeRTOS/tasks.c ****             /* Free up the memory allocated for the task's TLS Block. */
3956:./FreeRTOS/tasks.c ****             configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
3957:./FreeRTOS/tasks.c ****         }
3958:./FreeRTOS/tasks.c ****         #endif
3959:./FreeRTOS/tasks.c **** 
3960:./FreeRTOS/tasks.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
3961:./FreeRTOS/tasks.c ****         {
3962:./FreeRTOS/tasks.c ****             /* The task can only have been allocated dynamically - free both
3963:./FreeRTOS/tasks.c ****              * the stack and TCB. */
3964:./FreeRTOS/tasks.c ****             vPortFreeStack( pxTCB->pxStack );
3965:./FreeRTOS/tasks.c ****             vPortFree( pxTCB );
3966:./FreeRTOS/tasks.c ****         }
3967:./FreeRTOS/tasks.c ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been
3968:./FreeRTOS/tasks.c ****         {
3969:./FreeRTOS/tasks.c ****             /* The task could have been allocated statically or dynamically, so
3970:./FreeRTOS/tasks.c ****              * check what was statically allocated before trying to free the
3971:./FreeRTOS/tasks.c ****              * memory. */
3972:./FreeRTOS/tasks.c ****             if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3973:./FreeRTOS/tasks.c ****             {
3974:./FreeRTOS/tasks.c ****                 /* Both the stack and TCB were allocated dynamically, so both
3975:./FreeRTOS/tasks.c ****                  * must be freed. */
3976:./FreeRTOS/tasks.c ****                 vPortFreeStack( pxTCB->pxStack );
3977:./FreeRTOS/tasks.c ****                 vPortFree( pxTCB );
3978:./FreeRTOS/tasks.c ****             }
3979:./FreeRTOS/tasks.c ****             else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3980:./FreeRTOS/tasks.c ****             {
3981:./FreeRTOS/tasks.c ****                 /* Only the stack was statically allocated, so the TCB is the
3982:./FreeRTOS/tasks.c ****                  * only memory that must be freed. */
3983:./FreeRTOS/tasks.c ****                 vPortFree( pxTCB );
3984:./FreeRTOS/tasks.c ****             }
3985:./FreeRTOS/tasks.c ****             else
3986:./FreeRTOS/tasks.c ****             {
3987:./FreeRTOS/tasks.c ****                 /* Neither the stack nor the TCB were allocated dynamically, so
3988:./FreeRTOS/tasks.c ****                  * nothing needs to be freed. */
3989:./FreeRTOS/tasks.c ****                 configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB
3990:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3991:./FreeRTOS/tasks.c ****             }
3992:./FreeRTOS/tasks.c ****         }
3993:./FreeRTOS/tasks.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3994:./FreeRTOS/tasks.c ****     }
3995:./FreeRTOS/tasks.c **** 
3996:./FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3997:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3998:./FreeRTOS/tasks.c **** 
3999:./FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
4000:./FreeRTOS/tasks.c **** {
  96              		.loc 1 4000 1 is_stmt 1 view -0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              		@ link register save eliminated.
4001:./FreeRTOS/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 73


 101              		.loc 1 4001 5 view .LVU23
 102              		.loc 1 4001 9 is_stmt 0 view .LVU24
 103 0000 074B     		ldr	r3, .L12
 104 0002 1B68     		ldr	r3, [r3]
 105 0004 1B68     		ldr	r3, [r3]
 106              		.loc 1 4001 7 view .LVU25
 107 0006 23B9     		cbnz	r3, .L10
4002:./FreeRTOS/tasks.c ****     {
4003:./FreeRTOS/tasks.c ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
4004:./FreeRTOS/tasks.c ****          * the maximum possible value so it is  extremely unlikely that the
4005:./FreeRTOS/tasks.c ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
4006:./FreeRTOS/tasks.c ****          * there is an item in the delayed list. */
4007:./FreeRTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 108              		.loc 1 4007 9 is_stmt 1 view .LVU26
 109              		.loc 1 4007 30 is_stmt 0 view .LVU27
 110 0008 064B     		ldr	r3, .L12+4
 111 000a 4FF0FF32 		mov	r2, #-1
 112 000e 1A60     		str	r2, [r3]
 113 0010 7047     		bx	lr
 114              	.L10:
4008:./FreeRTOS/tasks.c ****     }
4009:./FreeRTOS/tasks.c ****     else
4010:./FreeRTOS/tasks.c ****     {
4011:./FreeRTOS/tasks.c ****         /* The new current delayed list is not empty, get the value of
4012:./FreeRTOS/tasks.c ****          * the item at the head of the delayed list.  This is the time at
4013:./FreeRTOS/tasks.c ****          * which the task at the head of the delayed list should be removed
4014:./FreeRTOS/tasks.c ****          * from the Blocked state. */
4015:./FreeRTOS/tasks.c ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 115              		.loc 1 4015 9 is_stmt 1 view .LVU28
 116              		.loc 1 4015 32 is_stmt 0 view .LVU29
 117 0012 034B     		ldr	r3, .L12
 118 0014 1B68     		ldr	r3, [r3]
 119 0016 DB68     		ldr	r3, [r3, #12]
 120 0018 1A68     		ldr	r2, [r3]
 121              		.loc 1 4015 30 view .LVU30
 122 001a 024B     		ldr	r3, .L12+4
 123 001c 1A60     		str	r2, [r3]
4016:./FreeRTOS/tasks.c ****     }
4017:./FreeRTOS/tasks.c **** }
 124              		.loc 1 4017 1 view .LVU31
 125 001e 7047     		bx	lr
 126              	.L13:
 127              		.align	2
 128              	.L12:
 129 0020 00000000 		.word	pxDelayedTaskList
 130 0024 00000000 		.word	xNextTaskUnblockTime
 131              		.cfi_endproc
 132              	.LFE71:
 134              		.section	.text.prvDeleteTCB,"ax",%progbits
 135              		.align	1
 136              		.syntax unified
 137              		.thumb
 138              		.thumb_func
 140              	prvDeleteTCB:
 141              	.LVL8:
 142              	.LFB70:
3947:./FreeRTOS/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 74


 143              		.loc 1 3947 5 is_stmt 1 view -0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
3947:./FreeRTOS/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
 147              		.loc 1 3947 5 is_stmt 0 view .LVU33
 148 0000 10B5     		push	{r4, lr}
 149              	.LCFI0:
 150              		.cfi_def_cfa_offset 8
 151              		.cfi_offset 4, -8
 152              		.cfi_offset 14, -4
 153 0002 0446     		mov	r4, r0
3951:./FreeRTOS/tasks.c **** 
 154              		.loc 1 3951 9 is_stmt 1 view .LVU34
3964:./FreeRTOS/tasks.c ****             vPortFree( pxTCB );
 155              		.loc 1 3964 13 view .LVU35
 156 0004 006B     		ldr	r0, [r0, #48]
 157              	.LVL9:
3964:./FreeRTOS/tasks.c ****             vPortFree( pxTCB );
 158              		.loc 1 3964 13 is_stmt 0 view .LVU36
 159 0006 FFF7FEFF 		bl	vPortFree
 160              	.LVL10:
3965:./FreeRTOS/tasks.c ****         }
 161              		.loc 1 3965 13 is_stmt 1 view .LVU37
 162 000a 2046     		mov	r0, r4
 163 000c FFF7FEFF 		bl	vPortFree
 164              	.LVL11:
3994:./FreeRTOS/tasks.c **** 
 165              		.loc 1 3994 5 is_stmt 0 view .LVU38
 166 0010 10BD     		pop	{r4, pc}
3994:./FreeRTOS/tasks.c **** 
 167              		.loc 1 3994 5 view .LVU39
 168              		.cfi_endproc
 169              	.LFE70:
 171              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 172              		.align	1
 173              		.syntax unified
 174              		.thumb
 175              		.thumb_func
 177              	prvInitialiseNewTask:
 178              	.LVL12:
 179              	.LFB35:
 824:./FreeRTOS/tasks.c ****     StackType_t * pxTopOfStack;
 180              		.loc 1 824 1 is_stmt 1 view -0
 181              		.cfi_startproc
 182              		@ args = 16, pretend = 0, frame = 0
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 824:./FreeRTOS/tasks.c ****     StackType_t * pxTopOfStack;
 184              		.loc 1 824 1 is_stmt 0 view .LVU41
 185 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 186              	.LCFI1:
 187              		.cfi_def_cfa_offset 32
 188              		.cfi_offset 3, -32
 189              		.cfi_offset 4, -28
 190              		.cfi_offset 5, -24
 191              		.cfi_offset 6, -20
 192              		.cfi_offset 7, -16
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 75


 193              		.cfi_offset 8, -12
 194              		.cfi_offset 9, -8
 195              		.cfi_offset 14, -4
 196 0004 0746     		mov	r7, r0
 197 0006 9846     		mov	r8, r3
 198 0008 089D     		ldr	r5, [sp, #32]
 199 000a DDF82490 		ldr	r9, [sp, #36]
 200 000e 0A9C     		ldr	r4, [sp, #40]
 825:./FreeRTOS/tasks.c ****     UBaseType_t x;
 201              		.loc 1 825 5 is_stmt 1 view .LVU42
 826:./FreeRTOS/tasks.c **** 
 202              		.loc 1 826 5 view .LVU43
 857:./FreeRTOS/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 203              		.loc 1 857 9 view .LVU44
 857:./FreeRTOS/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 204              		.loc 1 857 35 is_stmt 0 view .LVU45
 205 0010 266B     		ldr	r6, [r4, #48]
 857:./FreeRTOS/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 206              		.loc 1 857 44 view .LVU46
 207 0012 02F18042 		add	r2, r2, #1073741824
 208              	.LVL13:
 857:./FreeRTOS/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 209              		.loc 1 857 44 view .LVU47
 210 0016 013A     		subs	r2, r2, #1
 211              	.LVL14:
 857:./FreeRTOS/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 212              		.loc 1 857 22 view .LVU48
 213 0018 06EB8206 		add	r6, r6, r2, lsl #2
 214              	.LVL15:
 858:./FreeRTOS/tasks.c **** 
 215              		.loc 1 858 9 is_stmt 1 view .LVU49
 858:./FreeRTOS/tasks.c **** 
 216              		.loc 1 858 87 is_stmt 0 view .LVU50
 217 001c 26F00706 		bic	r6, r6, #7
 218              	.LVL16:
 861:./FreeRTOS/tasks.c **** 
 219              		.loc 1 861 130 is_stmt 1 view .LVU51
 885:./FreeRTOS/tasks.c ****     {
 220              		.loc 1 885 5 view .LVU52
 885:./FreeRTOS/tasks.c ****     {
 221              		.loc 1 885 7 is_stmt 0 view .LVU53
 222 0020 91B1     		cbz	r1, .L18
 223 0022 0846     		mov	r0, r1
 224              	.LVL17:
 887:./FreeRTOS/tasks.c ****         {
 225              		.loc 1 887 16 view .LVU54
 226 0024 4FF0000C 		mov	ip, #0
 227              	.LVL18:
 228              	.L17:
 887:./FreeRTOS/tasks.c ****         {
 229              		.loc 1 887 39 is_stmt 1 discriminator 1 view .LVU55
 230 0028 BCF10F0F 		cmp	ip, #15
 231 002c 09D8     		bhi	.L19
 889:./FreeRTOS/tasks.c **** 
 232              		.loc 1 889 13 view .LVU56
 889:./FreeRTOS/tasks.c **** 
 233              		.loc 1 889 47 is_stmt 0 view .LVU57
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 76


 234 002e 10F80C20 		ldrb	r2, [r0, ip]	@ zero_extendqisi2
 889:./FreeRTOS/tasks.c **** 
 235              		.loc 1 889 39 view .LVU58
 236 0032 04EB0C03 		add	r3, r4, ip
 237 0036 83F83420 		strb	r2, [r3, #52]
 894:./FreeRTOS/tasks.c ****             {
 238              		.loc 1 894 13 is_stmt 1 view .LVU59
 894:./FreeRTOS/tasks.c ****             {
 239              		.loc 1 894 15 is_stmt 0 view .LVU60
 240 003a 12B1     		cbz	r2, .L19
 900:./FreeRTOS/tasks.c ****             }
 241              		.loc 1 900 41 is_stmt 1 discriminator 2 view .LVU61
 887:./FreeRTOS/tasks.c ****         {
 242              		.loc 1 887 83 discriminator 2 view .LVU62
 243 003c 0CF1010C 		add	ip, ip, #1
 244              	.LVL19:
 887:./FreeRTOS/tasks.c ****         {
 245              		.loc 1 887 83 is_stmt 0 discriminator 2 view .LVU63
 246 0040 F2E7     		b	.L17
 247              	.LVL20:
 248              	.L19:
 906:./FreeRTOS/tasks.c ****     }
 249              		.loc 1 906 9 is_stmt 1 view .LVU64
 906:./FreeRTOS/tasks.c ****     }
 250              		.loc 1 906 61 is_stmt 0 view .LVU65
 251 0042 0023     		movs	r3, #0
 252 0044 84F84330 		strb	r3, [r4, #67]
 253              	.LVL21:
 254              	.L18:
 910:./FreeRTOS/tasks.c ****     }
 255              		.loc 1 910 33 is_stmt 1 view .LVU66
 914:./FreeRTOS/tasks.c **** 
 256              		.loc 1 914 54 view .LVU67
 916:./FreeRTOS/tasks.c ****     {
 257              		.loc 1 916 5 view .LVU68
 916:./FreeRTOS/tasks.c ****     {
 258              		.loc 1 916 7 is_stmt 0 view .LVU69
 259 0048 1F2D     		cmp	r5, #31
 260 004a 00D9     		bls	.L21
 918:./FreeRTOS/tasks.c ****     }
 261              		.loc 1 918 20 view .LVU70
 262 004c 1F25     		movs	r5, #31
 263              	.L21:
 264              	.LVL22:
 922:./FreeRTOS/tasks.c ****     }
 265              		.loc 1 922 33 is_stmt 1 view .LVU71
 925:./FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 266              		.loc 1 925 5 view .LVU72
 925:./FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 267              		.loc 1 925 26 is_stmt 0 view .LVU73
 268 004e E562     		str	r5, [r4, #44]
 928:./FreeRTOS/tasks.c ****     }
 269              		.loc 1 928 9 is_stmt 1 view .LVU74
 928:./FreeRTOS/tasks.c ****     }
 270              		.loc 1 928 34 is_stmt 0 view .LVU75
 271 0050 6564     		str	r5, [r4, #68]
 932:./FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 77


 272              		.loc 1 932 5 is_stmt 1 view .LVU76
 273 0052 201D     		adds	r0, r4, #4
 274 0054 FFF7FEFF 		bl	vListInitialiseItem
 275              	.LVL23:
 933:./FreeRTOS/tasks.c **** 
 276              		.loc 1 933 5 view .LVU77
 277 0058 04F11800 		add	r0, r4, #24
 278 005c FFF7FEFF 		bl	vListInitialiseItem
 279              	.LVL24:
 937:./FreeRTOS/tasks.c **** 
 280              		.loc 1 937 5 view .LVU78
 281 0060 2461     		str	r4, [r4, #16]
 940:./FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 282              		.loc 1 940 5 view .LVU79
 283 0062 C5F12005 		rsb	r5, r5, #32
 284              	.LVL25:
 940:./FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 285              		.loc 1 940 5 is_stmt 0 view .LVU80
 286 0066 A561     		str	r5, [r4, #24]
 941:./FreeRTOS/tasks.c **** 
 287              		.loc 1 941 5 is_stmt 1 view .LVU81
 288 0068 6462     		str	r4, [r4, #36]
 950:./FreeRTOS/tasks.c ****     }
 289              		.loc 1 950 9 view .LVU82
1007:./FreeRTOS/tasks.c ****         }
 290              		.loc 1 1007 13 view .LVU83
1007:./FreeRTOS/tasks.c ****         }
 291              		.loc 1 1007 38 is_stmt 0 view .LVU84
 292 006a 4246     		mov	r2, r8
 293 006c 3946     		mov	r1, r7
 294 006e 3046     		mov	r0, r6
 295 0070 FFF7FEFF 		bl	pxPortInitialiseStack
 296              	.LVL26:
1007:./FreeRTOS/tasks.c ****         }
 297              		.loc 1 1007 36 view .LVU85
 298 0074 2060     		str	r0, [r4]
1013:./FreeRTOS/tasks.c ****     {
 299              		.loc 1 1013 5 is_stmt 1 view .LVU86
1013:./FreeRTOS/tasks.c ****     {
 300              		.loc 1 1013 7 is_stmt 0 view .LVU87
 301 0076 B9F1000F 		cmp	r9, #0
 302 007a 01D0     		beq	.L16
1017:./FreeRTOS/tasks.c ****     }
 303              		.loc 1 1017 9 is_stmt 1 view .LVU88
1017:./FreeRTOS/tasks.c ****     }
 304              		.loc 1 1017 24 is_stmt 0 view .LVU89
 305 007c C9F80040 		str	r4, [r9]
1021:./FreeRTOS/tasks.c ****     }
 306              		.loc 1 1021 33 is_stmt 1 view .LVU90
 307              	.L16:
1023:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 308              		.loc 1 1023 1 is_stmt 0 view .LVU91
 309 0080 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
1023:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 310              		.loc 1 1023 1 view .LVU92
 311              		.cfi_endproc
 312              	.LFE35:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 78


 314              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 315              		.align	1
 316              		.syntax unified
 317              		.thumb
 318              		.thumb_func
 320              	prvInitialiseTaskLists:
 321              	.LFB68:
3658:./FreeRTOS/tasks.c ****     UBaseType_t uxPriority;
 322              		.loc 1 3658 1 is_stmt 1 view -0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326 0000 38B5     		push	{r3, r4, r5, lr}
 327              	.LCFI2:
 328              		.cfi_def_cfa_offset 16
 329              		.cfi_offset 3, -16
 330              		.cfi_offset 4, -12
 331              		.cfi_offset 5, -8
 332              		.cfi_offset 14, -4
3659:./FreeRTOS/tasks.c **** 
 333              		.loc 1 3659 5 view .LVU94
3661:./FreeRTOS/tasks.c ****     {
 334              		.loc 1 3661 5 view .LVU95
 335              	.LVL27:
3661:./FreeRTOS/tasks.c ****     {
 336              		.loc 1 3661 21 is_stmt 0 view .LVU96
 337 0002 0024     		movs	r4, #0
3661:./FreeRTOS/tasks.c ****     {
 338              		.loc 1 3661 5 view .LVU97
 339 0004 07E0     		b	.L27
 340              	.LVL28:
 341              	.L28:
3663:./FreeRTOS/tasks.c ****     }
 342              		.loc 1 3663 9 is_stmt 1 discriminator 3 view .LVU98
 343 0006 04EB8402 		add	r2, r4, r4, lsl #2
 344 000a 9300     		lsls	r3, r2, #2
 345 000c 0E48     		ldr	r0, .L30
 346 000e 1844     		add	r0, r0, r3
 347 0010 FFF7FEFF 		bl	vListInitialise
 348              	.LVL29:
3661:./FreeRTOS/tasks.c ****     {
 349              		.loc 1 3661 104 discriminator 3 view .LVU99
 350 0014 0134     		adds	r4, r4, #1
 351              	.LVL30:
 352              	.L27:
3661:./FreeRTOS/tasks.c ****     {
 353              		.loc 1 3661 54 discriminator 1 view .LVU100
 354 0016 1F2C     		cmp	r4, #31
 355 0018 F5D9     		bls	.L28
3666:./FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
 356              		.loc 1 3666 5 view .LVU101
 357 001a 0C4D     		ldr	r5, .L30+4
 358 001c 2846     		mov	r0, r5
 359 001e FFF7FEFF 		bl	vListInitialise
 360              	.LVL31:
3667:./FreeRTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
 361              		.loc 1 3667 5 view .LVU102
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 79


 362 0022 0B4C     		ldr	r4, .L30+8
 363              	.LVL32:
3667:./FreeRTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
 364              		.loc 1 3667 5 is_stmt 0 view .LVU103
 365 0024 2046     		mov	r0, r4
 366 0026 FFF7FEFF 		bl	vListInitialise
 367              	.LVL33:
3668:./FreeRTOS/tasks.c **** 
 368              		.loc 1 3668 5 is_stmt 1 view .LVU104
 369 002a 0A48     		ldr	r0, .L30+12
 370 002c FFF7FEFF 		bl	vListInitialise
 371              	.LVL34:
3672:./FreeRTOS/tasks.c ****     }
 372              		.loc 1 3672 9 view .LVU105
 373 0030 0948     		ldr	r0, .L30+16
 374 0032 FFF7FEFF 		bl	vListInitialise
 375              	.LVL35:
3678:./FreeRTOS/tasks.c ****     }
 376              		.loc 1 3678 9 view .LVU106
 377 0036 0948     		ldr	r0, .L30+20
 378 0038 FFF7FEFF 		bl	vListInitialise
 379              	.LVL36:
3684:./FreeRTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 380              		.loc 1 3684 5 view .LVU107
3684:./FreeRTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 381              		.loc 1 3684 23 is_stmt 0 view .LVU108
 382 003c 084B     		ldr	r3, .L30+24
 383 003e 1D60     		str	r5, [r3]
3685:./FreeRTOS/tasks.c **** }
 384              		.loc 1 3685 5 is_stmt 1 view .LVU109
3685:./FreeRTOS/tasks.c **** }
 385              		.loc 1 3685 31 is_stmt 0 view .LVU110
 386 0040 084B     		ldr	r3, .L30+28
 387 0042 1C60     		str	r4, [r3]
3686:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 388              		.loc 1 3686 1 view .LVU111
 389 0044 38BD     		pop	{r3, r4, r5, pc}
 390              	.L31:
 391 0046 00BF     		.align	2
 392              	.L30:
 393 0048 00000000 		.word	pxReadyTasksLists
 394 004c 00000000 		.word	xDelayedTaskList1
 395 0050 00000000 		.word	xDelayedTaskList2
 396 0054 00000000 		.word	xPendingReadyList
 397 0058 00000000 		.word	xTasksWaitingTermination
 398 005c 00000000 		.word	xSuspendedTaskList
 399 0060 00000000 		.word	pxDelayedTaskList
 400 0064 00000000 		.word	pxOverflowDelayedTaskList
 401              		.cfi_endproc
 402              	.LFE68:
 404              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 405              		.align	1
 406              		.syntax unified
 407              		.thumb
 408              		.thumb_func
 410              	prvAddNewTaskToReadyList:
 411              	.LVL37:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 80


 412              	.LFB36:
1027:./FreeRTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
 413              		.loc 1 1027 1 is_stmt 1 view -0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
1027:./FreeRTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
 417              		.loc 1 1027 1 is_stmt 0 view .LVU113
 418 0000 10B5     		push	{r4, lr}
 419              	.LCFI3:
 420              		.cfi_def_cfa_offset 8
 421              		.cfi_offset 4, -8
 422              		.cfi_offset 14, -4
 423 0002 0446     		mov	r4, r0
1030:./FreeRTOS/tasks.c ****     {
 424              		.loc 1 1030 5 is_stmt 1 view .LVU114
 425 0004 FFF7FEFF 		bl	vPortEnterCritical
 426              	.LVL38:
1032:./FreeRTOS/tasks.c **** 
 427              		.loc 1 1032 9 view .LVU115
1032:./FreeRTOS/tasks.c **** 
 428              		.loc 1 1032 31 is_stmt 0 view .LVU116
 429 0008 284A     		ldr	r2, .L39
 430 000a 1368     		ldr	r3, [r2]
 431 000c 0133     		adds	r3, r3, #1
 432 000e 1360     		str	r3, [r2]
1034:./FreeRTOS/tasks.c ****         {
 433              		.loc 1 1034 9 is_stmt 1 view .LVU117
1034:./FreeRTOS/tasks.c ****         {
 434              		.loc 1 1034 26 is_stmt 0 view .LVU118
 435 0010 274B     		ldr	r3, .L39+4
 436 0012 1B68     		ldr	r3, [r3]
1034:./FreeRTOS/tasks.c ****         {
 437              		.loc 1 1034 11 view .LVU119
 438 0014 5BB1     		cbz	r3, .L37
1057:./FreeRTOS/tasks.c ****             {
 439              		.loc 1 1057 13 is_stmt 1 view .LVU120
1057:./FreeRTOS/tasks.c ****             {
 440              		.loc 1 1057 35 is_stmt 0 view .LVU121
 441 0016 274B     		ldr	r3, .L39+8
 442 0018 1B68     		ldr	r3, [r3]
1057:./FreeRTOS/tasks.c ****             {
 443              		.loc 1 1057 15 view .LVU122
 444 001a 6BB9     		cbnz	r3, .L34
1059:./FreeRTOS/tasks.c ****                 {
 445              		.loc 1 1059 17 is_stmt 1 view .LVU123
1059:./FreeRTOS/tasks.c ****                 {
 446              		.loc 1 1059 33 is_stmt 0 view .LVU124
 447 001c 244B     		ldr	r3, .L39+4
 448 001e 1B68     		ldr	r3, [r3]
 449 0020 DA6A     		ldr	r2, [r3, #44]
1059:./FreeRTOS/tasks.c ****                 {
 450              		.loc 1 1059 57 view .LVU125
 451 0022 E36A     		ldr	r3, [r4, #44]
1059:./FreeRTOS/tasks.c ****                 {
 452              		.loc 1 1059 19 view .LVU126
 453 0024 9A42     		cmp	r2, r3
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 81


 454 0026 07D8     		bhi	.L34
1061:./FreeRTOS/tasks.c ****                 }
 455              		.loc 1 1061 21 is_stmt 1 view .LVU127
1061:./FreeRTOS/tasks.c ****                 }
 456              		.loc 1 1061 34 is_stmt 0 view .LVU128
 457 0028 214B     		ldr	r3, .L39+4
 458 002a 1C60     		str	r4, [r3]
 459 002c 04E0     		b	.L34
 460              	.L37:
1038:./FreeRTOS/tasks.c **** 
 461              		.loc 1 1038 13 is_stmt 1 view .LVU129
1038:./FreeRTOS/tasks.c **** 
 462              		.loc 1 1038 26 is_stmt 0 view .LVU130
 463 002e 204B     		ldr	r3, .L39+4
 464 0030 1C60     		str	r4, [r3]
1040:./FreeRTOS/tasks.c ****             {
 465              		.loc 1 1040 13 is_stmt 1 view .LVU131
1040:./FreeRTOS/tasks.c ****             {
 466              		.loc 1 1040 40 is_stmt 0 view .LVU132
 467 0032 1368     		ldr	r3, [r2]
1040:./FreeRTOS/tasks.c ****             {
 468              		.loc 1 1040 15 view .LVU133
 469 0034 012B     		cmp	r3, #1
 470 0036 36D0     		beq	.L38
 471              	.L34:
1070:./FreeRTOS/tasks.c ****             }
 472              		.loc 1 1070 41 is_stmt 1 view .LVU134
1074:./FreeRTOS/tasks.c **** 
 473              		.loc 1 1074 9 view .LVU135
1074:./FreeRTOS/tasks.c **** 
 474              		.loc 1 1074 21 is_stmt 0 view .LVU136
 475 0038 1F4A     		ldr	r2, .L39+12
 476 003a 1368     		ldr	r3, [r2]
 477 003c 0133     		adds	r3, r3, #1
 478 003e 1360     		str	r3, [r2]
1082:./FreeRTOS/tasks.c **** 
 479              		.loc 1 1082 37 is_stmt 1 view .LVU137
1084:./FreeRTOS/tasks.c **** 
 480              		.loc 1 1084 9 view .LVU138
1084:./FreeRTOS/tasks.c **** 
 481              		.loc 1 1084 9 view .LVU139
 482 0040 E36A     		ldr	r3, [r4, #44]
 483 0042 0122     		movs	r2, #1
 484 0044 9A40     		lsls	r2, r2, r3
 485 0046 1D49     		ldr	r1, .L39+16
 486 0048 0868     		ldr	r0, [r1]
 487 004a 0243     		orrs	r2, r2, r0
 488 004c 0A60     		str	r2, [r1]
 489              	.LBB33:
1084:./FreeRTOS/tasks.c **** 
 490              		.loc 1 1084 9 view .LVU140
 491 004e 1C4A     		ldr	r2, .L39+20
 492 0050 03EB8303 		add	r3, r3, r3, lsl #2
 493 0054 02EB8303 		add	r3, r2, r3, lsl #2
 494 0058 5B68     		ldr	r3, [r3, #4]
 495              	.LVL39:
1084:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 82


 496              		.loc 1 1084 9 view .LVU141
1084:./FreeRTOS/tasks.c **** 
 497              		.loc 1 1084 9 view .LVU142
1084:./FreeRTOS/tasks.c **** 
 498              		.loc 1 1084 9 view .LVU143
 499 005a A360     		str	r3, [r4, #8]
1084:./FreeRTOS/tasks.c **** 
 500              		.loc 1 1084 9 view .LVU144
 501 005c 9868     		ldr	r0, [r3, #8]
 502 005e E060     		str	r0, [r4, #12]
1084:./FreeRTOS/tasks.c **** 
 503              		.loc 1 1084 9 view .LVU145
 504 0060 211D     		adds	r1, r4, #4
 505 0062 4160     		str	r1, [r0, #4]
1084:./FreeRTOS/tasks.c **** 
 506              		.loc 1 1084 9 view .LVU146
 507 0064 9960     		str	r1, [r3, #8]
1084:./FreeRTOS/tasks.c **** 
 508              		.loc 1 1084 9 view .LVU147
 509 0066 E36A     		ldr	r3, [r4, #44]
 510              	.LVL40:
1084:./FreeRTOS/tasks.c **** 
 511              		.loc 1 1084 9 is_stmt 0 view .LVU148
 512 0068 03EB8301 		add	r1, r3, r3, lsl #2
 513 006c 8800     		lsls	r0, r1, #2
 514 006e 02EB8101 		add	r1, r2, r1, lsl #2
 515 0072 6161     		str	r1, [r4, #20]
1084:./FreeRTOS/tasks.c **** 
 516              		.loc 1 1084 9 is_stmt 1 view .LVU149
 517 0074 1158     		ldr	r1, [r2, r0]
 518 0076 0131     		adds	r1, r1, #1
 519 0078 1150     		str	r1, [r2, r0]
 520              	.LBE33:
1084:./FreeRTOS/tasks.c **** 
 521              		.loc 1 1084 9 view .LVU150
1084:./FreeRTOS/tasks.c **** 
 522              		.loc 1 1084 42 view .LVU151
1086:./FreeRTOS/tasks.c ****     }
 523              		.loc 1 1086 9 view .LVU152
1088:./FreeRTOS/tasks.c **** 
 524              		.loc 1 1088 5 view .LVU153
 525 007a FFF7FEFF 		bl	vPortExitCritical
 526              	.LVL41:
1090:./FreeRTOS/tasks.c ****     {
 527              		.loc 1 1090 5 view .LVU154
1090:./FreeRTOS/tasks.c ****     {
 528              		.loc 1 1090 27 is_stmt 0 view .LVU155
 529 007e 0D4B     		ldr	r3, .L39+8
 530 0080 1B68     		ldr	r3, [r3]
1090:./FreeRTOS/tasks.c ****     {
 531              		.loc 1 1090 7 view .LVU156
 532 0082 7BB1     		cbz	r3, .L32
1094:./FreeRTOS/tasks.c ****         {
 533              		.loc 1 1094 9 is_stmt 1 view .LVU157
1094:./FreeRTOS/tasks.c ****         {
 534              		.loc 1 1094 25 is_stmt 0 view .LVU158
 535 0084 0A4B     		ldr	r3, .L39+4
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 83


 536 0086 1B68     		ldr	r3, [r3]
 537 0088 DA6A     		ldr	r2, [r3, #44]
1094:./FreeRTOS/tasks.c ****         {
 538              		.loc 1 1094 48 view .LVU159
 539 008a E36A     		ldr	r3, [r4, #44]
1094:./FreeRTOS/tasks.c ****         {
 540              		.loc 1 1094 11 view .LVU160
 541 008c 9A42     		cmp	r2, r3
 542 008e 09D2     		bcs	.L32
1096:./FreeRTOS/tasks.c ****         }
 543              		.loc 1 1096 13 is_stmt 1 view .LVU161
 544 0090 4FF0E023 		mov	r3, #-536813568
 545 0094 4FF08052 		mov	r2, #268435456
 546 0098 C3F8042D 		str	r2, [r3, #3332]
1096:./FreeRTOS/tasks.c ****         }
 547              		.loc 1 1096 13 view .LVU162
 548              		.syntax unified
 549              	@ 1096 "./FreeRTOS/tasks.c" 1
 550 009c BFF34F8F 		dsb
 551              	@ 0 "" 2
1096:./FreeRTOS/tasks.c ****         }
 552              		.loc 1 1096 13 view .LVU163
 553              	@ 1096 "./FreeRTOS/tasks.c" 1
 554 00a0 BFF36F8F 		isb
 555              	@ 0 "" 2
1096:./FreeRTOS/tasks.c ****         }
 556              		.loc 1 1096 44 view .LVU164
1105:./FreeRTOS/tasks.c ****     }
 557              		.loc 1 1105 33 view .LVU165
 558              		.thumb
 559              		.syntax unified
 560              	.L32:
1107:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 561              		.loc 1 1107 1 is_stmt 0 view .LVU166
 562 00a4 10BD     		pop	{r4, pc}
 563              	.LVL42:
 564              	.L38:
1045:./FreeRTOS/tasks.c ****             }
 565              		.loc 1 1045 17 is_stmt 1 view .LVU167
 566 00a6 FFF7FEFF 		bl	prvInitialiseTaskLists
 567              	.LVL43:
 568 00aa C5E7     		b	.L34
 569              	.L40:
 570              		.align	2
 571              	.L39:
 572 00ac 00000000 		.word	uxCurrentNumberOfTasks
 573 00b0 00000000 		.word	pxCurrentTCB
 574 00b4 00000000 		.word	xSchedulerRunning
 575 00b8 00000000 		.word	uxTaskNumber
 576 00bc 00000000 		.word	uxTopReadyPriority
 577 00c0 00000000 		.word	pxReadyTasksLists
 578              		.cfi_endproc
 579              	.LFE36:
 581              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 582              		.align	1
 583              		.syntax unified
 584              		.thumb
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 84


 585              		.thumb_func
 587              	prvCheckTasksWaitingTermination:
 588              	.LFB69:
3690:./FreeRTOS/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 589              		.loc 1 3690 1 view -0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
 592              		@ frame_needed = 0, uses_anonymous_args = 0
 593              	.LBB34:
3695:./FreeRTOS/tasks.c **** 
 594              		.loc 1 3695 9 view .LVU169
3699:./FreeRTOS/tasks.c ****         {
 595              		.loc 1 3699 9 view .LVU170
3699:./FreeRTOS/tasks.c ****         {
 596              		.loc 1 3699 45 view .LVU171
 597 0000 0F4B     		ldr	r3, .L48
 598 0002 1B68     		ldr	r3, [r3]
 599 0004 D3B1     		cbz	r3, .L47
 600              	.LBE34:
3690:./FreeRTOS/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 601              		.loc 1 3690 1 is_stmt 0 view .LVU172
 602 0006 10B5     		push	{r4, lr}
 603              	.LCFI4:
 604              		.cfi_def_cfa_offset 8
 605              		.cfi_offset 4, -8
 606              		.cfi_offset 14, -4
 607              	.L43:
 608              	.LBB35:
3701:./FreeRTOS/tasks.c ****             {
 609              		.loc 1 3701 13 is_stmt 1 view .LVU173
 610 0008 FFF7FEFF 		bl	vPortEnterCritical
 611              	.LVL44:
3703:./FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 612              		.loc 1 3703 17 view .LVU174
3703:./FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 613              		.loc 1 3703 25 is_stmt 0 view .LVU175
 614 000c 0D4B     		ldr	r3, .L48+4
 615 000e DB68     		ldr	r3, [r3, #12]
3703:./FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 616              		.loc 1 3703 23 view .LVU176
 617 0010 DC68     		ldr	r4, [r3, #12]
 618              	.LVL45:
3704:./FreeRTOS/tasks.c ****                 --uxCurrentNumberOfTasks;
 619              		.loc 1 3704 17 is_stmt 1 view .LVU177
3704:./FreeRTOS/tasks.c ****                 --uxCurrentNumberOfTasks;
 620              		.loc 1 3704 26 is_stmt 0 view .LVU178
 621 0012 201D     		adds	r0, r4, #4
 622 0014 FFF7FEFF 		bl	uxListRemove
 623              	.LVL46:
3705:./FreeRTOS/tasks.c ****                 --uxDeletedTasksWaitingCleanUp;
 624              		.loc 1 3705 17 is_stmt 1 view .LVU179
 625 0018 0B4A     		ldr	r2, .L48+8
 626 001a 1368     		ldr	r3, [r2]
 627 001c 013B     		subs	r3, r3, #1
 628 001e 1360     		str	r3, [r2]
3706:./FreeRTOS/tasks.c ****             }
 629              		.loc 1 3706 17 view .LVU180
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 85


 630 0020 074A     		ldr	r2, .L48
 631 0022 1368     		ldr	r3, [r2]
 632 0024 013B     		subs	r3, r3, #1
 633 0026 1360     		str	r3, [r2]
3708:./FreeRTOS/tasks.c **** 
 634              		.loc 1 3708 13 view .LVU181
 635 0028 FFF7FEFF 		bl	vPortExitCritical
 636              	.LVL47:
3710:./FreeRTOS/tasks.c ****         }
 637              		.loc 1 3710 13 view .LVU182
 638 002c 2046     		mov	r0, r4
 639 002e FFF7FEFF 		bl	prvDeleteTCB
 640              	.LVL48:
3699:./FreeRTOS/tasks.c ****         {
 641              		.loc 1 3699 45 view .LVU183
 642 0032 034B     		ldr	r3, .L48
 643 0034 1B68     		ldr	r3, [r3]
 644 0036 002B     		cmp	r3, #0
 645 0038 E6D1     		bne	.L43
 646              	.LBE35:
3714:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 647              		.loc 1 3714 1 is_stmt 0 view .LVU184
 648 003a 10BD     		pop	{r4, pc}
 649              	.LVL49:
 650              	.L47:
 651              	.LCFI5:
 652              		.cfi_def_cfa_offset 0
 653              		.cfi_restore 4
 654              		.cfi_restore 14
3714:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 655              		.loc 1 3714 1 view .LVU185
 656 003c 7047     		bx	lr
 657              	.L49:
 658 003e 00BF     		.align	2
 659              	.L48:
 660 0040 00000000 		.word	uxDeletedTasksWaitingCleanUp
 661 0044 00000000 		.word	xTasksWaitingTermination
 662 0048 00000000 		.word	uxCurrentNumberOfTasks
 663              		.cfi_endproc
 664              	.LFE69:
 666              		.section	.text.prvIdleTask,"ax",%progbits
 667              		.align	1
 668              		.syntax unified
 669              		.thumb
 670              		.thumb_func
 672              	prvIdleTask:
 673              	.LFB67:
3428:./FreeRTOS/tasks.c ****     /* Stop warnings. */
 674              		.loc 1 3428 1 is_stmt 1 view -0
 675              		.cfi_startproc
 676              		@ Volatile: function does not return.
 677              		@ args = 0, pretend = 0, frame = 0
 678              		@ frame_needed = 0, uses_anonymous_args = 0
 679              	.LVL50:
3428:./FreeRTOS/tasks.c ****     /* Stop warnings. */
 680              		.loc 1 3428 1 is_stmt 0 view .LVU187
 681 0000 08B5     		push	{r3, lr}
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 86


 682              	.LCFI6:
 683              		.cfi_def_cfa_offset 8
 684              		.cfi_offset 3, -8
 685              		.cfi_offset 14, -4
 686              	.LVL51:
 687              	.L51:
3430:./FreeRTOS/tasks.c **** 
 688              		.loc 1 3430 5 is_stmt 1 view .LVU188
3438:./FreeRTOS/tasks.c **** 
 689              		.loc 1 3438 67 view .LVU189
3440:./FreeRTOS/tasks.c ****     {
 690              		.loc 1 3440 5 view .LVU190
3444:./FreeRTOS/tasks.c **** 
 691              		.loc 1 3444 9 view .LVU191
 692 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 693              	.LVL52:
3467:./FreeRTOS/tasks.c ****             {
 694              		.loc 1 3467 13 view .LVU192
3467:./FreeRTOS/tasks.c ****             {
 695              		.loc 1 3467 17 is_stmt 0 view .LVU193
 696 0006 074B     		ldr	r3, .L54
 697 0008 1B68     		ldr	r3, [r3]
3467:./FreeRTOS/tasks.c ****             {
 698              		.loc 1 3467 15 view .LVU194
 699 000a 012B     		cmp	r3, #1
 700 000c F9D9     		bls	.L51
3469:./FreeRTOS/tasks.c ****             }
 701              		.loc 1 3469 17 is_stmt 1 view .LVU195
 702 000e 4FF0E023 		mov	r3, #-536813568
 703 0012 4FF08052 		mov	r2, #268435456
 704 0016 C3F8042D 		str	r2, [r3, #3332]
3469:./FreeRTOS/tasks.c ****             }
 705              		.loc 1 3469 17 view .LVU196
 706              		.syntax unified
 707              	@ 3469 "./FreeRTOS/tasks.c" 1
 708 001a BFF34F8F 		dsb
 709              	@ 0 "" 2
3469:./FreeRTOS/tasks.c ****             }
 710              		.loc 1 3469 17 view .LVU197
 711              	@ 3469 "./FreeRTOS/tasks.c" 1
 712 001e BFF36F8F 		isb
 713              	@ 0 "" 2
3469:./FreeRTOS/tasks.c ****             }
 714              		.loc 1 3469 28 view .LVU198
 715              		.thumb
 716              		.syntax unified
 717 0022 EEE7     		b	.L51
 718              	.L55:
 719              		.align	2
 720              	.L54:
 721 0024 00000000 		.word	pxReadyTasksLists
 722              		.cfi_endproc
 723              	.LFE67:
 725              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 726              		.align	1
 727              		.syntax unified
 728              		.thumb
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 87


 729              		.thumb_func
 731              	prvAddCurrentTaskToDelayedList:
 732              	.LVL53:
 733              	.LFB86:
4018:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4019:./FreeRTOS/tasks.c **** 
4020:./FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
4021:./FreeRTOS/tasks.c **** 
4022:./FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetCurrentTaskHandle( void )
4023:./FreeRTOS/tasks.c ****     {
4024:./FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
4025:./FreeRTOS/tasks.c **** 
4026:./FreeRTOS/tasks.c ****         /* A critical section is not required as this is not called from
4027:./FreeRTOS/tasks.c ****          * an interrupt and the current TCB will always be the same for any
4028:./FreeRTOS/tasks.c ****          * individual execution thread. */
4029:./FreeRTOS/tasks.c ****         xReturn = pxCurrentTCB;
4030:./FreeRTOS/tasks.c **** 
4031:./FreeRTOS/tasks.c ****         return xReturn;
4032:./FreeRTOS/tasks.c ****     }
4033:./FreeRTOS/tasks.c **** 
4034:./FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4035:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4036:./FreeRTOS/tasks.c **** 
4037:./FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4038:./FreeRTOS/tasks.c **** 
4039:./FreeRTOS/tasks.c ****     BaseType_t xTaskGetSchedulerState( void )
4040:./FreeRTOS/tasks.c ****     {
4041:./FreeRTOS/tasks.c ****         BaseType_t xReturn;
4042:./FreeRTOS/tasks.c **** 
4043:./FreeRTOS/tasks.c ****         if( xSchedulerRunning == pdFALSE )
4044:./FreeRTOS/tasks.c ****         {
4045:./FreeRTOS/tasks.c ****             xReturn = taskSCHEDULER_NOT_STARTED;
4046:./FreeRTOS/tasks.c ****         }
4047:./FreeRTOS/tasks.c ****         else
4048:./FreeRTOS/tasks.c ****         {
4049:./FreeRTOS/tasks.c ****             if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4050:./FreeRTOS/tasks.c ****             {
4051:./FreeRTOS/tasks.c ****                 xReturn = taskSCHEDULER_RUNNING;
4052:./FreeRTOS/tasks.c ****             }
4053:./FreeRTOS/tasks.c ****             else
4054:./FreeRTOS/tasks.c ****             {
4055:./FreeRTOS/tasks.c ****                 xReturn = taskSCHEDULER_SUSPENDED;
4056:./FreeRTOS/tasks.c ****             }
4057:./FreeRTOS/tasks.c ****         }
4058:./FreeRTOS/tasks.c **** 
4059:./FreeRTOS/tasks.c ****         return xReturn;
4060:./FreeRTOS/tasks.c ****     }
4061:./FreeRTOS/tasks.c **** 
4062:./FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4063:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4064:./FreeRTOS/tasks.c **** 
4065:./FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4066:./FreeRTOS/tasks.c **** 
4067:./FreeRTOS/tasks.c ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4068:./FreeRTOS/tasks.c ****     {
4069:./FreeRTOS/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4070:./FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 88


4071:./FreeRTOS/tasks.c **** 
4072:./FreeRTOS/tasks.c ****         /* If the mutex was given back by an interrupt while the queue was
4073:./FreeRTOS/tasks.c ****          * locked then the mutex holder might now be NULL.  _RB_ Is this still
4074:./FreeRTOS/tasks.c ****          * needed as interrupts can no longer use mutexes? */
4075:./FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
4076:./FreeRTOS/tasks.c ****         {
4077:./FreeRTOS/tasks.c ****             /* If the holder of the mutex has a priority below the priority of
4078:./FreeRTOS/tasks.c ****              * the task attempting to obtain the mutex then it will temporarily
4079:./FreeRTOS/tasks.c ****              * inherit the priority of the task attempting to obtain the mutex. */
4080:./FreeRTOS/tasks.c ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4081:./FreeRTOS/tasks.c ****             {
4082:./FreeRTOS/tasks.c ****                 /* Adjust the mutex holder state to account for its new
4083:./FreeRTOS/tasks.c ****                  * priority.  Only reset the event list item value if the value is
4084:./FreeRTOS/tasks.c ****                  * not being used for anything else. */
4085:./FreeRTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
4086:./FreeRTOS/tasks.c ****                 {
4087:./FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
4088:./FreeRTOS/tasks.c ****                 }
4089:./FreeRTOS/tasks.c ****                 else
4090:./FreeRTOS/tasks.c ****                 {
4091:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4092:./FreeRTOS/tasks.c ****                 }
4093:./FreeRTOS/tasks.c **** 
4094:./FreeRTOS/tasks.c ****                 /* If the task being modified is in the ready state it will need
4095:./FreeRTOS/tasks.c ****                  * to be moved into a new list. */
4096:./FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
4097:./FreeRTOS/tasks.c ****                 {
4098:./FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
4099:./FreeRTOS/tasks.c ****                     {
4100:./FreeRTOS/tasks.c ****                         /* It is known that the task is in its ready list so
4101:./FreeRTOS/tasks.c ****                          * there is no need to check again and the port level
4102:./FreeRTOS/tasks.c ****                          * reset macro can be called directly. */
4103:./FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
4104:./FreeRTOS/tasks.c ****                     }
4105:./FreeRTOS/tasks.c ****                     else
4106:./FreeRTOS/tasks.c ****                     {
4107:./FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4108:./FreeRTOS/tasks.c ****                     }
4109:./FreeRTOS/tasks.c **** 
4110:./FreeRTOS/tasks.c ****                     /* Inherit the priority before being moved into the new list. */
4111:./FreeRTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4112:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
4113:./FreeRTOS/tasks.c ****                 }
4114:./FreeRTOS/tasks.c ****                 else
4115:./FreeRTOS/tasks.c ****                 {
4116:./FreeRTOS/tasks.c ****                     /* Just inherit the priority. */
4117:./FreeRTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4118:./FreeRTOS/tasks.c ****                 }
4119:./FreeRTOS/tasks.c **** 
4120:./FreeRTOS/tasks.c ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4121:./FreeRTOS/tasks.c **** 
4122:./FreeRTOS/tasks.c ****                 /* Inheritance occurred. */
4123:./FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
4124:./FreeRTOS/tasks.c ****             }
4125:./FreeRTOS/tasks.c ****             else
4126:./FreeRTOS/tasks.c ****             {
4127:./FreeRTOS/tasks.c ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 89


4128:./FreeRTOS/tasks.c ****                 {
4129:./FreeRTOS/tasks.c ****                     /* The base priority of the mutex holder is lower than the
4130:./FreeRTOS/tasks.c ****                      * priority of the task attempting to take the mutex, but the
4131:./FreeRTOS/tasks.c ****                      * current priority of the mutex holder is not lower than the
4132:./FreeRTOS/tasks.c ****                      * priority of the task attempting to take the mutex.
4133:./FreeRTOS/tasks.c ****                      * Therefore the mutex holder must have already inherited a
4134:./FreeRTOS/tasks.c ****                      * priority, but inheritance would have occurred if that had
4135:./FreeRTOS/tasks.c ****                      * not been the case. */
4136:./FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
4137:./FreeRTOS/tasks.c ****                 }
4138:./FreeRTOS/tasks.c ****                 else
4139:./FreeRTOS/tasks.c ****                 {
4140:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4141:./FreeRTOS/tasks.c ****                 }
4142:./FreeRTOS/tasks.c ****             }
4143:./FreeRTOS/tasks.c ****         }
4144:./FreeRTOS/tasks.c ****         else
4145:./FreeRTOS/tasks.c ****         {
4146:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4147:./FreeRTOS/tasks.c ****         }
4148:./FreeRTOS/tasks.c **** 
4149:./FreeRTOS/tasks.c ****         return xReturn;
4150:./FreeRTOS/tasks.c ****     }
4151:./FreeRTOS/tasks.c **** 
4152:./FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4153:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4154:./FreeRTOS/tasks.c **** 
4155:./FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4156:./FreeRTOS/tasks.c **** 
4157:./FreeRTOS/tasks.c ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4158:./FreeRTOS/tasks.c ****     {
4159:./FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4160:./FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
4161:./FreeRTOS/tasks.c **** 
4162:./FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
4163:./FreeRTOS/tasks.c ****         {
4164:./FreeRTOS/tasks.c ****             /* A task can only have an inherited priority if it holds the mutex.
4165:./FreeRTOS/tasks.c ****              * If the mutex is held by a task then it cannot be given from an
4166:./FreeRTOS/tasks.c ****              * interrupt, and if a mutex is given by the holding task then it must
4167:./FreeRTOS/tasks.c ****              * be the running state task. */
4168:./FreeRTOS/tasks.c ****             configASSERT( pxTCB == pxCurrentTCB );
4169:./FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4170:./FreeRTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
4171:./FreeRTOS/tasks.c **** 
4172:./FreeRTOS/tasks.c ****             /* Has the holder of the mutex inherited the priority of another
4173:./FreeRTOS/tasks.c ****              * task? */
4174:./FreeRTOS/tasks.c ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4175:./FreeRTOS/tasks.c ****             {
4176:./FreeRTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held. */
4177:./FreeRTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4178:./FreeRTOS/tasks.c ****                 {
4179:./FreeRTOS/tasks.c ****                     /* A task can only have an inherited priority if it holds
4180:./FreeRTOS/tasks.c ****                      * the mutex.  If the mutex is held by a task then it cannot be
4181:./FreeRTOS/tasks.c ****                      * given from an interrupt, and if a mutex is given by the
4182:./FreeRTOS/tasks.c ****                      * holding task then it must be the running state task.  Remove
4183:./FreeRTOS/tasks.c ****                      * the holding task from the ready list. */
4184:./FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 90


4185:./FreeRTOS/tasks.c ****                     {
4186:./FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4187:./FreeRTOS/tasks.c ****                     }
4188:./FreeRTOS/tasks.c ****                     else
4189:./FreeRTOS/tasks.c ****                     {
4190:./FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4191:./FreeRTOS/tasks.c ****                     }
4192:./FreeRTOS/tasks.c **** 
4193:./FreeRTOS/tasks.c ****                     /* Disinherit the priority before adding the task into the
4194:./FreeRTOS/tasks.c ****                      * new  ready list. */
4195:./FreeRTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4196:./FreeRTOS/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
4197:./FreeRTOS/tasks.c **** 
4198:./FreeRTOS/tasks.c ****                     /* Reset the event list item value.  It cannot be in use for
4199:./FreeRTOS/tasks.c ****                      * any other purpose if this task is running, and it must be
4200:./FreeRTOS/tasks.c ****                      * running to give back the mutex. */
4201:./FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
4202:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
4203:./FreeRTOS/tasks.c **** 
4204:./FreeRTOS/tasks.c ****                     /* Return true to indicate that a context switch is required.
4205:./FreeRTOS/tasks.c ****                      * This is only actually required in the corner case whereby
4206:./FreeRTOS/tasks.c ****                      * multiple mutexes were held and the mutexes were given back
4207:./FreeRTOS/tasks.c ****                      * in an order different to that in which they were taken.
4208:./FreeRTOS/tasks.c ****                      * If a context switch did not occur when the first mutex was
4209:./FreeRTOS/tasks.c ****                      * returned, even if a task was waiting on it, then a context
4210:./FreeRTOS/tasks.c ****                      * switch should occur when the last mutex is returned whether
4211:./FreeRTOS/tasks.c ****                      * a task is waiting on it or not. */
4212:./FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
4213:./FreeRTOS/tasks.c ****                 }
4214:./FreeRTOS/tasks.c ****                 else
4215:./FreeRTOS/tasks.c ****                 {
4216:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4217:./FreeRTOS/tasks.c ****                 }
4218:./FreeRTOS/tasks.c ****             }
4219:./FreeRTOS/tasks.c ****             else
4220:./FreeRTOS/tasks.c ****             {
4221:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4222:./FreeRTOS/tasks.c ****             }
4223:./FreeRTOS/tasks.c ****         }
4224:./FreeRTOS/tasks.c ****         else
4225:./FreeRTOS/tasks.c ****         {
4226:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4227:./FreeRTOS/tasks.c ****         }
4228:./FreeRTOS/tasks.c **** 
4229:./FreeRTOS/tasks.c ****         return xReturn;
4230:./FreeRTOS/tasks.c ****     }
4231:./FreeRTOS/tasks.c **** 
4232:./FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4233:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4234:./FreeRTOS/tasks.c **** 
4235:./FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4236:./FreeRTOS/tasks.c **** 
4237:./FreeRTOS/tasks.c ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
4238:./FreeRTOS/tasks.c ****                                               UBaseType_t uxHighestPriorityWaitingTask )
4239:./FreeRTOS/tasks.c ****     {
4240:./FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4241:./FreeRTOS/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 91


4242:./FreeRTOS/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4243:./FreeRTOS/tasks.c **** 
4244:./FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
4245:./FreeRTOS/tasks.c ****         {
4246:./FreeRTOS/tasks.c ****             /* If pxMutexHolder is not NULL then the holder must hold at least
4247:./FreeRTOS/tasks.c ****              * one mutex. */
4248:./FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4249:./FreeRTOS/tasks.c **** 
4250:./FreeRTOS/tasks.c ****             /* Determine the priority to which the priority of the task that
4251:./FreeRTOS/tasks.c ****              * holds the mutex should be set.  This will be the greater of the
4252:./FreeRTOS/tasks.c ****              * holding task's base priority and the priority of the highest
4253:./FreeRTOS/tasks.c ****              * priority task that is waiting to obtain the mutex. */
4254:./FreeRTOS/tasks.c ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4255:./FreeRTOS/tasks.c ****             {
4256:./FreeRTOS/tasks.c ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
4257:./FreeRTOS/tasks.c ****             }
4258:./FreeRTOS/tasks.c ****             else
4259:./FreeRTOS/tasks.c ****             {
4260:./FreeRTOS/tasks.c ****                 uxPriorityToUse = pxTCB->uxBasePriority;
4261:./FreeRTOS/tasks.c ****             }
4262:./FreeRTOS/tasks.c **** 
4263:./FreeRTOS/tasks.c ****             /* Does the priority need to change? */
4264:./FreeRTOS/tasks.c ****             if( pxTCB->uxPriority != uxPriorityToUse )
4265:./FreeRTOS/tasks.c ****             {
4266:./FreeRTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held.  This is a
4267:./FreeRTOS/tasks.c ****                  * simplification in the priority inheritance implementation.  If
4268:./FreeRTOS/tasks.c ****                  * the task that holds the mutex is also holding other mutexes then
4269:./FreeRTOS/tasks.c ****                  * the other mutexes may have caused the priority inheritance. */
4270:./FreeRTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4271:./FreeRTOS/tasks.c ****                 {
4272:./FreeRTOS/tasks.c ****                     /* If a task has timed out because it already holds the
4273:./FreeRTOS/tasks.c ****                      * mutex it was trying to obtain then it cannot of inherited
4274:./FreeRTOS/tasks.c ****                      * its own priority. */
4275:./FreeRTOS/tasks.c ****                     configASSERT( pxTCB != pxCurrentTCB );
4276:./FreeRTOS/tasks.c **** 
4277:./FreeRTOS/tasks.c ****                     /* Disinherit the priority, remembering the previous
4278:./FreeRTOS/tasks.c ****                      * priority to facilitate determining the subject task's
4279:./FreeRTOS/tasks.c ****                      * state. */
4280:./FreeRTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
4281:./FreeRTOS/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
4282:./FreeRTOS/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
4283:./FreeRTOS/tasks.c **** 
4284:./FreeRTOS/tasks.c ****                     /* Only reset the event list item value if the value is not
4285:./FreeRTOS/tasks.c ****                      * being used for anything else. */
4286:./FreeRTOS/tasks.c ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
4287:./FreeRTOS/tasks.c ****                     {
4288:./FreeRTOS/tasks.c ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
4289:./FreeRTOS/tasks.c ****                     }
4290:./FreeRTOS/tasks.c ****                     else
4291:./FreeRTOS/tasks.c ****                     {
4292:./FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4293:./FreeRTOS/tasks.c ****                     }
4294:./FreeRTOS/tasks.c **** 
4295:./FreeRTOS/tasks.c ****                     /* If the running task is not the task that holds the mutex
4296:./FreeRTOS/tasks.c ****                      * then the task that holds the mutex could be in either the
4297:./FreeRTOS/tasks.c ****                      * Ready, Blocked or Suspended states.  Only remove the task
4298:./FreeRTOS/tasks.c ****                      * from its current state list if it is in the Ready state as
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 92


4299:./FreeRTOS/tasks.c ****                      * the task's priority is going to change and there is one
4300:./FreeRTOS/tasks.c ****                      * Ready list per priority. */
4301:./FreeRTOS/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
4302:./FreeRTOS/tasks.c ****                     {
4303:./FreeRTOS/tasks.c ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4304:./FreeRTOS/tasks.c ****                         {
4305:./FreeRTOS/tasks.c ****                             /* It is known that the task is in its ready list so
4306:./FreeRTOS/tasks.c ****                              * there is no need to check again and the port level
4307:./FreeRTOS/tasks.c ****                              * reset macro can be called directly. */
4308:./FreeRTOS/tasks.c ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4309:./FreeRTOS/tasks.c ****                         }
4310:./FreeRTOS/tasks.c ****                         else
4311:./FreeRTOS/tasks.c ****                         {
4312:./FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4313:./FreeRTOS/tasks.c ****                         }
4314:./FreeRTOS/tasks.c **** 
4315:./FreeRTOS/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
4316:./FreeRTOS/tasks.c ****                     }
4317:./FreeRTOS/tasks.c ****                     else
4318:./FreeRTOS/tasks.c ****                     {
4319:./FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4320:./FreeRTOS/tasks.c ****                     }
4321:./FreeRTOS/tasks.c ****                 }
4322:./FreeRTOS/tasks.c ****                 else
4323:./FreeRTOS/tasks.c ****                 {
4324:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4325:./FreeRTOS/tasks.c ****                 }
4326:./FreeRTOS/tasks.c ****             }
4327:./FreeRTOS/tasks.c ****             else
4328:./FreeRTOS/tasks.c ****             {
4329:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4330:./FreeRTOS/tasks.c ****             }
4331:./FreeRTOS/tasks.c ****         }
4332:./FreeRTOS/tasks.c ****         else
4333:./FreeRTOS/tasks.c ****         {
4334:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4335:./FreeRTOS/tasks.c ****         }
4336:./FreeRTOS/tasks.c ****     }
4337:./FreeRTOS/tasks.c **** 
4338:./FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4339:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4340:./FreeRTOS/tasks.c **** 
4341:./FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4342:./FreeRTOS/tasks.c **** 
4343:./FreeRTOS/tasks.c ****     void vTaskEnterCritical( void )
4344:./FreeRTOS/tasks.c ****     {
4345:./FreeRTOS/tasks.c ****         portDISABLE_INTERRUPTS();
4346:./FreeRTOS/tasks.c **** 
4347:./FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4348:./FreeRTOS/tasks.c ****         {
4349:./FreeRTOS/tasks.c ****             ( pxCurrentTCB->uxCriticalNesting )++;
4350:./FreeRTOS/tasks.c **** 
4351:./FreeRTOS/tasks.c ****             /* This is not the interrupt safe version of the enter critical
4352:./FreeRTOS/tasks.c ****              * function so  assert() if it is being called from an interrupt
4353:./FreeRTOS/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
4354:./FreeRTOS/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
4355:./FreeRTOS/tasks.c ****              * protect against recursive calls if the assert function also uses a
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 93


4356:./FreeRTOS/tasks.c ****              * critical section. */
4357:./FreeRTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting == 1 )
4358:./FreeRTOS/tasks.c ****             {
4359:./FreeRTOS/tasks.c ****                 portASSERT_IF_IN_ISR();
4360:./FreeRTOS/tasks.c ****             }
4361:./FreeRTOS/tasks.c ****         }
4362:./FreeRTOS/tasks.c ****         else
4363:./FreeRTOS/tasks.c ****         {
4364:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4365:./FreeRTOS/tasks.c ****         }
4366:./FreeRTOS/tasks.c ****     }
4367:./FreeRTOS/tasks.c **** 
4368:./FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4369:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4370:./FreeRTOS/tasks.c **** 
4371:./FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4372:./FreeRTOS/tasks.c **** 
4373:./FreeRTOS/tasks.c ****     void vTaskExitCritical( void )
4374:./FreeRTOS/tasks.c ****     {
4375:./FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4376:./FreeRTOS/tasks.c ****         {
4377:./FreeRTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
4378:./FreeRTOS/tasks.c ****             {
4379:./FreeRTOS/tasks.c ****                 ( pxCurrentTCB->uxCriticalNesting )--;
4380:./FreeRTOS/tasks.c **** 
4381:./FreeRTOS/tasks.c ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
4382:./FreeRTOS/tasks.c ****                 {
4383:./FreeRTOS/tasks.c ****                     portENABLE_INTERRUPTS();
4384:./FreeRTOS/tasks.c ****                 }
4385:./FreeRTOS/tasks.c ****                 else
4386:./FreeRTOS/tasks.c ****                 {
4387:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4388:./FreeRTOS/tasks.c ****                 }
4389:./FreeRTOS/tasks.c ****             }
4390:./FreeRTOS/tasks.c ****             else
4391:./FreeRTOS/tasks.c ****             {
4392:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4393:./FreeRTOS/tasks.c ****             }
4394:./FreeRTOS/tasks.c ****         }
4395:./FreeRTOS/tasks.c ****         else
4396:./FreeRTOS/tasks.c ****         {
4397:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4398:./FreeRTOS/tasks.c ****         }
4399:./FreeRTOS/tasks.c ****     }
4400:./FreeRTOS/tasks.c **** 
4401:./FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4402:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4403:./FreeRTOS/tasks.c **** 
4404:./FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )
4405:./FreeRTOS/tasks.c **** 
4406:./FreeRTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
4407:./FreeRTOS/tasks.c ****                                         const char * pcTaskName )
4408:./FreeRTOS/tasks.c ****     {
4409:./FreeRTOS/tasks.c ****         size_t x;
4410:./FreeRTOS/tasks.c **** 
4411:./FreeRTOS/tasks.c ****         /* Start by copying the entire string. */
4412:./FreeRTOS/tasks.c ****         strcpy( pcBuffer, pcTaskName );
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 94


4413:./FreeRTOS/tasks.c **** 
4414:./FreeRTOS/tasks.c ****         /* Pad the end of the string with spaces to ensure columns line up when
4415:./FreeRTOS/tasks.c ****          * printed out. */
4416:./FreeRTOS/tasks.c ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4417:./FreeRTOS/tasks.c ****         {
4418:./FreeRTOS/tasks.c ****             pcBuffer[ x ] = ' ';
4419:./FreeRTOS/tasks.c ****         }
4420:./FreeRTOS/tasks.c **** 
4421:./FreeRTOS/tasks.c ****         /* Terminate. */
4422:./FreeRTOS/tasks.c ****         pcBuffer[ x ] = ( char ) 0x00;
4423:./FreeRTOS/tasks.c **** 
4424:./FreeRTOS/tasks.c ****         /* Return the new end of string. */
4425:./FreeRTOS/tasks.c ****         return &( pcBuffer[ x ] );
4426:./FreeRTOS/tasks.c ****     }
4427:./FreeRTOS/tasks.c **** 
4428:./FreeRTOS/tasks.c **** #endif /* ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4429:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4430:./FreeRTOS/tasks.c **** 
4431:./FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4432:./FreeRTOS/tasks.c **** 
4433:./FreeRTOS/tasks.c ****     void vTaskList( char * pcWriteBuffer )
4434:./FreeRTOS/tasks.c ****     {
4435:./FreeRTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4436:./FreeRTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4437:./FreeRTOS/tasks.c ****         char cStatus;
4438:./FreeRTOS/tasks.c **** 
4439:./FreeRTOS/tasks.c ****         /*
4440:./FreeRTOS/tasks.c ****          * PLEASE NOTE:
4441:./FreeRTOS/tasks.c ****          *
4442:./FreeRTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4443:./FreeRTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4444:./FreeRTOS/tasks.c ****          * scheduler.
4445:./FreeRTOS/tasks.c ****          *
4446:./FreeRTOS/tasks.c ****          * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4447:./FreeRTOS/tasks.c ****          * uxTaskGetSystemState() output into a human readable table that
4448:./FreeRTOS/tasks.c ****          * displays task: names, states, priority, stack usage and task number.
4449:./FreeRTOS/tasks.c ****          * Stack usage specified as the number of unused StackType_t words stack can hold
4450:./FreeRTOS/tasks.c ****          * on top of stack - not the number of bytes.
4451:./FreeRTOS/tasks.c ****          *
4452:./FreeRTOS/tasks.c ****          * vTaskList() has a dependency on the sprintf() C library function that
4453:./FreeRTOS/tasks.c ****          * might bloat the code size, use a lot of stack, and provide different
4454:./FreeRTOS/tasks.c ****          * results on different platforms.  An alternative, tiny, third party,
4455:./FreeRTOS/tasks.c ****          * and limited functionality implementation of sprintf() is provided in
4456:./FreeRTOS/tasks.c ****          * many of the FreeRTOS/Demo sub-directories in a file called
4457:./FreeRTOS/tasks.c ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
4458:./FreeRTOS/tasks.c ****          * snprintf() implementation!).
4459:./FreeRTOS/tasks.c ****          *
4460:./FreeRTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4461:./FreeRTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4462:./FreeRTOS/tasks.c ****          * through a call to vTaskList().
4463:./FreeRTOS/tasks.c ****          */
4464:./FreeRTOS/tasks.c **** 
4465:./FreeRTOS/tasks.c **** 
4466:./FreeRTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4467:./FreeRTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4468:./FreeRTOS/tasks.c **** 
4469:./FreeRTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 95


4470:./FreeRTOS/tasks.c ****          * function is executing. */
4471:./FreeRTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4472:./FreeRTOS/tasks.c **** 
4473:./FreeRTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  if
4474:./FreeRTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4475:./FreeRTOS/tasks.c ****          * equate to NULL. */
4476:./FreeRTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4477:./FreeRTOS/tasks.c **** 
4478:./FreeRTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
4479:./FreeRTOS/tasks.c ****         {
4480:./FreeRTOS/tasks.c ****             /* Generate the (binary) data. */
4481:./FreeRTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4482:./FreeRTOS/tasks.c **** 
4483:./FreeRTOS/tasks.c ****             /* Create a human readable table from the binary data. */
4484:./FreeRTOS/tasks.c ****             for( x = 0; x < uxArraySize; x++ )
4485:./FreeRTOS/tasks.c ****             {
4486:./FreeRTOS/tasks.c ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
4487:./FreeRTOS/tasks.c ****                 {
4488:./FreeRTOS/tasks.c ****                     case eRunning:
4489:./FreeRTOS/tasks.c ****                         cStatus = tskRUNNING_CHAR;
4490:./FreeRTOS/tasks.c ****                         break;
4491:./FreeRTOS/tasks.c **** 
4492:./FreeRTOS/tasks.c ****                     case eReady:
4493:./FreeRTOS/tasks.c ****                         cStatus = tskREADY_CHAR;
4494:./FreeRTOS/tasks.c ****                         break;
4495:./FreeRTOS/tasks.c **** 
4496:./FreeRTOS/tasks.c ****                     case eBlocked:
4497:./FreeRTOS/tasks.c ****                         cStatus = tskBLOCKED_CHAR;
4498:./FreeRTOS/tasks.c ****                         break;
4499:./FreeRTOS/tasks.c **** 
4500:./FreeRTOS/tasks.c ****                     case eSuspended:
4501:./FreeRTOS/tasks.c ****                         cStatus = tskSUSPENDED_CHAR;
4502:./FreeRTOS/tasks.c ****                         break;
4503:./FreeRTOS/tasks.c **** 
4504:./FreeRTOS/tasks.c ****                     case eDeleted:
4505:./FreeRTOS/tasks.c ****                         cStatus = tskDELETED_CHAR;
4506:./FreeRTOS/tasks.c ****                         break;
4507:./FreeRTOS/tasks.c **** 
4508:./FreeRTOS/tasks.c ****                     case eInvalid: /* Fall through. */
4509:./FreeRTOS/tasks.c ****                     default:       /* Should not get here, but it is included
4510:./FreeRTOS/tasks.c ****                                     * to prevent static checking errors. */
4511:./FreeRTOS/tasks.c ****                         cStatus = ( char ) 0x00;
4512:./FreeRTOS/tasks.c ****                         break;
4513:./FreeRTOS/tasks.c ****                 }
4514:./FreeRTOS/tasks.c **** 
4515:./FreeRTOS/tasks.c ****                 /* Write the task name to the string, padding with spaces so it
4516:./FreeRTOS/tasks.c ****                  * can be printed in tabular form more easily. */
4517:./FreeRTOS/tasks.c ****                 pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskN
4518:./FreeRTOS/tasks.c **** 
4519:./FreeRTOS/tasks.c ****                 /* Write the rest of the string. */
4520:./FreeRTOS/tasks.c ****                 sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskSta
4521:./FreeRTOS/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
4522:./FreeRTOS/tasks.c ****             }
4523:./FreeRTOS/tasks.c **** 
4524:./FreeRTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4525:./FreeRTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4526:./FreeRTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 96


4527:./FreeRTOS/tasks.c ****         }
4528:./FreeRTOS/tasks.c ****         else
4529:./FreeRTOS/tasks.c ****         {
4530:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4531:./FreeRTOS/tasks.c ****         }
4532:./FreeRTOS/tasks.c ****     }
4533:./FreeRTOS/tasks.c **** 
4534:./FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4535:./FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
4536:./FreeRTOS/tasks.c **** 
4537:./FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4538:./FreeRTOS/tasks.c **** 
4539:./FreeRTOS/tasks.c ****     void vTaskGetRunTimeStats( char * pcWriteBuffer )
4540:./FreeRTOS/tasks.c ****     {
4541:./FreeRTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4542:./FreeRTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4543:./FreeRTOS/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulStatsAsPercentage;
4544:./FreeRTOS/tasks.c **** 
4545:./FreeRTOS/tasks.c ****         /*
4546:./FreeRTOS/tasks.c ****          * PLEASE NOTE:
4547:./FreeRTOS/tasks.c ****          *
4548:./FreeRTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4549:./FreeRTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4550:./FreeRTOS/tasks.c ****          * scheduler.
4551:./FreeRTOS/tasks.c ****          *
4552:./FreeRTOS/tasks.c ****          * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4553:./FreeRTOS/tasks.c ****          * of the uxTaskGetSystemState() output into a human readable table that
4554:./FreeRTOS/tasks.c ****          * displays the amount of time each task has spent in the Running state
4555:./FreeRTOS/tasks.c ****          * in both absolute and percentage terms.
4556:./FreeRTOS/tasks.c ****          *
4557:./FreeRTOS/tasks.c ****          * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4558:./FreeRTOS/tasks.c ****          * function that might bloat the code size, use a lot of stack, and
4559:./FreeRTOS/tasks.c ****          * provide different results on different platforms.  An alternative,
4560:./FreeRTOS/tasks.c ****          * tiny, third party, and limited functionality implementation of
4561:./FreeRTOS/tasks.c ****          * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4562:./FreeRTOS/tasks.c ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4563:./FreeRTOS/tasks.c ****          * a full snprintf() implementation!).
4564:./FreeRTOS/tasks.c ****          *
4565:./FreeRTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4566:./FreeRTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4567:./FreeRTOS/tasks.c ****          * through a call to vTaskGetRunTimeStats().
4568:./FreeRTOS/tasks.c ****          */
4569:./FreeRTOS/tasks.c **** 
4570:./FreeRTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4571:./FreeRTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4572:./FreeRTOS/tasks.c **** 
4573:./FreeRTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4574:./FreeRTOS/tasks.c ****          * function is executing. */
4575:./FreeRTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4576:./FreeRTOS/tasks.c **** 
4577:./FreeRTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  If
4578:./FreeRTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4579:./FreeRTOS/tasks.c ****          * equate to NULL. */
4580:./FreeRTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4581:./FreeRTOS/tasks.c **** 
4582:./FreeRTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
4583:./FreeRTOS/tasks.c ****         {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 97


4584:./FreeRTOS/tasks.c ****             /* Generate the (binary) data. */
4585:./FreeRTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4586:./FreeRTOS/tasks.c **** 
4587:./FreeRTOS/tasks.c ****             /* For percentage calculations. */
4588:./FreeRTOS/tasks.c ****             ulTotalTime /= 100UL;
4589:./FreeRTOS/tasks.c **** 
4590:./FreeRTOS/tasks.c ****             /* Avoid divide by zero errors. */
4591:./FreeRTOS/tasks.c ****             if( ulTotalTime > 0UL )
4592:./FreeRTOS/tasks.c ****             {
4593:./FreeRTOS/tasks.c ****                 /* Create a human readable table from the binary data. */
4594:./FreeRTOS/tasks.c ****                 for( x = 0; x < uxArraySize; x++ )
4595:./FreeRTOS/tasks.c ****                 {
4596:./FreeRTOS/tasks.c ****                     /* What percentage of the total run time has the task used?
4597:./FreeRTOS/tasks.c ****                      * This will always be rounded down to the nearest integer.
4598:./FreeRTOS/tasks.c ****                      * ulTotalRunTime has already been divided by 100. */
4599:./FreeRTOS/tasks.c ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4600:./FreeRTOS/tasks.c **** 
4601:./FreeRTOS/tasks.c ****                     /* Write the task name to the string, padding with
4602:./FreeRTOS/tasks.c ****                      * spaces so it can be printed in tabular form more
4603:./FreeRTOS/tasks.c ****                      * easily. */
4604:./FreeRTOS/tasks.c ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
4605:./FreeRTOS/tasks.c **** 
4606:./FreeRTOS/tasks.c ****                     if( ulStatsAsPercentage > 0UL )
4607:./FreeRTOS/tasks.c ****                     {
4608:./FreeRTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4609:./FreeRTOS/tasks.c ****                         {
4610:./FreeRTOS/tasks.c ****                             sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ul
4611:./FreeRTOS/tasks.c ****                         }
4612:./FreeRTOS/tasks.c ****                         #else
4613:./FreeRTOS/tasks.c ****                         {
4614:./FreeRTOS/tasks.c ****                             /* sizeof( int ) == sizeof( long ) so a smaller
4615:./FreeRTOS/tasks.c ****                              * printf() library can be used. */
4616:./FreeRTOS/tasks.c ****                             sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStat
4617:./FreeRTOS/tasks.c ****                         }
4618:./FreeRTOS/tasks.c ****                         #endif
4619:./FreeRTOS/tasks.c ****                     }
4620:./FreeRTOS/tasks.c ****                     else
4621:./FreeRTOS/tasks.c ****                     {
4622:./FreeRTOS/tasks.c ****                         /* If the percentage is zero here then the task has
4623:./FreeRTOS/tasks.c ****                          * consumed less than 1% of the total run time. */
4624:./FreeRTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4625:./FreeRTOS/tasks.c ****                         {
4626:./FreeRTOS/tasks.c ****                             sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulR
4627:./FreeRTOS/tasks.c ****                         }
4628:./FreeRTOS/tasks.c ****                         #else
4629:./FreeRTOS/tasks.c ****                         {
4630:./FreeRTOS/tasks.c ****                             /* sizeof( int ) == sizeof( long ) so a smaller
4631:./FreeRTOS/tasks.c ****                              * printf() library can be used. */
4632:./FreeRTOS/tasks.c ****                             sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStat
4633:./FreeRTOS/tasks.c ****                         }
4634:./FreeRTOS/tasks.c ****                         #endif
4635:./FreeRTOS/tasks.c ****                     }
4636:./FreeRTOS/tasks.c **** 
4637:./FreeRTOS/tasks.c ****                     pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok o
4638:./FreeRTOS/tasks.c ****                 }
4639:./FreeRTOS/tasks.c ****             }
4640:./FreeRTOS/tasks.c ****             else
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 98


4641:./FreeRTOS/tasks.c ****             {
4642:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4643:./FreeRTOS/tasks.c ****             }
4644:./FreeRTOS/tasks.c **** 
4645:./FreeRTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4646:./FreeRTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4647:./FreeRTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
4648:./FreeRTOS/tasks.c ****         }
4649:./FreeRTOS/tasks.c ****         else
4650:./FreeRTOS/tasks.c ****         {
4651:./FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4652:./FreeRTOS/tasks.c ****         }
4653:./FreeRTOS/tasks.c ****     }
4654:./FreeRTOS/tasks.c **** 
4655:./FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4656:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4657:./FreeRTOS/tasks.c **** 
4658:./FreeRTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4659:./FreeRTOS/tasks.c **** {
4660:./FreeRTOS/tasks.c ****     TickType_t uxReturn;
4661:./FreeRTOS/tasks.c **** 
4662:./FreeRTOS/tasks.c ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4663:./FreeRTOS/tasks.c **** 
4664:./FreeRTOS/tasks.c ****     /* Reset the event list item to its normal value - so it can be used with
4665:./FreeRTOS/tasks.c ****      * queues and semaphores. */
4666:./FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
4667:./FreeRTOS/tasks.c **** 
4668:./FreeRTOS/tasks.c ****     return uxReturn;
4669:./FreeRTOS/tasks.c **** }
4670:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4671:./FreeRTOS/tasks.c **** 
4672:./FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4673:./FreeRTOS/tasks.c **** 
4674:./FreeRTOS/tasks.c ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4675:./FreeRTOS/tasks.c ****     {
4676:./FreeRTOS/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
4677:./FreeRTOS/tasks.c ****          * then pxCurrentTCB will be NULL. */
4678:./FreeRTOS/tasks.c ****         if( pxCurrentTCB != NULL )
4679:./FreeRTOS/tasks.c ****         {
4680:./FreeRTOS/tasks.c ****             ( pxCurrentTCB->uxMutexesHeld )++;
4681:./FreeRTOS/tasks.c ****         }
4682:./FreeRTOS/tasks.c **** 
4683:./FreeRTOS/tasks.c ****         return pxCurrentTCB;
4684:./FreeRTOS/tasks.c ****     }
4685:./FreeRTOS/tasks.c **** 
4686:./FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4687:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4688:./FreeRTOS/tasks.c **** 
4689:./FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4690:./FreeRTOS/tasks.c **** 
4691:./FreeRTOS/tasks.c ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
4692:./FreeRTOS/tasks.c ****                                       BaseType_t xClearCountOnExit,
4693:./FreeRTOS/tasks.c ****                                       TickType_t xTicksToWait )
4694:./FreeRTOS/tasks.c ****     {
4695:./FreeRTOS/tasks.c ****         uint32_t ulReturn;
4696:./FreeRTOS/tasks.c **** 
4697:./FreeRTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 99


4698:./FreeRTOS/tasks.c **** 
4699:./FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4700:./FreeRTOS/tasks.c ****         {
4701:./FreeRTOS/tasks.c ****             /* Only block if the notification count is not already non-zero. */
4702:./FreeRTOS/tasks.c ****             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
4703:./FreeRTOS/tasks.c ****             {
4704:./FreeRTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4705:./FreeRTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4706:./FreeRTOS/tasks.c **** 
4707:./FreeRTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4708:./FreeRTOS/tasks.c ****                 {
4709:./FreeRTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4710:./FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
4711:./FreeRTOS/tasks.c **** 
4712:./FreeRTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4713:./FreeRTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4714:./FreeRTOS/tasks.c ****                      * critical section exits) - but it is not something that
4715:./FreeRTOS/tasks.c ****                      * application code should ever do. */
4716:./FreeRTOS/tasks.c ****                     portYIELD_WITHIN_API();
4717:./FreeRTOS/tasks.c ****                 }
4718:./FreeRTOS/tasks.c ****                 else
4719:./FreeRTOS/tasks.c ****                 {
4720:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4721:./FreeRTOS/tasks.c ****                 }
4722:./FreeRTOS/tasks.c ****             }
4723:./FreeRTOS/tasks.c ****             else
4724:./FreeRTOS/tasks.c ****             {
4725:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4726:./FreeRTOS/tasks.c ****             }
4727:./FreeRTOS/tasks.c ****         }
4728:./FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4729:./FreeRTOS/tasks.c **** 
4730:./FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4731:./FreeRTOS/tasks.c ****         {
4732:./FreeRTOS/tasks.c ****             traceTASK_NOTIFY_TAKE( uxIndexToWait );
4733:./FreeRTOS/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4734:./FreeRTOS/tasks.c **** 
4735:./FreeRTOS/tasks.c ****             if( ulReturn != 0UL )
4736:./FreeRTOS/tasks.c ****             {
4737:./FreeRTOS/tasks.c ****                 if( xClearCountOnExit != pdFALSE )
4738:./FreeRTOS/tasks.c ****                 {
4739:./FreeRTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
4740:./FreeRTOS/tasks.c ****                 }
4741:./FreeRTOS/tasks.c ****                 else
4742:./FreeRTOS/tasks.c ****                 {
4743:./FreeRTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
4744:./FreeRTOS/tasks.c ****                 }
4745:./FreeRTOS/tasks.c ****             }
4746:./FreeRTOS/tasks.c ****             else
4747:./FreeRTOS/tasks.c ****             {
4748:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4749:./FreeRTOS/tasks.c ****             }
4750:./FreeRTOS/tasks.c **** 
4751:./FreeRTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4752:./FreeRTOS/tasks.c ****         }
4753:./FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4754:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 100


4755:./FreeRTOS/tasks.c ****         return ulReturn;
4756:./FreeRTOS/tasks.c ****     }
4757:./FreeRTOS/tasks.c **** 
4758:./FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4759:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4760:./FreeRTOS/tasks.c **** 
4761:./FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4762:./FreeRTOS/tasks.c **** 
4763:./FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
4764:./FreeRTOS/tasks.c ****                                        uint32_t ulBitsToClearOnEntry,
4765:./FreeRTOS/tasks.c ****                                        uint32_t ulBitsToClearOnExit,
4766:./FreeRTOS/tasks.c ****                                        uint32_t * pulNotificationValue,
4767:./FreeRTOS/tasks.c ****                                        TickType_t xTicksToWait )
4768:./FreeRTOS/tasks.c ****     {
4769:./FreeRTOS/tasks.c ****         BaseType_t xReturn;
4770:./FreeRTOS/tasks.c **** 
4771:./FreeRTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4772:./FreeRTOS/tasks.c **** 
4773:./FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4774:./FreeRTOS/tasks.c ****         {
4775:./FreeRTOS/tasks.c ****             /* Only block if a notification is not already pending. */
4776:./FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4777:./FreeRTOS/tasks.c ****             {
4778:./FreeRTOS/tasks.c ****                 /* Clear bits in the task's notification value as bits may get
4779:./FreeRTOS/tasks.c ****                  * set  by the notifying task or interrupt.  This can be used to
4780:./FreeRTOS/tasks.c ****                  * clear the value to zero. */
4781:./FreeRTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
4782:./FreeRTOS/tasks.c **** 
4783:./FreeRTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4784:./FreeRTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4785:./FreeRTOS/tasks.c **** 
4786:./FreeRTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4787:./FreeRTOS/tasks.c ****                 {
4788:./FreeRTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4789:./FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
4790:./FreeRTOS/tasks.c **** 
4791:./FreeRTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4792:./FreeRTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4793:./FreeRTOS/tasks.c ****                      * critical section exits) - but it is not something that
4794:./FreeRTOS/tasks.c ****                      * application code should ever do. */
4795:./FreeRTOS/tasks.c ****                     portYIELD_WITHIN_API();
4796:./FreeRTOS/tasks.c ****                 }
4797:./FreeRTOS/tasks.c ****                 else
4798:./FreeRTOS/tasks.c ****                 {
4799:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4800:./FreeRTOS/tasks.c ****                 }
4801:./FreeRTOS/tasks.c ****             }
4802:./FreeRTOS/tasks.c ****             else
4803:./FreeRTOS/tasks.c ****             {
4804:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4805:./FreeRTOS/tasks.c ****             }
4806:./FreeRTOS/tasks.c ****         }
4807:./FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4808:./FreeRTOS/tasks.c **** 
4809:./FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4810:./FreeRTOS/tasks.c ****         {
4811:./FreeRTOS/tasks.c ****             traceTASK_NOTIFY_WAIT( uxIndexToWait );
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 101


4812:./FreeRTOS/tasks.c **** 
4813:./FreeRTOS/tasks.c ****             if( pulNotificationValue != NULL )
4814:./FreeRTOS/tasks.c ****             {
4815:./FreeRTOS/tasks.c ****                 /* Output the current notification value, which may or may not
4816:./FreeRTOS/tasks.c ****                  * have changed. */
4817:./FreeRTOS/tasks.c ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4818:./FreeRTOS/tasks.c ****             }
4819:./FreeRTOS/tasks.c **** 
4820:./FreeRTOS/tasks.c ****             /* If ucNotifyValue is set then either the task never entered the
4821:./FreeRTOS/tasks.c ****              * blocked state (because a notification was already pending) or the
4822:./FreeRTOS/tasks.c ****              * task unblocked because of a notification.  Otherwise the task
4823:./FreeRTOS/tasks.c ****              * unblocked because of a timeout. */
4824:./FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4825:./FreeRTOS/tasks.c ****             {
4826:./FreeRTOS/tasks.c ****                 /* A notification was not received. */
4827:./FreeRTOS/tasks.c ****                 xReturn = pdFALSE;
4828:./FreeRTOS/tasks.c ****             }
4829:./FreeRTOS/tasks.c ****             else
4830:./FreeRTOS/tasks.c ****             {
4831:./FreeRTOS/tasks.c ****                 /* A notification was already pending or a notification was
4832:./FreeRTOS/tasks.c ****                  * received while the task was waiting. */
4833:./FreeRTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
4834:./FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
4835:./FreeRTOS/tasks.c ****             }
4836:./FreeRTOS/tasks.c **** 
4837:./FreeRTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4838:./FreeRTOS/tasks.c ****         }
4839:./FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4840:./FreeRTOS/tasks.c **** 
4841:./FreeRTOS/tasks.c ****         return xReturn;
4842:./FreeRTOS/tasks.c ****     }
4843:./FreeRTOS/tasks.c **** 
4844:./FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4845:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4846:./FreeRTOS/tasks.c **** 
4847:./FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4848:./FreeRTOS/tasks.c **** 
4849:./FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
4850:./FreeRTOS/tasks.c ****                                    UBaseType_t uxIndexToNotify,
4851:./FreeRTOS/tasks.c ****                                    uint32_t ulValue,
4852:./FreeRTOS/tasks.c ****                                    eNotifyAction eAction,
4853:./FreeRTOS/tasks.c ****                                    uint32_t * pulPreviousNotificationValue )
4854:./FreeRTOS/tasks.c ****     {
4855:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
4856:./FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
4857:./FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4858:./FreeRTOS/tasks.c **** 
4859:./FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4860:./FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
4861:./FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
4862:./FreeRTOS/tasks.c **** 
4863:./FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4864:./FreeRTOS/tasks.c ****         {
4865:./FreeRTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
4866:./FreeRTOS/tasks.c ****             {
4867:./FreeRTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
4868:./FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 102


4869:./FreeRTOS/tasks.c **** 
4870:./FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
4871:./FreeRTOS/tasks.c **** 
4872:./FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
4873:./FreeRTOS/tasks.c **** 
4874:./FreeRTOS/tasks.c ****             switch( eAction )
4875:./FreeRTOS/tasks.c ****             {
4876:./FreeRTOS/tasks.c ****                 case eSetBits:
4877:./FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
4878:./FreeRTOS/tasks.c ****                     break;
4879:./FreeRTOS/tasks.c **** 
4880:./FreeRTOS/tasks.c ****                 case eIncrement:
4881:./FreeRTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
4882:./FreeRTOS/tasks.c ****                     break;
4883:./FreeRTOS/tasks.c **** 
4884:./FreeRTOS/tasks.c ****                 case eSetValueWithOverwrite:
4885:./FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4886:./FreeRTOS/tasks.c ****                     break;
4887:./FreeRTOS/tasks.c **** 
4888:./FreeRTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
4889:./FreeRTOS/tasks.c **** 
4890:./FreeRTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4891:./FreeRTOS/tasks.c ****                     {
4892:./FreeRTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4893:./FreeRTOS/tasks.c ****                     }
4894:./FreeRTOS/tasks.c ****                     else
4895:./FreeRTOS/tasks.c ****                     {
4896:./FreeRTOS/tasks.c ****                         /* The value could not be written to the task. */
4897:./FreeRTOS/tasks.c ****                         xReturn = pdFAIL;
4898:./FreeRTOS/tasks.c ****                     }
4899:./FreeRTOS/tasks.c **** 
4900:./FreeRTOS/tasks.c ****                     break;
4901:./FreeRTOS/tasks.c **** 
4902:./FreeRTOS/tasks.c ****                 case eNoAction:
4903:./FreeRTOS/tasks.c **** 
4904:./FreeRTOS/tasks.c ****                     /* The task is being notified without its notify value being
4905:./FreeRTOS/tasks.c ****                      * updated. */
4906:./FreeRTOS/tasks.c ****                     break;
4907:./FreeRTOS/tasks.c **** 
4908:./FreeRTOS/tasks.c ****                 default:
4909:./FreeRTOS/tasks.c **** 
4910:./FreeRTOS/tasks.c ****                     /* Should not get here if all enums are handled.
4911:./FreeRTOS/tasks.c ****                      * Artificially force an assert by testing a value the
4912:./FreeRTOS/tasks.c ****                      * compiler can't assume is const. */
4913:./FreeRTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
4914:./FreeRTOS/tasks.c **** 
4915:./FreeRTOS/tasks.c ****                     break;
4916:./FreeRTOS/tasks.c ****             }
4917:./FreeRTOS/tasks.c **** 
4918:./FreeRTOS/tasks.c ****             traceTASK_NOTIFY( uxIndexToNotify );
4919:./FreeRTOS/tasks.c **** 
4920:./FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
4921:./FreeRTOS/tasks.c ****              * notification then unblock it now. */
4922:./FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4923:./FreeRTOS/tasks.c ****             {
4924:./FreeRTOS/tasks.c ****                 listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
4925:./FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 103


4926:./FreeRTOS/tasks.c **** 
4927:./FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
4928:./FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4929:./FreeRTOS/tasks.c **** 
4930:./FreeRTOS/tasks.c ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
4931:./FreeRTOS/tasks.c ****                 {
4932:./FreeRTOS/tasks.c ****                     /* If a task is blocked waiting for a notification then
4933:./FreeRTOS/tasks.c ****                      * xNextTaskUnblockTime might be set to the blocked task's time
4934:./FreeRTOS/tasks.c ****                      * out time.  If the task is unblocked for a reason other than
4935:./FreeRTOS/tasks.c ****                      * a timeout xNextTaskUnblockTime is normally left unchanged,
4936:./FreeRTOS/tasks.c ****                      * because it will automatically get reset to a new value when
4937:./FreeRTOS/tasks.c ****                      * the tick count equals xNextTaskUnblockTime.  However if
4938:./FreeRTOS/tasks.c ****                      * tickless idling is used it might be more important to enter
4939:./FreeRTOS/tasks.c ****                      * sleep mode at the earliest possible time - so reset
4940:./FreeRTOS/tasks.c ****                      * xNextTaskUnblockTime here to ensure it is updated at the
4941:./FreeRTOS/tasks.c ****                      * earliest possible time. */
4942:./FreeRTOS/tasks.c ****                     prvResetNextTaskUnblockTime();
4943:./FreeRTOS/tasks.c ****                 }
4944:./FreeRTOS/tasks.c ****                 #endif
4945:./FreeRTOS/tasks.c **** 
4946:./FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4947:./FreeRTOS/tasks.c ****                 {
4948:./FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
4949:./FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
4950:./FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
4951:./FreeRTOS/tasks.c ****                 }
4952:./FreeRTOS/tasks.c ****                 else
4953:./FreeRTOS/tasks.c ****                 {
4954:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4955:./FreeRTOS/tasks.c ****                 }
4956:./FreeRTOS/tasks.c ****             }
4957:./FreeRTOS/tasks.c ****             else
4958:./FreeRTOS/tasks.c ****             {
4959:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4960:./FreeRTOS/tasks.c ****             }
4961:./FreeRTOS/tasks.c ****         }
4962:./FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4963:./FreeRTOS/tasks.c **** 
4964:./FreeRTOS/tasks.c ****         return xReturn;
4965:./FreeRTOS/tasks.c ****     }
4966:./FreeRTOS/tasks.c **** 
4967:./FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4968:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4969:./FreeRTOS/tasks.c **** 
4970:./FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4971:./FreeRTOS/tasks.c **** 
4972:./FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
4973:./FreeRTOS/tasks.c ****                                           UBaseType_t uxIndexToNotify,
4974:./FreeRTOS/tasks.c ****                                           uint32_t ulValue,
4975:./FreeRTOS/tasks.c ****                                           eNotifyAction eAction,
4976:./FreeRTOS/tasks.c ****                                           uint32_t * pulPreviousNotificationValue,
4977:./FreeRTOS/tasks.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
4978:./FreeRTOS/tasks.c ****     {
4979:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
4980:./FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4981:./FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
4982:./FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 104


4983:./FreeRTOS/tasks.c **** 
4984:./FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
4985:./FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4986:./FreeRTOS/tasks.c **** 
4987:./FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
4988:./FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
4989:./FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
4990:./FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
4991:./FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4992:./FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
4993:./FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4994:./FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
4995:./FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
4996:./FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
4997:./FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
4998:./FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
4999:./FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5000:./FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5001:./FreeRTOS/tasks.c ****          * provided on the following link:
5002:./FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5003:./FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5004:./FreeRTOS/tasks.c **** 
5005:./FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
5006:./FreeRTOS/tasks.c **** 
5007:./FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5008:./FreeRTOS/tasks.c ****         {
5009:./FreeRTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
5010:./FreeRTOS/tasks.c ****             {
5011:./FreeRTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
5012:./FreeRTOS/tasks.c ****             }
5013:./FreeRTOS/tasks.c **** 
5014:./FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5015:./FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5016:./FreeRTOS/tasks.c **** 
5017:./FreeRTOS/tasks.c ****             switch( eAction )
5018:./FreeRTOS/tasks.c ****             {
5019:./FreeRTOS/tasks.c ****                 case eSetBits:
5020:./FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
5021:./FreeRTOS/tasks.c ****                     break;
5022:./FreeRTOS/tasks.c **** 
5023:./FreeRTOS/tasks.c ****                 case eIncrement:
5024:./FreeRTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5025:./FreeRTOS/tasks.c ****                     break;
5026:./FreeRTOS/tasks.c **** 
5027:./FreeRTOS/tasks.c ****                 case eSetValueWithOverwrite:
5028:./FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5029:./FreeRTOS/tasks.c ****                     break;
5030:./FreeRTOS/tasks.c **** 
5031:./FreeRTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
5032:./FreeRTOS/tasks.c **** 
5033:./FreeRTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
5034:./FreeRTOS/tasks.c ****                     {
5035:./FreeRTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5036:./FreeRTOS/tasks.c ****                     }
5037:./FreeRTOS/tasks.c ****                     else
5038:./FreeRTOS/tasks.c ****                     {
5039:./FreeRTOS/tasks.c ****                         /* The value could not be written to the task. */
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 105


5040:./FreeRTOS/tasks.c ****                         xReturn = pdFAIL;
5041:./FreeRTOS/tasks.c ****                     }
5042:./FreeRTOS/tasks.c **** 
5043:./FreeRTOS/tasks.c ****                     break;
5044:./FreeRTOS/tasks.c **** 
5045:./FreeRTOS/tasks.c ****                 case eNoAction:
5046:./FreeRTOS/tasks.c **** 
5047:./FreeRTOS/tasks.c ****                     /* The task is being notified without its notify value being
5048:./FreeRTOS/tasks.c ****                      * updated. */
5049:./FreeRTOS/tasks.c ****                     break;
5050:./FreeRTOS/tasks.c **** 
5051:./FreeRTOS/tasks.c ****                 default:
5052:./FreeRTOS/tasks.c **** 
5053:./FreeRTOS/tasks.c ****                     /* Should not get here if all enums are handled.
5054:./FreeRTOS/tasks.c ****                      * Artificially force an assert by testing a value the
5055:./FreeRTOS/tasks.c ****                      * compiler can't assume is const. */
5056:./FreeRTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
5057:./FreeRTOS/tasks.c ****                     break;
5058:./FreeRTOS/tasks.c ****             }
5059:./FreeRTOS/tasks.c **** 
5060:./FreeRTOS/tasks.c ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
5061:./FreeRTOS/tasks.c **** 
5062:./FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5063:./FreeRTOS/tasks.c ****              * notification then unblock it now. */
5064:./FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5065:./FreeRTOS/tasks.c ****             {
5066:./FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
5067:./FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5068:./FreeRTOS/tasks.c **** 
5069:./FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5070:./FreeRTOS/tasks.c ****                 {
5071:./FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
5072:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5073:./FreeRTOS/tasks.c ****                 }
5074:./FreeRTOS/tasks.c ****                 else
5075:./FreeRTOS/tasks.c ****                 {
5076:./FreeRTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5077:./FreeRTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5078:./FreeRTOS/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5079:./FreeRTOS/tasks.c ****                 }
5080:./FreeRTOS/tasks.c **** 
5081:./FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5082:./FreeRTOS/tasks.c ****                 {
5083:./FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
5084:./FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
5085:./FreeRTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5086:./FreeRTOS/tasks.c ****                     {
5087:./FreeRTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5088:./FreeRTOS/tasks.c ****                     }
5089:./FreeRTOS/tasks.c **** 
5090:./FreeRTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5091:./FreeRTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter to an ISR
5092:./FreeRTOS/tasks.c ****                      * safe FreeRTOS function. */
5093:./FreeRTOS/tasks.c ****                     xYieldPending = pdTRUE;
5094:./FreeRTOS/tasks.c ****                 }
5095:./FreeRTOS/tasks.c ****                 else
5096:./FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 106


5097:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5098:./FreeRTOS/tasks.c ****                 }
5099:./FreeRTOS/tasks.c ****             }
5100:./FreeRTOS/tasks.c ****         }
5101:./FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5102:./FreeRTOS/tasks.c **** 
5103:./FreeRTOS/tasks.c ****         return xReturn;
5104:./FreeRTOS/tasks.c ****     }
5105:./FreeRTOS/tasks.c **** 
5106:./FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5107:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5108:./FreeRTOS/tasks.c **** 
5109:./FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5110:./FreeRTOS/tasks.c **** 
5111:./FreeRTOS/tasks.c ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
5112:./FreeRTOS/tasks.c ****                                         UBaseType_t uxIndexToNotify,
5113:./FreeRTOS/tasks.c ****                                         BaseType_t * pxHigherPriorityTaskWoken )
5114:./FreeRTOS/tasks.c ****     {
5115:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5116:./FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
5117:./FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
5118:./FreeRTOS/tasks.c **** 
5119:./FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
5120:./FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5121:./FreeRTOS/tasks.c **** 
5122:./FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5123:./FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5124:./FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5125:./FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5126:./FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5127:./FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
5128:./FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5129:./FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5130:./FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
5131:./FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5132:./FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5133:./FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5134:./FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5135:./FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5136:./FreeRTOS/tasks.c ****          * provided on the following link:
5137:./FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5138:./FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5139:./FreeRTOS/tasks.c **** 
5140:./FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
5141:./FreeRTOS/tasks.c **** 
5142:./FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5143:./FreeRTOS/tasks.c ****         {
5144:./FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5145:./FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5146:./FreeRTOS/tasks.c **** 
5147:./FreeRTOS/tasks.c ****             /* 'Giving' is equivalent to incrementing a count in a counting
5148:./FreeRTOS/tasks.c ****              * semaphore. */
5149:./FreeRTOS/tasks.c ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5150:./FreeRTOS/tasks.c **** 
5151:./FreeRTOS/tasks.c ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
5152:./FreeRTOS/tasks.c **** 
5153:./FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 107


5154:./FreeRTOS/tasks.c ****              * notification then unblock it now. */
5155:./FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5156:./FreeRTOS/tasks.c ****             {
5157:./FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
5158:./FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5159:./FreeRTOS/tasks.c **** 
5160:./FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5161:./FreeRTOS/tasks.c ****                 {
5162:./FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
5163:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5164:./FreeRTOS/tasks.c ****                 }
5165:./FreeRTOS/tasks.c ****                 else
5166:./FreeRTOS/tasks.c ****                 {
5167:./FreeRTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5168:./FreeRTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5169:./FreeRTOS/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5170:./FreeRTOS/tasks.c ****                 }
5171:./FreeRTOS/tasks.c **** 
5172:./FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5173:./FreeRTOS/tasks.c ****                 {
5174:./FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
5175:./FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
5176:./FreeRTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5177:./FreeRTOS/tasks.c ****                     {
5178:./FreeRTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5179:./FreeRTOS/tasks.c ****                     }
5180:./FreeRTOS/tasks.c **** 
5181:./FreeRTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5182:./FreeRTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter in an ISR
5183:./FreeRTOS/tasks.c ****                      * safe FreeRTOS function. */
5184:./FreeRTOS/tasks.c ****                     xYieldPending = pdTRUE;
5185:./FreeRTOS/tasks.c ****                 }
5186:./FreeRTOS/tasks.c ****                 else
5187:./FreeRTOS/tasks.c ****                 {
5188:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5189:./FreeRTOS/tasks.c ****                 }
5190:./FreeRTOS/tasks.c ****             }
5191:./FreeRTOS/tasks.c ****         }
5192:./FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5193:./FreeRTOS/tasks.c ****     }
5194:./FreeRTOS/tasks.c **** 
5195:./FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5196:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5197:./FreeRTOS/tasks.c **** 
5198:./FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5199:./FreeRTOS/tasks.c **** 
5200:./FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
5201:./FreeRTOS/tasks.c ****                                              UBaseType_t uxIndexToClear )
5202:./FreeRTOS/tasks.c ****     {
5203:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5204:./FreeRTOS/tasks.c ****         BaseType_t xReturn;
5205:./FreeRTOS/tasks.c **** 
5206:./FreeRTOS/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5207:./FreeRTOS/tasks.c **** 
5208:./FreeRTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5209:./FreeRTOS/tasks.c ****          * its notification state cleared. */
5210:./FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 108


5211:./FreeRTOS/tasks.c **** 
5212:./FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
5213:./FreeRTOS/tasks.c ****         {
5214:./FreeRTOS/tasks.c ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
5215:./FreeRTOS/tasks.c ****             {
5216:./FreeRTOS/tasks.c ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
5217:./FreeRTOS/tasks.c ****                 xReturn = pdPASS;
5218:./FreeRTOS/tasks.c ****             }
5219:./FreeRTOS/tasks.c ****             else
5220:./FreeRTOS/tasks.c ****             {
5221:./FreeRTOS/tasks.c ****                 xReturn = pdFAIL;
5222:./FreeRTOS/tasks.c ****             }
5223:./FreeRTOS/tasks.c ****         }
5224:./FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
5225:./FreeRTOS/tasks.c **** 
5226:./FreeRTOS/tasks.c ****         return xReturn;
5227:./FreeRTOS/tasks.c ****     }
5228:./FreeRTOS/tasks.c **** 
5229:./FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5230:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5231:./FreeRTOS/tasks.c **** 
5232:./FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5233:./FreeRTOS/tasks.c **** 
5234:./FreeRTOS/tasks.c ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
5235:./FreeRTOS/tasks.c ****                                             UBaseType_t uxIndexToClear,
5236:./FreeRTOS/tasks.c ****                                             uint32_t ulBitsToClear )
5237:./FreeRTOS/tasks.c ****     {
5238:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5239:./FreeRTOS/tasks.c ****         uint32_t ulReturn;
5240:./FreeRTOS/tasks.c **** 
5241:./FreeRTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5242:./FreeRTOS/tasks.c ****          * its notification state cleared. */
5243:./FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5244:./FreeRTOS/tasks.c **** 
5245:./FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
5246:./FreeRTOS/tasks.c ****         {
5247:./FreeRTOS/tasks.c ****             /* Return the notification as it was before the bits were cleared,
5248:./FreeRTOS/tasks.c ****              * then clear the bit mask. */
5249:./FreeRTOS/tasks.c ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
5250:./FreeRTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
5251:./FreeRTOS/tasks.c ****         }
5252:./FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
5253:./FreeRTOS/tasks.c **** 
5254:./FreeRTOS/tasks.c ****         return ulReturn;
5255:./FreeRTOS/tasks.c ****     }
5256:./FreeRTOS/tasks.c **** 
5257:./FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5258:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5259:./FreeRTOS/tasks.c **** 
5260:./FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5261:./FreeRTOS/tasks.c **** 
5262:./FreeRTOS/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimeCounter( void )
5263:./FreeRTOS/tasks.c ****     {
5264:./FreeRTOS/tasks.c ****         return xIdleTaskHandle->ulRunTimeCounter;
5265:./FreeRTOS/tasks.c ****     }
5266:./FreeRTOS/tasks.c **** 
5267:./FreeRTOS/tasks.c **** #endif
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 109


5268:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5269:./FreeRTOS/tasks.c **** 
5270:./FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5271:./FreeRTOS/tasks.c **** 
5272:./FreeRTOS/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimePercent( void )
5273:./FreeRTOS/tasks.c ****     {
5274:./FreeRTOS/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulReturn;
5275:./FreeRTOS/tasks.c **** 
5276:./FreeRTOS/tasks.c ****         ulTotalTime = portGET_RUN_TIME_COUNTER_VALUE();
5277:./FreeRTOS/tasks.c **** 
5278:./FreeRTOS/tasks.c ****         /* For percentage calculations. */
5279:./FreeRTOS/tasks.c ****         ulTotalTime /= ( configRUN_TIME_COUNTER_TYPE ) 100;
5280:./FreeRTOS/tasks.c **** 
5281:./FreeRTOS/tasks.c ****         /* Avoid divide by zero errors. */
5282:./FreeRTOS/tasks.c ****         if( ulTotalTime > ( configRUN_TIME_COUNTER_TYPE ) 0 )
5283:./FreeRTOS/tasks.c ****         {
5284:./FreeRTOS/tasks.c ****             ulReturn = xIdleTaskHandle->ulRunTimeCounter / ulTotalTime;
5285:./FreeRTOS/tasks.c ****         }
5286:./FreeRTOS/tasks.c ****         else
5287:./FreeRTOS/tasks.c ****         {
5288:./FreeRTOS/tasks.c ****             ulReturn = 0;
5289:./FreeRTOS/tasks.c ****         }
5290:./FreeRTOS/tasks.c **** 
5291:./FreeRTOS/tasks.c ****         return ulReturn;
5292:./FreeRTOS/tasks.c ****     }
5293:./FreeRTOS/tasks.c **** 
5294:./FreeRTOS/tasks.c **** #endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) 
5295:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5296:./FreeRTOS/tasks.c **** 
5297:./FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
5298:./FreeRTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely )
5299:./FreeRTOS/tasks.c **** {
 734              		.loc 1 5299 1 view -0
 735              		.cfi_startproc
 736              		@ args = 0, pretend = 0, frame = 0
 737              		@ frame_needed = 0, uses_anonymous_args = 0
 738              		.loc 1 5299 1 is_stmt 0 view .LVU200
 739 0000 70B5     		push	{r4, r5, r6, lr}
 740              	.LCFI7:
 741              		.cfi_def_cfa_offset 16
 742              		.cfi_offset 4, -16
 743              		.cfi_offset 5, -12
 744              		.cfi_offset 6, -8
 745              		.cfi_offset 14, -4
 746 0002 0446     		mov	r4, r0
 747 0004 0D46     		mov	r5, r1
5300:./FreeRTOS/tasks.c ****     TickType_t xTimeToWake;
 748              		.loc 1 5300 5 is_stmt 1 view .LVU201
5301:./FreeRTOS/tasks.c ****     const TickType_t xConstTickCount = xTickCount;
 749              		.loc 1 5301 5 view .LVU202
 750              		.loc 1 5301 22 is_stmt 0 view .LVU203
 751 0006 234B     		ldr	r3, .L63
 752 0008 1E68     		ldr	r6, [r3]
 753              	.LVL54:
5302:./FreeRTOS/tasks.c **** 
5303:./FreeRTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
5304:./FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 110


5305:./FreeRTOS/tasks.c ****         /* About to enter a delayed list, so ensure the ucDelayAborted flag is
5306:./FreeRTOS/tasks.c ****          * reset to pdFALSE so it can be detected as having been set to pdTRUE
5307:./FreeRTOS/tasks.c ****          * when the task leaves the Blocked state. */
5308:./FreeRTOS/tasks.c ****         pxCurrentTCB->ucDelayAborted = pdFALSE;
5309:./FreeRTOS/tasks.c ****     }
5310:./FreeRTOS/tasks.c ****     #endif
5311:./FreeRTOS/tasks.c **** 
5312:./FreeRTOS/tasks.c ****     /* Remove the task from the ready list before adding it to the blocked list
5313:./FreeRTOS/tasks.c ****      * as the same list item is used for both lists. */
5314:./FreeRTOS/tasks.c ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 754              		.loc 1 5314 5 is_stmt 1 view .LVU204
 755              		.loc 1 5314 38 is_stmt 0 view .LVU205
 756 000a 234B     		ldr	r3, .L63+4
 757 000c 1868     		ldr	r0, [r3]
 758              	.LVL55:
 759              		.loc 1 5314 9 view .LVU206
 760 000e 0430     		adds	r0, r0, #4
 761 0010 FFF7FEFF 		bl	uxListRemove
 762              	.LVL56:
 763              		.loc 1 5314 7 view .LVU207
 764 0014 48B9     		cbnz	r0, .L57
5315:./FreeRTOS/tasks.c ****     {
5316:./FreeRTOS/tasks.c ****         /* The current task must be in a ready list, so there is no need to
5317:./FreeRTOS/tasks.c ****          * check, and the port reset macro can be called directly. */
5318:./FreeRTOS/tasks.c ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCu
 765              		.loc 1 5318 9 is_stmt 1 view .LVU208
 766 0016 204B     		ldr	r3, .L63+4
 767 0018 1B68     		ldr	r3, [r3]
 768 001a DB6A     		ldr	r3, [r3, #44]
 769 001c 0122     		movs	r2, #1
 770 001e 9A40     		lsls	r2, r2, r3
 771 0020 1E49     		ldr	r1, .L63+8
 772 0022 0B68     		ldr	r3, [r1]
 773 0024 23EA0203 		bic	r3, r3, r2
 774 0028 0B60     		str	r3, [r1]
 775              	.L57:
5319:./FreeRTOS/tasks.c ****     }
5320:./FreeRTOS/tasks.c ****     else
5321:./FreeRTOS/tasks.c ****     {
5322:./FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 776              		.loc 1 5322 33 view .LVU209
5323:./FreeRTOS/tasks.c ****     }
5324:./FreeRTOS/tasks.c **** 
5325:./FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
5326:./FreeRTOS/tasks.c ****     {
5327:./FreeRTOS/tasks.c ****         if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 777              		.loc 1 5327 9 view .LVU210
 778              		.loc 1 5327 11 is_stmt 0 view .LVU211
 779 002a B4F1FF3F 		cmp	r4, #-1
 780 002e 0DD0     		beq	.L62
 781              	.L58:
5328:./FreeRTOS/tasks.c ****         {
5329:./FreeRTOS/tasks.c ****             /* Add the task to the suspended task list instead of a delayed task
5330:./FreeRTOS/tasks.c ****              * list to ensure it is not woken by a timing event.  It will block
5331:./FreeRTOS/tasks.c ****              * indefinitely. */
5332:./FreeRTOS/tasks.c ****             listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5333:./FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 111


5334:./FreeRTOS/tasks.c ****         else
5335:./FreeRTOS/tasks.c ****         {
5336:./FreeRTOS/tasks.c ****             /* Calculate the time at which the task should be woken if the event
5337:./FreeRTOS/tasks.c ****              * does not occur.  This may overflow but this doesn't matter, the
5338:./FreeRTOS/tasks.c ****              * kernel will manage it correctly. */
5339:./FreeRTOS/tasks.c ****             xTimeToWake = xConstTickCount + xTicksToWait;
 782              		.loc 1 5339 13 is_stmt 1 view .LVU212
 783              		.loc 1 5339 25 is_stmt 0 view .LVU213
 784 0030 3444     		add	r4, r4, r6
 785              	.LVL57:
5340:./FreeRTOS/tasks.c **** 
5341:./FreeRTOS/tasks.c ****             /* The list item will be inserted in wake time order. */
5342:./FreeRTOS/tasks.c ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 786              		.loc 1 5342 13 is_stmt 1 view .LVU214
 787 0032 194B     		ldr	r3, .L63+4
 788 0034 1B68     		ldr	r3, [r3]
 789 0036 5C60     		str	r4, [r3, #4]
5343:./FreeRTOS/tasks.c **** 
5344:./FreeRTOS/tasks.c ****             if( xTimeToWake < xConstTickCount )
 790              		.loc 1 5344 13 view .LVU215
 791              		.loc 1 5344 15 is_stmt 0 view .LVU216
 792 0038 A642     		cmp	r6, r4
 793 003a 1DD9     		bls	.L60
5345:./FreeRTOS/tasks.c ****             {
5346:./FreeRTOS/tasks.c ****                 /* Wake time has overflowed.  Place this item in the overflow
5347:./FreeRTOS/tasks.c ****                  * list. */
5348:./FreeRTOS/tasks.c ****                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 794              		.loc 1 5348 17 is_stmt 1 view .LVU217
 795 003c 184B     		ldr	r3, .L63+12
 796 003e 1868     		ldr	r0, [r3]
 797              		.loc 1 5348 72 is_stmt 0 view .LVU218
 798 0040 154B     		ldr	r3, .L63+4
 799 0042 1968     		ldr	r1, [r3]
 800              		.loc 1 5348 17 view .LVU219
 801 0044 0431     		adds	r1, r1, #4
 802 0046 FFF7FEFF 		bl	vListInsert
 803              	.LVL58:
 804              	.L56:
5349:./FreeRTOS/tasks.c ****             }
5350:./FreeRTOS/tasks.c ****             else
5351:./FreeRTOS/tasks.c ****             {
5352:./FreeRTOS/tasks.c ****                 /* The wake time has not overflowed, so the current block list
5353:./FreeRTOS/tasks.c ****                  * is used. */
5354:./FreeRTOS/tasks.c ****                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5355:./FreeRTOS/tasks.c **** 
5356:./FreeRTOS/tasks.c ****                 /* If the task entering the blocked state was placed at the
5357:./FreeRTOS/tasks.c ****                  * head of the list of blocked tasks then xNextTaskUnblockTime
5358:./FreeRTOS/tasks.c ****                  * needs to be updated too. */
5359:./FreeRTOS/tasks.c ****                 if( xTimeToWake < xNextTaskUnblockTime )
5360:./FreeRTOS/tasks.c ****                 {
5361:./FreeRTOS/tasks.c ****                     xNextTaskUnblockTime = xTimeToWake;
5362:./FreeRTOS/tasks.c ****                 }
5363:./FreeRTOS/tasks.c ****                 else
5364:./FreeRTOS/tasks.c ****                 {
5365:./FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5366:./FreeRTOS/tasks.c ****                 }
5367:./FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 112


5368:./FreeRTOS/tasks.c ****         }
5369:./FreeRTOS/tasks.c ****     }
5370:./FreeRTOS/tasks.c ****     #else /* INCLUDE_vTaskSuspend */
5371:./FreeRTOS/tasks.c ****     {
5372:./FreeRTOS/tasks.c ****         /* Calculate the time at which the task should be woken if the event
5373:./FreeRTOS/tasks.c ****          * does not occur.  This may overflow but this doesn't matter, the kernel
5374:./FreeRTOS/tasks.c ****          * will manage it correctly. */
5375:./FreeRTOS/tasks.c ****         xTimeToWake = xConstTickCount + xTicksToWait;
5376:./FreeRTOS/tasks.c **** 
5377:./FreeRTOS/tasks.c ****         /* The list item will be inserted in wake time order. */
5378:./FreeRTOS/tasks.c ****         listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5379:./FreeRTOS/tasks.c **** 
5380:./FreeRTOS/tasks.c ****         if( xTimeToWake < xConstTickCount )
5381:./FreeRTOS/tasks.c ****         {
5382:./FreeRTOS/tasks.c ****             /* Wake time has overflowed.  Place this item in the overflow list. */
5383:./FreeRTOS/tasks.c ****             vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5384:./FreeRTOS/tasks.c ****         }
5385:./FreeRTOS/tasks.c ****         else
5386:./FreeRTOS/tasks.c ****         {
5387:./FreeRTOS/tasks.c ****             /* The wake time has not overflowed, so the current block list is used. */
5388:./FreeRTOS/tasks.c ****             vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5389:./FreeRTOS/tasks.c **** 
5390:./FreeRTOS/tasks.c ****             /* If the task entering the blocked state was placed at the head of the
5391:./FreeRTOS/tasks.c ****              * list of blocked tasks then xNextTaskUnblockTime needs to be updated
5392:./FreeRTOS/tasks.c ****              * too. */
5393:./FreeRTOS/tasks.c ****             if( xTimeToWake < xNextTaskUnblockTime )
5394:./FreeRTOS/tasks.c ****             {
5395:./FreeRTOS/tasks.c ****                 xNextTaskUnblockTime = xTimeToWake;
5396:./FreeRTOS/tasks.c ****             }
5397:./FreeRTOS/tasks.c ****             else
5398:./FreeRTOS/tasks.c ****             {
5399:./FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
5400:./FreeRTOS/tasks.c ****             }
5401:./FreeRTOS/tasks.c ****         }
5402:./FreeRTOS/tasks.c **** 
5403:./FreeRTOS/tasks.c ****         /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5404:./FreeRTOS/tasks.c ****         ( void ) xCanBlockIndefinitely;
5405:./FreeRTOS/tasks.c ****     }
5406:./FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
5407:./FreeRTOS/tasks.c **** }
 805              		.loc 1 5407 1 view .LVU220
 806 004a 70BD     		pop	{r4, r5, r6, pc}
 807              	.LVL59:
 808              	.L62:
5327:./FreeRTOS/tasks.c ****         {
 809              		.loc 1 5327 47 discriminator 1 view .LVU221
 810 004c 002D     		cmp	r5, #0
 811 004e EFD0     		beq	.L58
 812              	.LBB36:
5332:./FreeRTOS/tasks.c ****         }
 813              		.loc 1 5332 13 is_stmt 1 view .LVU222
 814 0050 144A     		ldr	r2, .L63+16
 815 0052 5168     		ldr	r1, [r2, #4]
 816              	.LVL60:
5332:./FreeRTOS/tasks.c ****         }
 817              		.loc 1 5332 13 view .LVU223
5332:./FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 113


 818              		.loc 1 5332 13 view .LVU224
5332:./FreeRTOS/tasks.c ****         }
 819              		.loc 1 5332 13 view .LVU225
 820 0054 104B     		ldr	r3, .L63+4
 821 0056 1868     		ldr	r0, [r3]
 822 0058 8160     		str	r1, [r0, #8]
5332:./FreeRTOS/tasks.c ****         }
 823              		.loc 1 5332 13 view .LVU226
 824 005a 1868     		ldr	r0, [r3]
 825 005c 8C68     		ldr	r4, [r1, #8]
 826              	.LVL61:
5332:./FreeRTOS/tasks.c ****         }
 827              		.loc 1 5332 13 is_stmt 0 view .LVU227
 828 005e C460     		str	r4, [r0, #12]
5332:./FreeRTOS/tasks.c ****         }
 829              		.loc 1 5332 13 is_stmt 1 view .LVU228
 830 0060 1868     		ldr	r0, [r3]
 831 0062 0430     		adds	r0, r0, #4
 832 0064 6060     		str	r0, [r4, #4]
5332:./FreeRTOS/tasks.c ****         }
 833              		.loc 1 5332 13 view .LVU229
 834 0066 1868     		ldr	r0, [r3]
 835 0068 0430     		adds	r0, r0, #4
 836 006a 8860     		str	r0, [r1, #8]
5332:./FreeRTOS/tasks.c ****         }
 837              		.loc 1 5332 13 view .LVU230
 838 006c 1B68     		ldr	r3, [r3]
 839 006e 5A61     		str	r2, [r3, #20]
5332:./FreeRTOS/tasks.c ****         }
 840              		.loc 1 5332 13 view .LVU231
 841 0070 1368     		ldr	r3, [r2]
 842 0072 0133     		adds	r3, r3, #1
 843 0074 1360     		str	r3, [r2]
 844              	.LBE36:
5332:./FreeRTOS/tasks.c ****         }
 845              		.loc 1 5332 85 view .LVU232
5332:./FreeRTOS/tasks.c ****         }
 846              		.loc 1 5332 13 is_stmt 0 view .LVU233
 847 0076 E8E7     		b	.L56
 848              	.LVL62:
 849              	.L60:
5354:./FreeRTOS/tasks.c **** 
 850              		.loc 1 5354 17 is_stmt 1 view .LVU234
 851 0078 0B4B     		ldr	r3, .L63+20
 852 007a 1868     		ldr	r0, [r3]
5354:./FreeRTOS/tasks.c **** 
 853              		.loc 1 5354 64 is_stmt 0 view .LVU235
 854 007c 064B     		ldr	r3, .L63+4
 855 007e 1968     		ldr	r1, [r3]
5354:./FreeRTOS/tasks.c **** 
 856              		.loc 1 5354 17 view .LVU236
 857 0080 0431     		adds	r1, r1, #4
 858 0082 FFF7FEFF 		bl	vListInsert
 859              	.LVL63:
5359:./FreeRTOS/tasks.c ****                 {
 860              		.loc 1 5359 17 is_stmt 1 view .LVU237
5359:./FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 114


 861              		.loc 1 5359 33 is_stmt 0 view .LVU238
 862 0086 094B     		ldr	r3, .L63+24
 863 0088 1B68     		ldr	r3, [r3]
5359:./FreeRTOS/tasks.c ****                 {
 864              		.loc 1 5359 19 view .LVU239
 865 008a A342     		cmp	r3, r4
 866 008c DDD9     		bls	.L56
5361:./FreeRTOS/tasks.c ****                 }
 867              		.loc 1 5361 21 is_stmt 1 view .LVU240
5361:./FreeRTOS/tasks.c ****                 }
 868              		.loc 1 5361 42 is_stmt 0 view .LVU241
 869 008e 074B     		ldr	r3, .L63+24
 870 0090 1C60     		str	r4, [r3]
5365:./FreeRTOS/tasks.c ****                 }
 871              		.loc 1 5365 45 is_stmt 1 view .LVU242
 872              		.loc 1 5407 1 is_stmt 0 view .LVU243
 873 0092 DAE7     		b	.L56
 874              	.L64:
 875              		.align	2
 876              	.L63:
 877 0094 00000000 		.word	xTickCount
 878 0098 00000000 		.word	pxCurrentTCB
 879 009c 00000000 		.word	uxTopReadyPriority
 880 00a0 00000000 		.word	pxOverflowDelayedTaskList
 881 00a4 00000000 		.word	xSuspendedTaskList
 882 00a8 00000000 		.word	pxDelayedTaskList
 883 00ac 00000000 		.word	xNextTaskUnblockTime
 884              		.cfi_endproc
 885              	.LFE86:
 887              		.section	.text.xTaskCreate,"ax",%progbits
 888              		.align	1
 889              		.global	xTaskCreate
 890              		.syntax unified
 891              		.thumb
 892              		.thumb_func
 894              	xTaskCreate:
 895              	.LVL64:
 896              	.LFB34:
 727:./FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 897              		.loc 1 727 5 is_stmt 1 view -0
 898              		.cfi_startproc
 899              		@ args = 8, pretend = 0, frame = 0
 900              		@ frame_needed = 0, uses_anonymous_args = 0
 727:./FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 901              		.loc 1 727 5 is_stmt 0 view .LVU245
 902 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 903              	.LCFI8:
 904              		.cfi_def_cfa_offset 28
 905              		.cfi_offset 4, -28
 906              		.cfi_offset 5, -24
 907              		.cfi_offset 6, -20
 908              		.cfi_offset 7, -16
 909              		.cfi_offset 8, -12
 910              		.cfi_offset 9, -8
 911              		.cfi_offset 14, -4
 912 0004 85B0     		sub	sp, sp, #20
 913              	.LCFI9:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 115


 914              		.cfi_def_cfa_offset 48
 915 0006 0746     		mov	r7, r0
 916 0008 8846     		mov	r8, r1
 917 000a 1446     		mov	r4, r2
 918 000c 1E46     		mov	r6, r3
 728:./FreeRTOS/tasks.c ****         BaseType_t xReturn;
 919              		.loc 1 728 9 is_stmt 1 view .LVU246
 729:./FreeRTOS/tasks.c **** 
 920              		.loc 1 729 9 view .LVU247
 921              	.LBB37:
 760:./FreeRTOS/tasks.c **** 
 922              		.loc 1 760 13 view .LVU248
 763:./FreeRTOS/tasks.c **** 
 923              		.loc 1 763 13 view .LVU249
 763:./FreeRTOS/tasks.c **** 
 924              		.loc 1 763 23 is_stmt 0 view .LVU250
 925 000e 9000     		lsls	r0, r2, #2
 926              	.LVL65:
 763:./FreeRTOS/tasks.c **** 
 927              		.loc 1 763 23 view .LVU251
 928 0010 FFF7FEFF 		bl	pvPortMalloc
 929              	.LVL66:
 765:./FreeRTOS/tasks.c ****             {
 930              		.loc 1 765 13 is_stmt 1 view .LVU252
 765:./FreeRTOS/tasks.c ****             {
 931              		.loc 1 765 15 is_stmt 0 view .LVU253
 932 0014 18B3     		cbz	r0, .L68
 933 0016 8146     		mov	r9, r0
 768:./FreeRTOS/tasks.c **** 
 934              		.loc 1 768 17 is_stmt 1 view .LVU254
 768:./FreeRTOS/tasks.c **** 
 935              		.loc 1 768 40 is_stmt 0 view .LVU255
 936 0018 5420     		movs	r0, #84
 937              	.LVL67:
 768:./FreeRTOS/tasks.c **** 
 938              		.loc 1 768 40 view .LVU256
 939 001a FFF7FEFF 		bl	pvPortMalloc
 940              	.LVL68:
 770:./FreeRTOS/tasks.c ****                 {
 941              		.loc 1 770 17 is_stmt 1 view .LVU257
 770:./FreeRTOS/tasks.c ****                 {
 942              		.loc 1 770 19 is_stmt 0 view .LVU258
 943 001e 0546     		mov	r5, r0
 944 0020 B8B1     		cbz	r0, .L67
 772:./FreeRTOS/tasks.c **** 
 945              		.loc 1 772 21 is_stmt 1 view .LVU259
 946 0022 5422     		movs	r2, #84
 947 0024 0021     		movs	r1, #0
 948 0026 FFF7FEFF 		bl	memset
 949              	.LVL69:
 775:./FreeRTOS/tasks.c ****                 }
 950              		.loc 1 775 21 view .LVU260
 775:./FreeRTOS/tasks.c ****                 }
 951              		.loc 1 775 39 is_stmt 0 view .LVU261
 952 002a C5F83090 		str	r9, [r5, #48]
 775:./FreeRTOS/tasks.c ****                 }
 953              		.loc 1 775 39 view .LVU262
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 116


 954              	.LBE37:
 791:./FreeRTOS/tasks.c ****         {
 955              		.loc 1 791 9 is_stmt 1 view .LVU263
 801:./FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 956              		.loc 1 801 13 view .LVU264
 957 002e 0023     		movs	r3, #0
 958 0030 0393     		str	r3, [sp, #12]
 959 0032 0295     		str	r5, [sp, #8]
 960 0034 0D9B     		ldr	r3, [sp, #52]
 961 0036 0193     		str	r3, [sp, #4]
 962 0038 0C9B     		ldr	r3, [sp, #48]
 963 003a 0093     		str	r3, [sp]
 964 003c 3346     		mov	r3, r6
 965 003e 2246     		mov	r2, r4
 966 0040 4146     		mov	r1, r8
 967 0042 3846     		mov	r0, r7
 968 0044 FFF7FEFF 		bl	prvInitialiseNewTask
 969              	.LVL70:
 802:./FreeRTOS/tasks.c ****             xReturn = pdPASS;
 970              		.loc 1 802 13 view .LVU265
 971 0048 2846     		mov	r0, r5
 972 004a FFF7FEFF 		bl	prvAddNewTaskToReadyList
 973              	.LVL71:
 803:./FreeRTOS/tasks.c ****         }
 974              		.loc 1 803 13 view .LVU266
 803:./FreeRTOS/tasks.c ****         }
 975              		.loc 1 803 21 is_stmt 0 view .LVU267
 976 004e 0120     		movs	r0, #1
 977 0050 07E0     		b	.L65
 978              	.LVL72:
 979              	.L67:
 980              	.LBB38:
 781:./FreeRTOS/tasks.c ****                 }
 981              		.loc 1 781 21 is_stmt 1 view .LVU268
 982 0052 4846     		mov	r0, r9
 983              	.LVL73:
 781:./FreeRTOS/tasks.c ****                 }
 984              		.loc 1 781 21 is_stmt 0 view .LVU269
 985 0054 FFF7FEFF 		bl	vPortFree
 986              	.LVL74:
 781:./FreeRTOS/tasks.c ****                 }
 987              		.loc 1 781 21 view .LVU270
 988              	.LBE38:
 791:./FreeRTOS/tasks.c ****         {
 989              		.loc 1 791 9 is_stmt 1 view .LVU271
 807:./FreeRTOS/tasks.c ****         }
 990              		.loc 1 807 21 is_stmt 0 view .LVU272
 991 0058 4FF0FF30 		mov	r0, #-1
 992 005c 01E0     		b	.L65
 993              	.LVL75:
 994              	.L68:
 807:./FreeRTOS/tasks.c ****         }
 995              		.loc 1 807 21 view .LVU273
 996 005e 4FF0FF30 		mov	r0, #-1
 997              	.LVL76:
 810:./FreeRTOS/tasks.c ****     }
 998              		.loc 1 810 9 is_stmt 1 view .LVU274
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 117


 999              	.L65:
 811:./FreeRTOS/tasks.c **** 
 1000              		.loc 1 811 5 is_stmt 0 view .LVU275
 1001 0062 05B0     		add	sp, sp, #20
 1002              	.LCFI10:
 1003              		.cfi_def_cfa_offset 28
 1004              		@ sp needed
 1005 0064 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 811:./FreeRTOS/tasks.c **** 
 1006              		.loc 1 811 5 view .LVU276
 1007              		.cfi_endproc
 1008              	.LFE34:
 1010              		.section	.text.vTaskDelete,"ax",%progbits
 1011              		.align	1
 1012              		.global	vTaskDelete
 1013              		.syntax unified
 1014              		.thumb
 1015              		.thumb_func
 1017              	vTaskDelete:
 1018              	.LVL77:
 1019              	.LFB37:
1113:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 1020              		.loc 1 1113 5 is_stmt 1 view -0
 1021              		.cfi_startproc
 1022              		@ args = 0, pretend = 0, frame = 0
 1023              		@ frame_needed = 0, uses_anonymous_args = 0
1113:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 1024              		.loc 1 1113 5 is_stmt 0 view .LVU278
 1025 0000 38B5     		push	{r3, r4, r5, lr}
 1026              	.LCFI11:
 1027              		.cfi_def_cfa_offset 16
 1028              		.cfi_offset 3, -16
 1029              		.cfi_offset 4, -12
 1030              		.cfi_offset 5, -8
 1031              		.cfi_offset 14, -4
 1032 0002 0446     		mov	r4, r0
1114:./FreeRTOS/tasks.c **** 
 1033              		.loc 1 1114 9 is_stmt 1 view .LVU279
1116:./FreeRTOS/tasks.c ****         {
 1034              		.loc 1 1116 9 view .LVU280
 1035 0004 FFF7FEFF 		bl	vPortEnterCritical
 1036              	.LVL78:
1120:./FreeRTOS/tasks.c **** 
 1037              		.loc 1 1120 13 view .LVU281
1120:./FreeRTOS/tasks.c **** 
 1038              		.loc 1 1120 21 is_stmt 0 view .LVU282
 1039 0008 002C     		cmp	r4, #0
 1040 000a 38D0     		beq	.L79
 1041              	.LVL79:
 1042              	.L71:
1123:./FreeRTOS/tasks.c ****             {
 1043              		.loc 1 1123 13 is_stmt 1 discriminator 4 view .LVU283
1123:./FreeRTOS/tasks.c ****             {
 1044              		.loc 1 1123 17 is_stmt 0 discriminator 4 view .LVU284
 1045 000c 251D     		adds	r5, r4, #4
 1046 000e 2846     		mov	r0, r5
 1047 0010 FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 118


 1048              	.LVL80:
1123:./FreeRTOS/tasks.c ****             {
 1049              		.loc 1 1123 15 discriminator 4 view .LVU285
 1050 0014 70B9     		cbnz	r0, .L72
1125:./FreeRTOS/tasks.c ****             }
 1051              		.loc 1 1125 17 is_stmt 1 view .LVU286
 1052 0016 E26A     		ldr	r2, [r4, #44]
 1053 0018 02EB8203 		add	r3, r2, r2, lsl #2
 1054 001c 9B00     		lsls	r3, r3, #2
 1055 001e 2349     		ldr	r1, .L82
 1056 0020 CB58     		ldr	r3, [r1, r3]
 1057 0022 3BB9     		cbnz	r3, .L72
1125:./FreeRTOS/tasks.c ****             }
 1058              		.loc 1 1125 17 discriminator 1 view .LVU287
 1059 0024 0123     		movs	r3, #1
 1060 0026 03FA02F2 		lsl	r2, r3, r2
 1061 002a 2149     		ldr	r1, .L82+4
 1062 002c 0B68     		ldr	r3, [r1]
 1063 002e 23EA0203 		bic	r3, r3, r2
 1064 0032 0B60     		str	r3, [r1]
 1065              	.L72:
1129:./FreeRTOS/tasks.c ****             }
 1066              		.loc 1 1129 41 view .LVU288
1133:./FreeRTOS/tasks.c ****             {
 1067              		.loc 1 1133 13 view .LVU289
1133:./FreeRTOS/tasks.c ****             {
 1068              		.loc 1 1133 17 is_stmt 0 view .LVU290
 1069 0034 A36A     		ldr	r3, [r4, #40]
1133:./FreeRTOS/tasks.c ****             {
 1070              		.loc 1 1133 15 view .LVU291
 1071 0036 1BB1     		cbz	r3, .L73
1135:./FreeRTOS/tasks.c ****             }
 1072              		.loc 1 1135 17 is_stmt 1 view .LVU292
1135:./FreeRTOS/tasks.c ****             }
 1073              		.loc 1 1135 26 is_stmt 0 view .LVU293
 1074 0038 04F11800 		add	r0, r4, #24
 1075 003c FFF7FEFF 		bl	uxListRemove
 1076              	.LVL81:
 1077              	.L73:
1139:./FreeRTOS/tasks.c ****             }
 1078              		.loc 1 1139 41 is_stmt 1 view .LVU294
1146:./FreeRTOS/tasks.c **** 
 1079              		.loc 1 1146 13 view .LVU295
1146:./FreeRTOS/tasks.c **** 
 1080              		.loc 1 1146 25 is_stmt 0 view .LVU296
 1081 0040 1C4A     		ldr	r2, .L82+8
 1082 0042 1368     		ldr	r3, [r2]
 1083 0044 0133     		adds	r3, r3, #1
 1084 0046 1360     		str	r3, [r2]
1148:./FreeRTOS/tasks.c ****             {
 1085              		.loc 1 1148 13 is_stmt 1 view .LVU297
1148:./FreeRTOS/tasks.c ****             {
 1086              		.loc 1 1148 23 is_stmt 0 view .LVU298
 1087 0048 1B4B     		ldr	r3, .L82+12
 1088 004a 1B68     		ldr	r3, [r3]
1148:./FreeRTOS/tasks.c ****             {
 1089              		.loc 1 1148 15 view .LVU299
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 119


 1090 004c A342     		cmp	r3, r4
 1091 004e 19D0     		beq	.L80
1175:./FreeRTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
 1092              		.loc 1 1175 17 is_stmt 1 view .LVU300
 1093 0050 1A4A     		ldr	r2, .L82+16
 1094 0052 1368     		ldr	r3, [r2]
 1095 0054 013B     		subs	r3, r3, #1
 1096 0056 1360     		str	r3, [r2]
1176:./FreeRTOS/tasks.c **** 
 1097              		.loc 1 1176 42 view .LVU301
1180:./FreeRTOS/tasks.c ****             }
 1098              		.loc 1 1180 17 view .LVU302
 1099 0058 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1100              	.LVL82:
 1101              	.L75:
1183:./FreeRTOS/tasks.c **** 
 1102              		.loc 1 1183 9 view .LVU303
 1103 005c FFF7FEFF 		bl	vPortExitCritical
 1104              	.LVL83:
1188:./FreeRTOS/tasks.c ****         {
 1105              		.loc 1 1188 9 view .LVU304
1188:./FreeRTOS/tasks.c ****         {
 1106              		.loc 1 1188 19 is_stmt 0 view .LVU305
 1107 0060 154B     		ldr	r3, .L82+12
 1108 0062 1B68     		ldr	r3, [r3]
1188:./FreeRTOS/tasks.c ****         {
 1109              		.loc 1 1188 11 view .LVU306
 1110 0064 A342     		cmp	r3, r4
 1111 0066 02D0     		beq	.L76
1190:./FreeRTOS/tasks.c ****         }
 1112              		.loc 1 1190 13 is_stmt 1 view .LVU307
 1113 0068 2046     		mov	r0, r4
 1114 006a FFF7FEFF 		bl	prvDeleteTCB
 1115              	.LVL84:
 1116              	.L76:
1195:./FreeRTOS/tasks.c ****         {
 1117              		.loc 1 1195 9 view .LVU308
1195:./FreeRTOS/tasks.c ****         {
 1118              		.loc 1 1195 31 is_stmt 0 view .LVU309
 1119 006e 144B     		ldr	r3, .L82+20
 1120 0070 1B68     		ldr	r3, [r3]
1195:./FreeRTOS/tasks.c ****         {
 1121              		.loc 1 1195 11 view .LVU310
 1122 0072 1BB1     		cbz	r3, .L70
1197:./FreeRTOS/tasks.c ****             {
 1123              		.loc 1 1197 13 is_stmt 1 view .LVU311
1197:./FreeRTOS/tasks.c ****             {
 1124              		.loc 1 1197 23 is_stmt 0 view .LVU312
 1125 0074 104B     		ldr	r3, .L82+12
 1126 0076 1B68     		ldr	r3, [r3]
1197:./FreeRTOS/tasks.c ****             {
 1127              		.loc 1 1197 15 view .LVU313
 1128 0078 A342     		cmp	r3, r4
 1129 007a 0CD0     		beq	.L81
 1130              	.L70:
1207:./FreeRTOS/tasks.c **** 
 1131              		.loc 1 1207 5 view .LVU314
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 120


 1132 007c 38BD     		pop	{r3, r4, r5, pc}
 1133              	.LVL85:
 1134              	.L79:
1120:./FreeRTOS/tasks.c **** 
 1135              		.loc 1 1120 21 discriminator 1 view .LVU315
 1136 007e 0E4B     		ldr	r3, .L82+12
 1137 0080 1C68     		ldr	r4, [r3]
 1138              	.LVL86:
1120:./FreeRTOS/tasks.c **** 
 1139              		.loc 1 1120 21 discriminator 1 view .LVU316
 1140 0082 C3E7     		b	.L71
 1141              	.LVL87:
 1142              	.L80:
1155:./FreeRTOS/tasks.c **** 
 1143              		.loc 1 1155 17 is_stmt 1 view .LVU317
 1144 0084 2946     		mov	r1, r5
 1145 0086 0F48     		ldr	r0, .L82+24
 1146 0088 FFF7FEFF 		bl	vListInsertEnd
 1147              	.LVL88:
1160:./FreeRTOS/tasks.c **** 
 1148              		.loc 1 1160 17 view .LVU318
 1149 008c 0E4A     		ldr	r2, .L82+28
 1150 008e 1368     		ldr	r3, [r2]
 1151 0090 0133     		adds	r3, r3, #1
 1152 0092 1360     		str	r3, [r2]
1164:./FreeRTOS/tasks.c **** 
 1153              		.loc 1 1164 42 view .LVU319
1171:./FreeRTOS/tasks.c ****             }
 1154              		.loc 1 1171 66 view .LVU320
 1155 0094 E2E7     		b	.L75
 1156              	.L81:
1199:./FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 1157              		.loc 1 1199 58 view .LVU321
1200:./FreeRTOS/tasks.c ****             }
 1158              		.loc 1 1200 17 view .LVU322
 1159 0096 4FF0E023 		mov	r3, #-536813568
 1160 009a 4FF08052 		mov	r2, #268435456
 1161 009e C3F8042D 		str	r2, [r3, #3332]
1200:./FreeRTOS/tasks.c ****             }
 1162              		.loc 1 1200 17 view .LVU323
 1163              		.syntax unified
 1164              	@ 1200 "./FreeRTOS/tasks.c" 1
 1165 00a2 BFF34F8F 		dsb
 1166              	@ 0 "" 2
1200:./FreeRTOS/tasks.c ****             }
 1167              		.loc 1 1200 17 view .LVU324
 1168              	@ 1200 "./FreeRTOS/tasks.c" 1
 1169 00a6 BFF36F8F 		isb
 1170              	@ 0 "" 2
1200:./FreeRTOS/tasks.c ****             }
 1171              		.loc 1 1200 39 view .LVU325
1204:./FreeRTOS/tasks.c ****             }
 1172              		.loc 1 1204 41 view .LVU326
1207:./FreeRTOS/tasks.c **** 
 1173              		.loc 1 1207 5 is_stmt 0 view .LVU327
 1174              		.thumb
 1175              		.syntax unified
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 121


 1176 00aa E7E7     		b	.L70
 1177              	.L83:
 1178              		.align	2
 1179              	.L82:
 1180 00ac 00000000 		.word	pxReadyTasksLists
 1181 00b0 00000000 		.word	uxTopReadyPriority
 1182 00b4 00000000 		.word	uxTaskNumber
 1183 00b8 00000000 		.word	pxCurrentTCB
 1184 00bc 00000000 		.word	uxCurrentNumberOfTasks
 1185 00c0 00000000 		.word	xSchedulerRunning
 1186 00c4 00000000 		.word	xTasksWaitingTermination
 1187 00c8 00000000 		.word	uxDeletedTasksWaitingCleanUp
 1188              		.cfi_endproc
 1189              	.LFE37:
 1191              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1192              		.align	1
 1193              		.global	uxTaskPriorityGet
 1194              		.syntax unified
 1195              		.thumb
 1196              		.thumb_func
 1198              	uxTaskPriorityGet:
 1199              	.LVL89:
 1200              	.LFB40:
1446:./FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
 1201              		.loc 1 1446 5 is_stmt 1 view -0
 1202              		.cfi_startproc
 1203              		@ args = 0, pretend = 0, frame = 0
 1204              		@ frame_needed = 0, uses_anonymous_args = 0
1446:./FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
 1205              		.loc 1 1446 5 is_stmt 0 view .LVU329
 1206 0000 10B5     		push	{r4, lr}
 1207              	.LCFI12:
 1208              		.cfi_def_cfa_offset 8
 1209              		.cfi_offset 4, -8
 1210              		.cfi_offset 14, -4
 1211 0002 0446     		mov	r4, r0
1447:./FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
 1212              		.loc 1 1447 9 is_stmt 1 view .LVU330
1448:./FreeRTOS/tasks.c **** 
 1213              		.loc 1 1448 9 view .LVU331
1450:./FreeRTOS/tasks.c ****         {
 1214              		.loc 1 1450 9 view .LVU332
 1215 0004 FFF7FEFF 		bl	vPortEnterCritical
 1216              	.LVL90:
1454:./FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1217              		.loc 1 1454 13 view .LVU333
1454:./FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1218              		.loc 1 1454 21 is_stmt 0 view .LVU334
 1219 0008 24B1     		cbz	r4, .L87
 1220              	.LVL91:
 1221              	.L85:
1455:./FreeRTOS/tasks.c ****         }
 1222              		.loc 1 1455 13 is_stmt 1 discriminator 4 view .LVU335
1455:./FreeRTOS/tasks.c ****         }
 1223              		.loc 1 1455 22 is_stmt 0 discriminator 4 view .LVU336
 1224 000a E46A     		ldr	r4, [r4, #44]
 1225              	.LVL92:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 122


1457:./FreeRTOS/tasks.c **** 
 1226              		.loc 1 1457 9 is_stmt 1 discriminator 4 view .LVU337
 1227 000c FFF7FEFF 		bl	vPortExitCritical
 1228              	.LVL93:
1459:./FreeRTOS/tasks.c ****     }
 1229              		.loc 1 1459 9 discriminator 4 view .LVU338
1460:./FreeRTOS/tasks.c **** 
 1230              		.loc 1 1460 5 is_stmt 0 discriminator 4 view .LVU339
 1231 0010 2046     		mov	r0, r4
 1232 0012 10BD     		pop	{r4, pc}
 1233              	.LVL94:
 1234              	.L87:
1454:./FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1235              		.loc 1 1454 21 discriminator 1 view .LVU340
 1236 0014 014B     		ldr	r3, .L88
 1237 0016 1C68     		ldr	r4, [r3]
 1238              	.LVL95:
1454:./FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1239              		.loc 1 1454 21 discriminator 1 view .LVU341
 1240 0018 F7E7     		b	.L85
 1241              	.L89:
 1242 001a 00BF     		.align	2
 1243              	.L88:
 1244 001c 00000000 		.word	pxCurrentTCB
 1245              		.cfi_endproc
 1246              	.LFE40:
 1248              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1249              		.align	1
 1250              		.global	uxTaskPriorityGetFromISR
 1251              		.syntax unified
 1252              		.thumb
 1253              		.thumb_func
 1255              	uxTaskPriorityGetFromISR:
 1256              	.LVL96:
 1257              	.LFB41:
1468:./FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
 1258              		.loc 1 1468 5 is_stmt 1 view -0
 1259              		.cfi_startproc
 1260              		@ args = 0, pretend = 0, frame = 0
 1261              		@ frame_needed = 0, uses_anonymous_args = 0
 1262              		@ link register save eliminated.
1469:./FreeRTOS/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
 1263              		.loc 1 1469 9 view .LVU343
1470:./FreeRTOS/tasks.c **** 
 1264              		.loc 1 1470 9 view .LVU344
1488:./FreeRTOS/tasks.c **** 
 1265              		.loc 1 1488 51 view .LVU345
1490:./FreeRTOS/tasks.c ****         {
 1266              		.loc 1 1490 9 view .LVU346
 1267              	.LBB39:
 1268              	.LBI39:
 1269              		.file 2 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h"
   1:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.5.1
   3:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * SPDX-License-Identifier: MIT
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 123


   6:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
   7:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  14:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  17:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  24:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  27:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  */
  28:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #include <stdlib.h>
  29:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #include <string.h>
  30:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #include <stdint.h>
  31:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #include <FreeRTOSConfig.h>
  32:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #include <projdefs.h>
  33:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  34:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  35:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define PORTMACRO_H
  36:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  37:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifdef __cplusplus
  38:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         extern "C" {
  39:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
  40:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  41:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  42:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  43:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  44:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  45:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  46:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  47:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  48:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  49:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  */
  50:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  51:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  52:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portCHAR          char
  53:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portFLOAT         float
  54:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portDOUBLE        double
  55:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portLONG          long
  56:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portSHORT         short
  57:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  58:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portBASE_TYPE     long
  59:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  60:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  61:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     typedef long             BaseType_t;
  62:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     typedef unsigned long    UBaseType_t;
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 124


  63:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  64:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  65:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         typedef uint16_t     TickType_t;
  66:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  67:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #else
  68:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         typedef uint32_t     TickType_t;
  69:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  70:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  71:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  72:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * not need to be guarded with a critical section. */
  73:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  74:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
  75:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  76:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  77:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  78:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  79:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  80:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  81:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  82:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  83:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  84:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  85:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portYIELD()                                 \
  86:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {                                                   \
  87:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  88:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  89:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****                                                         \
  90:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  91:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  92:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  93:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile ( "isb" );                                  \
  94:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
  95:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  96:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  97:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  98:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  99:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
 100:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 101:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 102:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
 103:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     extern void vPortEnterCritical( void );
 104:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     extern void vPortExitCritical( void );
 105:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 106:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 107:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 108:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 109:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 110:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 111:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 112:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 114:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 115:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 116:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * (which build with all the ports) will build. */
 117:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 118:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 119:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 125


 120:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 121:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 122:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 123:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 124:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 125:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
 126:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 127:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 128:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 129:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 130:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 131:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
 132:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 133:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 134:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 135:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Generic helper function. */
 136:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 137:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         {
 138:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             uint8_t ucReturn;
 139:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 140:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 141:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 142:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             return ucReturn;
 143:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         }
 144:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 145:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Check the configuration. */
 146:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 147:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 148:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #endif
 149:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 150:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 151:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 152:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 153:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 154:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 155:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 156:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 157:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 158:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 160:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 161:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 162:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifdef configASSERT
 163:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         void vPortValidateInterruptPriority( void );
 164:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 165:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
 166:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 167:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 168:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portNOP()
 169:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 170:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portINLINE              __inline
 171:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 172:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifndef portFORCE_INLINE
 173:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 174:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
 175:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 176:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 126


 177:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 178:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 179:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 180:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         uint32_t ulCurrentInterrupt;
 181:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         BaseType_t xReturn;
 182:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 183:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 184:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 185:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 186:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 187:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         {
 188:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             xReturn = pdFALSE;
 189:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         }
 190:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         else
 191:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         {
 192:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             xReturn = pdTRUE;
 193:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         }
 194:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 195:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         return xReturn;
 196:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 197:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 198:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 199:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 200:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 201:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 202:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         uint32_t ulNewBASEPRI;
 203:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 204:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile
 205:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 206:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	mov %0, %1												\n"\
 207:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	msr basepri, %0											\n"\
 208:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	isb														\n"\
 209:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	dsb														\n"\
 210:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 211:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         );
 212:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 213:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 214:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 215:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 216:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1270              		.loc 2 216 38 view .LVU347
 1271              	.LBB40:
 217:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 218:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1272              		.loc 2 218 9 view .LVU348
 219:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 220:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile
 1273              		.loc 2 220 9 view .LVU349
 1274              		.syntax unified
 1275              	@ 220 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 1276 0000 EFF31183 			mrs r3, basepri											
 1277 0004 4FF0BF02 		mov r2, #191												
 1278 0008 82F31188 		msr basepri, r2											
 1279 000c BFF36F8F 		isb														
 1280 0010 BFF34F8F 		dsb														
 1281              	
 1282              	@ 0 "" 2
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 127


 1283              	.LVL97:
 221:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 222:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	mrs %0, basepri											\n"\
 223:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	mov %1, %2												\n"\
 224:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	msr basepri, %1											\n"\
 225:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	isb														\n"\
 226:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	dsb														\n"\
 227:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 228:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         );
 229:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 230:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 231:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****          * warnings. */
 232:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         return ulOriginalBASEPRI;
 1284              		.loc 2 232 9 view .LVU350
 1285              		.loc 2 232 9 is_stmt 0 view .LVU351
 1286              		.thumb
 1287              		.syntax unified
 1288              	.LBE40:
 1289              	.LBE39:
1494:./FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1290              		.loc 1 1494 13 is_stmt 1 view .LVU352
1494:./FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1291              		.loc 1 1494 21 is_stmt 0 view .LVU353
 1292 0014 18B1     		cbz	r0, .L92
 1293              	.LVL98:
 1294              	.L91:
1495:./FreeRTOS/tasks.c ****         }
 1295              		.loc 1 1495 13 is_stmt 1 discriminator 4 view .LVU354
1495:./FreeRTOS/tasks.c ****         }
 1296              		.loc 1 1495 22 is_stmt 0 discriminator 4 view .LVU355
 1297 0016 C06A     		ldr	r0, [r0, #44]
 1298              	.LVL99:
1497:./FreeRTOS/tasks.c **** 
 1299              		.loc 1 1497 9 is_stmt 1 discriminator 4 view .LVU356
 1300              	.LBB41:
 1301              	.LBI41:
 233:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 234:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 235:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 236:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1302              		.loc 2 236 34 discriminator 4 view .LVU357
 1303              	.LBB42:
 237:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 238:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile
 1304              		.loc 2 238 9 discriminator 4 view .LVU358
 1305              		.syntax unified
 1306              	@ 238 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 1307 0018 83F31188 			msr basepri, r3	
 1308              	@ 0 "" 2
 1309              		.thumb
 1310              		.syntax unified
 1311              	.LBE42:
 1312              	.LBE41:
1499:./FreeRTOS/tasks.c ****     }
 1313              		.loc 1 1499 9 discriminator 4 view .LVU359
1500:./FreeRTOS/tasks.c **** 
 1314              		.loc 1 1500 5 is_stmt 0 discriminator 4 view .LVU360
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 128


 1315 001c 7047     		bx	lr
 1316              	.LVL100:
 1317              	.L92:
1494:./FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1318              		.loc 1 1494 21 discriminator 1 view .LVU361
 1319 001e 014A     		ldr	r2, .L93
 1320 0020 1068     		ldr	r0, [r2]
 1321              	.LVL101:
1494:./FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1322              		.loc 1 1494 21 discriminator 1 view .LVU362
 1323 0022 F8E7     		b	.L91
 1324              	.L94:
 1325              		.align	2
 1326              	.L93:
 1327 0024 00000000 		.word	pxCurrentTCB
 1328              		.cfi_endproc
 1329              	.LFE41:
 1331              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1332              		.align	1
 1333              		.global	vTaskPrioritySet
 1334              		.syntax unified
 1335              		.thumb
 1336              		.thumb_func
 1338              	vTaskPrioritySet:
 1339              	.LVL102:
 1340              	.LFB42:
1509:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 1341              		.loc 1 1509 5 is_stmt 1 view -0
 1342              		.cfi_startproc
 1343              		@ args = 0, pretend = 0, frame = 0
 1344              		@ frame_needed = 0, uses_anonymous_args = 0
1509:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 1345              		.loc 1 1509 5 is_stmt 0 view .LVU364
 1346 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1347              	.LCFI13:
 1348              		.cfi_def_cfa_offset 24
 1349              		.cfi_offset 3, -24
 1350              		.cfi_offset 4, -20
 1351              		.cfi_offset 5, -16
 1352              		.cfi_offset 6, -12
 1353              		.cfi_offset 7, -8
 1354              		.cfi_offset 14, -4
 1355 0002 0446     		mov	r4, r0
 1356 0004 0D46     		mov	r5, r1
1510:./FreeRTOS/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1357              		.loc 1 1510 9 is_stmt 1 view .LVU365
1511:./FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1358              		.loc 1 1511 9 view .LVU366
1512:./FreeRTOS/tasks.c **** 
 1359              		.loc 1 1512 9 view .LVU367
 1360              	.LVL103:
1514:./FreeRTOS/tasks.c **** 
 1361              		.loc 1 1514 61 view .LVU368
1517:./FreeRTOS/tasks.c ****         {
 1362              		.loc 1 1517 9 view .LVU369
1517:./FreeRTOS/tasks.c ****         {
 1363              		.loc 1 1517 11 is_stmt 0 view .LVU370
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 129


 1364 0006 1F29     		cmp	r1, #31
 1365 0008 00D9     		bls	.L96
1519:./FreeRTOS/tasks.c ****         }
 1366              		.loc 1 1519 27 view .LVU371
 1367 000a 1F25     		movs	r5, #31
 1368              	.L96:
 1369              	.LVL104:
1523:./FreeRTOS/tasks.c ****         }
 1370              		.loc 1 1523 37 is_stmt 1 view .LVU372
1526:./FreeRTOS/tasks.c ****         {
 1371              		.loc 1 1526 9 view .LVU373
 1372 000c FFF7FEFF 		bl	vPortEnterCritical
 1373              	.LVL105:
1530:./FreeRTOS/tasks.c **** 
 1374              		.loc 1 1530 13 view .LVU374
1530:./FreeRTOS/tasks.c **** 
 1375              		.loc 1 1530 21 is_stmt 0 view .LVU375
 1376 0010 74B1     		cbz	r4, .L110
 1377              	.LVL106:
 1378              	.L97:
1532:./FreeRTOS/tasks.c **** 
 1379              		.loc 1 1532 59 is_stmt 1 discriminator 4 view .LVU376
1536:./FreeRTOS/tasks.c ****             }
 1380              		.loc 1 1536 17 discriminator 4 view .LVU377
1536:./FreeRTOS/tasks.c ****             }
 1381              		.loc 1 1536 39 is_stmt 0 discriminator 4 view .LVU378
 1382 0012 636C     		ldr	r3, [r4, #68]
 1383              	.LVL107:
1544:./FreeRTOS/tasks.c ****             {
 1384              		.loc 1 1544 13 is_stmt 1 discriminator 4 view .LVU379
1544:./FreeRTOS/tasks.c ****             {
 1385              		.loc 1 1544 15 is_stmt 0 discriminator 4 view .LVU380
 1386 0014 9D42     		cmp	r5, r3
 1387 0016 30D0     		beq	.L98
1548:./FreeRTOS/tasks.c ****                 {
 1388              		.loc 1 1548 17 is_stmt 1 view .LVU381
1548:./FreeRTOS/tasks.c ****                 {
 1389              		.loc 1 1548 19 is_stmt 0 view .LVU382
 1390 0018 0DD9     		bls	.L99
1550:./FreeRTOS/tasks.c ****                     {
 1391              		.loc 1 1550 21 is_stmt 1 view .LVU383
1550:./FreeRTOS/tasks.c ****                     {
 1392              		.loc 1 1550 31 is_stmt 0 view .LVU384
 1393 001a 324A     		ldr	r2, .L113
 1394 001c 1268     		ldr	r2, [r2]
1550:./FreeRTOS/tasks.c ****                     {
 1395              		.loc 1 1550 23 view .LVU385
 1396 001e A242     		cmp	r2, r4
 1397 0020 2ED0     		beq	.L106
1555:./FreeRTOS/tasks.c ****                         {
 1398              		.loc 1 1555 25 is_stmt 1 view .LVU386
1555:./FreeRTOS/tasks.c ****                         {
 1399              		.loc 1 1555 58 is_stmt 0 view .LVU387
 1400 0022 304A     		ldr	r2, .L113
 1401 0024 1268     		ldr	r2, [r2]
 1402 0026 D26A     		ldr	r2, [r2, #44]
1555:./FreeRTOS/tasks.c ****                         {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 130


 1403              		.loc 1 1555 27 view .LVU388
 1404 0028 AA42     		cmp	r2, r5
 1405 002a 2BD9     		bls	.L107
1512:./FreeRTOS/tasks.c **** 
 1406              		.loc 1 1512 20 view .LVU389
 1407 002c 0027     		movs	r7, #0
 1408 002e 07E0     		b	.L100
 1409              	.LVL108:
 1410              	.L110:
1530:./FreeRTOS/tasks.c **** 
 1411              		.loc 1 1530 21 discriminator 1 view .LVU390
 1412 0030 2C4B     		ldr	r3, .L113
 1413 0032 1C68     		ldr	r4, [r3]
 1414              	.LVL109:
1530:./FreeRTOS/tasks.c **** 
 1415              		.loc 1 1530 21 discriminator 1 view .LVU391
 1416 0034 EDE7     		b	.L97
 1417              	.LVL110:
 1418              	.L99:
1571:./FreeRTOS/tasks.c ****                 {
 1419              		.loc 1 1571 22 is_stmt 1 view .LVU392
1571:./FreeRTOS/tasks.c ****                 {
 1420              		.loc 1 1571 32 is_stmt 0 view .LVU393
 1421 0036 2B4A     		ldr	r2, .L113
 1422 0038 1268     		ldr	r2, [r2]
1571:./FreeRTOS/tasks.c ****                 {
 1423              		.loc 1 1571 24 view .LVU394
 1424 003a A242     		cmp	r2, r4
 1425 003c 24D0     		beq	.L108
1512:./FreeRTOS/tasks.c **** 
 1426              		.loc 1 1512 20 view .LVU395
 1427 003e 0027     		movs	r7, #0
 1428              	.L100:
 1429              	.LVL111:
1583:./FreeRTOS/tasks.c **** 
 1430              		.loc 1 1583 17 is_stmt 1 view .LVU396
1588:./FreeRTOS/tasks.c **** 
 1431              		.loc 1 1588 17 view .LVU397
1588:./FreeRTOS/tasks.c **** 
 1432              		.loc 1 1588 39 is_stmt 0 view .LVU398
 1433 0040 E66A     		ldr	r6, [r4, #44]
 1434              	.LVL112:
1594:./FreeRTOS/tasks.c ****                     {
 1435              		.loc 1 1594 21 is_stmt 1 view .LVU399
1594:./FreeRTOS/tasks.c ****                     {
 1436              		.loc 1 1594 23 is_stmt 0 view .LVU400
 1437 0042 B342     		cmp	r3, r6
 1438 0044 22D0     		beq	.L111
 1439              	.L101:
1600:./FreeRTOS/tasks.c ****                     }
 1440              		.loc 1 1600 49 is_stmt 1 view .LVU401
1604:./FreeRTOS/tasks.c ****                 }
 1441              		.loc 1 1604 21 view .LVU402
1604:./FreeRTOS/tasks.c ****                 }
 1442              		.loc 1 1604 43 is_stmt 0 view .LVU403
 1443 0046 6564     		str	r5, [r4, #68]
1614:./FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 131


 1444              		.loc 1 1614 17 is_stmt 1 view .LVU404
1614:./FreeRTOS/tasks.c ****                 {
 1445              		.loc 1 1614 23 is_stmt 0 view .LVU405
 1446 0048 A369     		ldr	r3, [r4, #24]
 1447              	.LVL113:
1614:./FreeRTOS/tasks.c ****                 {
 1448              		.loc 1 1614 19 view .LVU406
 1449 004a 002B     		cmp	r3, #0
 1450 004c 02DB     		blt	.L102
1616:./FreeRTOS/tasks.c ****                 }
 1451              		.loc 1 1616 21 is_stmt 1 view .LVU407
 1452 004e C5F12005 		rsb	r5, r5, #32
 1453              	.LVL114:
1616:./FreeRTOS/tasks.c ****                 }
 1454              		.loc 1 1616 21 is_stmt 0 view .LVU408
 1455 0052 A561     		str	r5, [r4, #24]
 1456              	.L102:
1620:./FreeRTOS/tasks.c ****                 }
 1457              		.loc 1 1620 45 is_stmt 1 view .LVU409
1627:./FreeRTOS/tasks.c ****                 {
 1458              		.loc 1 1627 17 view .LVU410
1627:./FreeRTOS/tasks.c ****                 {
 1459              		.loc 1 1627 21 is_stmt 0 view .LVU411
 1460 0054 6169     		ldr	r1, [r4, #20]
 1461 0056 06EB8602 		add	r2, r6, r6, lsl #2
 1462 005a 234B     		ldr	r3, .L113+4
 1463 005c 03EB8203 		add	r3, r3, r2, lsl #2
1627:./FreeRTOS/tasks.c ****                 {
 1464              		.loc 1 1627 19 view .LVU412
 1465 0060 9942     		cmp	r1, r3
 1466 0062 15D0     		beq	.L112
 1467              	.LVL115:
 1468              	.L103:
1648:./FreeRTOS/tasks.c ****                 }
 1469              		.loc 1 1648 45 is_stmt 1 view .LVU413
1651:./FreeRTOS/tasks.c ****                 {
 1470              		.loc 1 1651 17 view .LVU414
1651:./FreeRTOS/tasks.c ****                 {
 1471              		.loc 1 1651 19 is_stmt 0 view .LVU415
 1472 0064 4FB1     		cbz	r7, .L98
1653:./FreeRTOS/tasks.c ****                 }
 1473              		.loc 1 1653 21 is_stmt 1 view .LVU416
 1474 0066 4FF0E023 		mov	r3, #-536813568
 1475 006a 4FF08052 		mov	r2, #268435456
 1476 006e C3F8042D 		str	r2, [r3, #3332]
1653:./FreeRTOS/tasks.c ****                 }
 1477              		.loc 1 1653 21 view .LVU417
 1478              		.syntax unified
 1479              	@ 1653 "./FreeRTOS/tasks.c" 1
 1480 0072 BFF34F8F 		dsb
 1481              	@ 0 "" 2
1653:./FreeRTOS/tasks.c ****                 }
 1482              		.loc 1 1653 21 view .LVU418
 1483              	@ 1653 "./FreeRTOS/tasks.c" 1
 1484 0076 BFF36F8F 		isb
 1485              	@ 0 "" 2
1653:./FreeRTOS/tasks.c ****                 }
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 132


 1486              		.loc 1 1653 52 view .LVU419
 1487              	.LVL116:
 1488              		.thumb
 1489              		.syntax unified
 1490              	.L98:
1657:./FreeRTOS/tasks.c ****                 }
 1491              		.loc 1 1657 45 view .LVU420
1662:./FreeRTOS/tasks.c ****             }
 1492              		.loc 1 1662 17 view .LVU421
1665:./FreeRTOS/tasks.c ****     }
 1493              		.loc 1 1665 9 view .LVU422
 1494 007a FFF7FEFF 		bl	vPortExitCritical
 1495              	.LVL117:
1666:./FreeRTOS/tasks.c **** 
 1496              		.loc 1 1666 5 is_stmt 0 view .LVU423
 1497 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1498              	.LVL118:
 1499              	.L106:
1512:./FreeRTOS/tasks.c **** 
 1500              		.loc 1 1512 20 view .LVU424
 1501 0080 0027     		movs	r7, #0
 1502 0082 DDE7     		b	.L100
 1503              	.L107:
1557:./FreeRTOS/tasks.c ****                         }
 1504              		.loc 1 1557 44 view .LVU425
 1505 0084 0127     		movs	r7, #1
 1506 0086 DBE7     		b	.L100
 1507              	.L108:
1576:./FreeRTOS/tasks.c ****                 }
 1508              		.loc 1 1576 36 view .LVU426
 1509 0088 0127     		movs	r7, #1
 1510 008a D9E7     		b	.L100
 1511              	.LVL119:
 1512              	.L111:
1596:./FreeRTOS/tasks.c ****                     }
 1513              		.loc 1 1596 25 is_stmt 1 view .LVU427
1596:./FreeRTOS/tasks.c ****                     }
 1514              		.loc 1 1596 43 is_stmt 0 view .LVU428
 1515 008c E562     		str	r5, [r4, #44]
 1516 008e DAE7     		b	.L101
 1517              	.LVL120:
 1518              	.L112:
1632:./FreeRTOS/tasks.c ****                     {
 1519              		.loc 1 1632 21 is_stmt 1 view .LVU429
1632:./FreeRTOS/tasks.c ****                     {
 1520              		.loc 1 1632 25 is_stmt 0 view .LVU430
 1521 0090 251D     		adds	r5, r4, #4
 1522 0092 2846     		mov	r0, r5
 1523 0094 FFF7FEFF 		bl	uxListRemove
 1524              	.LVL121:
1632:./FreeRTOS/tasks.c ****                     {
 1525              		.loc 1 1632 23 view .LVU431
 1526 0098 30B9     		cbnz	r0, .L104
1637:./FreeRTOS/tasks.c ****                     }
 1527              		.loc 1 1637 25 is_stmt 1 view .LVU432
 1528 009a 0122     		movs	r2, #1
 1529 009c B240     		lsls	r2, r2, r6
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 133


 1530 009e 1349     		ldr	r1, .L113+8
 1531 00a0 0B68     		ldr	r3, [r1]
 1532 00a2 23EA0203 		bic	r3, r3, r2
 1533 00a6 0B60     		str	r3, [r1]
 1534              	.L104:
1641:./FreeRTOS/tasks.c ****                     }
 1535              		.loc 1 1641 49 view .LVU433
1644:./FreeRTOS/tasks.c ****                 }
 1536              		.loc 1 1644 21 view .LVU434
1644:./FreeRTOS/tasks.c ****                 }
 1537              		.loc 1 1644 21 view .LVU435
 1538 00a8 E36A     		ldr	r3, [r4, #44]
 1539 00aa 0122     		movs	r2, #1
 1540 00ac 9A40     		lsls	r2, r2, r3
 1541 00ae 0F49     		ldr	r1, .L113+8
 1542 00b0 0868     		ldr	r0, [r1]
 1543 00b2 0243     		orrs	r2, r2, r0
 1544 00b4 0A60     		str	r2, [r1]
 1545              	.LBB43:
1644:./FreeRTOS/tasks.c ****                 }
 1546              		.loc 1 1644 21 view .LVU436
 1547 00b6 0C4A     		ldr	r2, .L113+4
 1548 00b8 03EB8303 		add	r3, r3, r3, lsl #2
 1549 00bc 02EB8303 		add	r3, r2, r3, lsl #2
 1550 00c0 5B68     		ldr	r3, [r3, #4]
 1551              	.LVL122:
1644:./FreeRTOS/tasks.c ****                 }
 1552              		.loc 1 1644 21 view .LVU437
1644:./FreeRTOS/tasks.c ****                 }
 1553              		.loc 1 1644 21 view .LVU438
1644:./FreeRTOS/tasks.c ****                 }
 1554              		.loc 1 1644 21 view .LVU439
 1555 00c2 A360     		str	r3, [r4, #8]
1644:./FreeRTOS/tasks.c ****                 }
 1556              		.loc 1 1644 21 view .LVU440
 1557 00c4 9968     		ldr	r1, [r3, #8]
 1558 00c6 E160     		str	r1, [r4, #12]
1644:./FreeRTOS/tasks.c ****                 }
 1559              		.loc 1 1644 21 view .LVU441
 1560 00c8 4D60     		str	r5, [r1, #4]
1644:./FreeRTOS/tasks.c ****                 }
 1561              		.loc 1 1644 21 view .LVU442
 1562 00ca 9D60     		str	r5, [r3, #8]
1644:./FreeRTOS/tasks.c ****                 }
 1563              		.loc 1 1644 21 view .LVU443
 1564 00cc E36A     		ldr	r3, [r4, #44]
 1565              	.LVL123:
1644:./FreeRTOS/tasks.c ****                 }
 1566              		.loc 1 1644 21 is_stmt 0 view .LVU444
 1567 00ce 03EB8301 		add	r1, r3, r3, lsl #2
 1568 00d2 8800     		lsls	r0, r1, #2
 1569 00d4 02EB8101 		add	r1, r2, r1, lsl #2
 1570 00d8 6161     		str	r1, [r4, #20]
1644:./FreeRTOS/tasks.c ****                 }
 1571              		.loc 1 1644 21 is_stmt 1 view .LVU445
 1572 00da 1158     		ldr	r1, [r2, r0]
 1573 00dc 0131     		adds	r1, r1, #1
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 134


 1574 00de 1150     		str	r1, [r2, r0]
 1575              	.LBE43:
1644:./FreeRTOS/tasks.c ****                 }
 1576              		.loc 1 1644 21 view .LVU446
1644:./FreeRTOS/tasks.c ****                 }
 1577              		.loc 1 1644 51 view .LVU447
 1578 00e0 C0E7     		b	.L103
 1579              	.L114:
 1580 00e2 00BF     		.align	2
 1581              	.L113:
 1582 00e4 00000000 		.word	pxCurrentTCB
 1583 00e8 00000000 		.word	pxReadyTasksLists
 1584 00ec 00000000 		.word	uxTopReadyPriority
 1585              		.cfi_endproc
 1586              	.LFE42:
 1588              		.section	.text.vTaskResume,"ax",%progbits
 1589              		.align	1
 1590              		.global	vTaskResume
 1591              		.syntax unified
 1592              		.thumb
 1593              		.thumb_func
 1595              	vTaskResume:
 1596              	.LVL124:
 1597              	.LFB45:
1826:./FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1598              		.loc 1 1826 5 view -0
 1599              		.cfi_startproc
 1600              		@ args = 0, pretend = 0, frame = 0
 1601              		@ frame_needed = 0, uses_anonymous_args = 0
1826:./FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1602              		.loc 1 1826 5 is_stmt 0 view .LVU449
 1603 0000 38B5     		push	{r3, r4, r5, lr}
 1604              	.LCFI14:
 1605              		.cfi_def_cfa_offset 16
 1606              		.cfi_offset 3, -16
 1607              		.cfi_offset 4, -12
 1608              		.cfi_offset 5, -8
 1609              		.cfi_offset 14, -4
1827:./FreeRTOS/tasks.c **** 
 1610              		.loc 1 1827 9 is_stmt 1 view .LVU450
 1611              	.LVL125:
1830:./FreeRTOS/tasks.c **** 
 1612              		.loc 1 1830 38 view .LVU451
1834:./FreeRTOS/tasks.c ****         {
 1613              		.loc 1 1834 9 view .LVU452
1834:./FreeRTOS/tasks.c ****         {
 1614              		.loc 1 1834 21 is_stmt 0 view .LVU453
 1615 0002 204B     		ldr	r3, .L120
 1616 0004 1B68     		ldr	r3, [r3]
1834:./FreeRTOS/tasks.c ****         {
 1617              		.loc 1 1834 11 view .LVU454
 1618 0006 8342     		cmp	r3, r0
 1619 0008 09D0     		beq	.L115
 1620 000a 0446     		mov	r4, r0
1834:./FreeRTOS/tasks.c ****         {
 1621              		.loc 1 1834 39 discriminator 1 view .LVU455
 1622 000c 38B1     		cbz	r0, .L115
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 135


1836:./FreeRTOS/tasks.c ****             {
 1623              		.loc 1 1836 13 is_stmt 1 view .LVU456
 1624 000e FFF7FEFF 		bl	vPortEnterCritical
 1625              	.LVL126:
1838:./FreeRTOS/tasks.c ****                 {
 1626              		.loc 1 1838 17 view .LVU457
1838:./FreeRTOS/tasks.c ****                 {
 1627              		.loc 1 1838 21 is_stmt 0 view .LVU458
 1628 0012 2046     		mov	r0, r4
 1629 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1630              	.LVL127:
1838:./FreeRTOS/tasks.c ****                 {
 1631              		.loc 1 1838 19 view .LVU459
 1632 0018 10B9     		cbnz	r0, .L119
 1633              	.L117:
1862:./FreeRTOS/tasks.c ****                 }
 1634              		.loc 1 1862 45 is_stmt 1 view .LVU460
1865:./FreeRTOS/tasks.c ****         }
 1635              		.loc 1 1865 13 view .LVU461
 1636 001a FFF7FEFF 		bl	vPortExitCritical
 1637              	.LVL128:
1869:./FreeRTOS/tasks.c ****         }
 1638              		.loc 1 1869 37 view .LVU462
 1639              	.L115:
1871:./FreeRTOS/tasks.c **** 
 1640              		.loc 1 1871 5 is_stmt 0 view .LVU463
 1641 001e 38BD     		pop	{r3, r4, r5, pc}
 1642              	.LVL129:
 1643              	.L119:
1840:./FreeRTOS/tasks.c **** 
 1644              		.loc 1 1840 46 is_stmt 1 view .LVU464
1844:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1645              		.loc 1 1844 21 view .LVU465
1844:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1646              		.loc 1 1844 30 is_stmt 0 view .LVU466
 1647 0020 251D     		adds	r5, r4, #4
 1648 0022 2846     		mov	r0, r5
 1649 0024 FFF7FEFF 		bl	uxListRemove
 1650              	.LVL130:
1845:./FreeRTOS/tasks.c **** 
 1651              		.loc 1 1845 21 is_stmt 1 view .LVU467
1845:./FreeRTOS/tasks.c **** 
 1652              		.loc 1 1845 21 view .LVU468
 1653 0028 E36A     		ldr	r3, [r4, #44]
 1654 002a 0122     		movs	r2, #1
 1655 002c 9A40     		lsls	r2, r2, r3
 1656 002e 1649     		ldr	r1, .L120+4
 1657 0030 0868     		ldr	r0, [r1]
 1658 0032 0243     		orrs	r2, r2, r0
 1659 0034 0A60     		str	r2, [r1]
 1660              	.LBB44:
1845:./FreeRTOS/tasks.c **** 
 1661              		.loc 1 1845 21 view .LVU469
 1662 0036 154A     		ldr	r2, .L120+8
 1663 0038 03EB8303 		add	r3, r3, r3, lsl #2
 1664 003c 02EB8303 		add	r3, r2, r3, lsl #2
 1665 0040 5B68     		ldr	r3, [r3, #4]
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 136


 1666              	.LVL131:
1845:./FreeRTOS/tasks.c **** 
 1667              		.loc 1 1845 21 view .LVU470
1845:./FreeRTOS/tasks.c **** 
 1668              		.loc 1 1845 21 view .LVU471
1845:./FreeRTOS/tasks.c **** 
 1669              		.loc 1 1845 21 view .LVU472
 1670 0042 A360     		str	r3, [r4, #8]
1845:./FreeRTOS/tasks.c **** 
 1671              		.loc 1 1845 21 view .LVU473
 1672 0044 9968     		ldr	r1, [r3, #8]
 1673 0046 E160     		str	r1, [r4, #12]
1845:./FreeRTOS/tasks.c **** 
 1674              		.loc 1 1845 21 view .LVU474
 1675 0048 4D60     		str	r5, [r1, #4]
1845:./FreeRTOS/tasks.c **** 
 1676              		.loc 1 1845 21 view .LVU475
 1677 004a 9D60     		str	r5, [r3, #8]
1845:./FreeRTOS/tasks.c **** 
 1678              		.loc 1 1845 21 view .LVU476
 1679 004c E36A     		ldr	r3, [r4, #44]
 1680              	.LVL132:
1845:./FreeRTOS/tasks.c **** 
 1681              		.loc 1 1845 21 is_stmt 0 view .LVU477
 1682 004e 03EB8301 		add	r1, r3, r3, lsl #2
 1683 0052 8800     		lsls	r0, r1, #2
 1684 0054 02EB8101 		add	r1, r2, r1, lsl #2
 1685 0058 6161     		str	r1, [r4, #20]
1845:./FreeRTOS/tasks.c **** 
 1686              		.loc 1 1845 21 is_stmt 1 view .LVU478
 1687 005a 1158     		ldr	r1, [r2, r0]
 1688 005c 0131     		adds	r1, r1, #1
 1689 005e 1150     		str	r1, [r2, r0]
 1690              	.LBE44:
1845:./FreeRTOS/tasks.c **** 
 1691              		.loc 1 1845 21 view .LVU479
1845:./FreeRTOS/tasks.c **** 
 1692              		.loc 1 1845 51 view .LVU480
1848:./FreeRTOS/tasks.c ****                     {
 1693              		.loc 1 1848 21 view .LVU481
1848:./FreeRTOS/tasks.c ****                     {
 1694              		.loc 1 1848 30 is_stmt 0 view .LVU482
 1695 0060 E26A     		ldr	r2, [r4, #44]
1848:./FreeRTOS/tasks.c ****                     {
 1696              		.loc 1 1848 58 view .LVU483
 1697 0062 084B     		ldr	r3, .L120
 1698 0064 1B68     		ldr	r3, [r3]
 1699 0066 DB6A     		ldr	r3, [r3, #44]
1848:./FreeRTOS/tasks.c ****                     {
 1700              		.loc 1 1848 23 view .LVU484
 1701 0068 9A42     		cmp	r2, r3
 1702 006a D6D3     		bcc	.L117
1853:./FreeRTOS/tasks.c ****                     }
 1703              		.loc 1 1853 25 is_stmt 1 view .LVU485
 1704 006c 4FF0E023 		mov	r3, #-536813568
 1705 0070 4FF08052 		mov	r2, #268435456
 1706 0074 C3F8042D 		str	r2, [r3, #3332]
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 137


1853:./FreeRTOS/tasks.c ****                     }
 1707              		.loc 1 1853 25 view .LVU486
 1708              		.syntax unified
 1709              	@ 1853 "./FreeRTOS/tasks.c" 1
 1710 0078 BFF34F8F 		dsb
 1711              	@ 0 "" 2
1853:./FreeRTOS/tasks.c ****                     }
 1712              		.loc 1 1853 25 view .LVU487
 1713              	@ 1853 "./FreeRTOS/tasks.c" 1
 1714 007c BFF36F8F 		isb
 1715              	@ 0 "" 2
1853:./FreeRTOS/tasks.c ****                     }
 1716              		.loc 1 1853 56 view .LVU488
 1717              		.thumb
 1718              		.syntax unified
 1719 0080 CBE7     		b	.L117
 1720              	.L121:
 1721 0082 00BF     		.align	2
 1722              	.L120:
 1723 0084 00000000 		.word	pxCurrentTCB
 1724 0088 00000000 		.word	uxTopReadyPriority
 1725 008c 00000000 		.word	pxReadyTasksLists
 1726              		.cfi_endproc
 1727              	.LFE45:
 1729              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1730              		.align	1
 1731              		.global	xTaskResumeFromISR
 1732              		.syntax unified
 1733              		.thumb
 1734              		.thumb_func
 1736              	xTaskResumeFromISR:
 1737              	.LVL133:
 1738              	.LFB46:
1880:./FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1739              		.loc 1 1880 5 view -0
 1740              		.cfi_startproc
 1741              		@ args = 0, pretend = 0, frame = 0
 1742              		@ frame_needed = 0, uses_anonymous_args = 0
1880:./FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1743              		.loc 1 1880 5 is_stmt 0 view .LVU490
 1744 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1745              	.LCFI15:
 1746              		.cfi_def_cfa_offset 24
 1747              		.cfi_offset 3, -24
 1748              		.cfi_offset 4, -20
 1749              		.cfi_offset 5, -16
 1750              		.cfi_offset 6, -12
 1751              		.cfi_offset 7, -8
 1752              		.cfi_offset 14, -4
 1753 0002 0446     		mov	r4, r0
1881:./FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1754              		.loc 1 1881 9 is_stmt 1 view .LVU491
 1755              	.LVL134:
1882:./FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 1756              		.loc 1 1882 9 view .LVU492
1883:./FreeRTOS/tasks.c **** 
 1757              		.loc 1 1883 9 view .LVU493
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 138


1885:./FreeRTOS/tasks.c **** 
 1758              		.loc 1 1885 38 view .LVU494
1903:./FreeRTOS/tasks.c **** 
 1759              		.loc 1 1903 51 view .LVU495
1905:./FreeRTOS/tasks.c ****         {
 1760              		.loc 1 1905 9 view .LVU496
 1761              	.LBB45:
 1762              	.LBI45:
 216:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 1763              		.loc 2 216 38 view .LVU497
 1764              	.LBB46:
 218:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 1765              		.loc 2 218 9 view .LVU498
 220:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 1766              		.loc 2 220 9 view .LVU499
 1767              		.syntax unified
 1768              	@ 220 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 1769 0004 EFF31185 			mrs r5, basepri											
 1770 0008 4FF0BF03 		mov r3, #191												
 1771 000c 83F31188 		msr basepri, r3											
 1772 0010 BFF36F8F 		isb														
 1773 0014 BFF34F8F 		dsb														
 1774              	
 1775              	@ 0 "" 2
 1776              	.LVL135:
 232:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 1777              		.loc 2 232 9 view .LVU500
 232:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 1778              		.loc 2 232 9 is_stmt 0 view .LVU501
 1779              		.thumb
 1780              		.syntax unified
 1781              	.LBE46:
 1782              	.LBE45:
1907:./FreeRTOS/tasks.c ****             {
 1783              		.loc 1 1907 13 is_stmt 1 view .LVU502
1907:./FreeRTOS/tasks.c ****             {
 1784              		.loc 1 1907 17 is_stmt 0 view .LVU503
 1785 0018 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1786              	.LVL136:
1907:./FreeRTOS/tasks.c ****             {
 1787              		.loc 1 1907 15 view .LVU504
 1788 001c 0646     		mov	r6, r0
 1789 001e 0028     		cmp	r0, #0
 1790 0020 2CD0     		beq	.L123
1909:./FreeRTOS/tasks.c **** 
 1791              		.loc 1 1909 51 is_stmt 1 view .LVU505
1912:./FreeRTOS/tasks.c ****                 {
 1792              		.loc 1 1912 17 view .LVU506
1912:./FreeRTOS/tasks.c ****                 {
 1793              		.loc 1 1912 42 is_stmt 0 view .LVU507
 1794 0022 1D4B     		ldr	r3, .L128
 1795 0024 1B68     		ldr	r3, [r3]
1912:./FreeRTOS/tasks.c ****                 {
 1796              		.loc 1 1912 19 view .LVU508
 1797 0026 002B     		cmp	r3, #0
 1798 0028 2ED1     		bne	.L124
1916:./FreeRTOS/tasks.c ****                     {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 139


 1799              		.loc 1 1916 21 is_stmt 1 view .LVU509
1916:./FreeRTOS/tasks.c ****                     {
 1800              		.loc 1 1916 30 is_stmt 0 view .LVU510
 1801 002a E26A     		ldr	r2, [r4, #44]
1916:./FreeRTOS/tasks.c ****                     {
 1802              		.loc 1 1916 58 view .LVU511
 1803 002c 1B4B     		ldr	r3, .L128+4
 1804 002e 1B68     		ldr	r3, [r3]
 1805 0030 DB6A     		ldr	r3, [r3, #44]
1916:./FreeRTOS/tasks.c ****                     {
 1806              		.loc 1 1916 23 view .LVU512
 1807 0032 9A42     		cmp	r2, r3
 1808 0034 26D3     		bcc	.L126
1918:./FreeRTOS/tasks.c **** 
 1809              		.loc 1 1918 25 is_stmt 1 view .LVU513
 1810              	.LVL137:
1923:./FreeRTOS/tasks.c ****                     }
 1811              		.loc 1 1923 25 view .LVU514
1923:./FreeRTOS/tasks.c ****                     }
 1812              		.loc 1 1923 39 is_stmt 0 view .LVU515
 1813 0036 0126     		movs	r6, #1
 1814 0038 194B     		ldr	r3, .L128+8
 1815 003a 1E60     		str	r6, [r3]
 1816              	.LVL138:
 1817              	.L125:
1927:./FreeRTOS/tasks.c ****                     }
 1818              		.loc 1 1927 49 is_stmt 1 view .LVU516
1930:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1819              		.loc 1 1930 21 view .LVU517
1930:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1820              		.loc 1 1930 30 is_stmt 0 view .LVU518
 1821 003c 271D     		adds	r7, r4, #4
 1822 003e 3846     		mov	r0, r7
 1823 0040 FFF7FEFF 		bl	uxListRemove
 1824              	.LVL139:
1931:./FreeRTOS/tasks.c ****                 }
 1825              		.loc 1 1931 21 is_stmt 1 view .LVU519
1931:./FreeRTOS/tasks.c ****                 }
 1826              		.loc 1 1931 21 view .LVU520
 1827 0044 E36A     		ldr	r3, [r4, #44]
 1828 0046 0122     		movs	r2, #1
 1829 0048 9A40     		lsls	r2, r2, r3
 1830 004a 1649     		ldr	r1, .L128+12
 1831 004c 0868     		ldr	r0, [r1]
 1832 004e 0243     		orrs	r2, r2, r0
 1833 0050 0A60     		str	r2, [r1]
 1834              	.LBB47:
1931:./FreeRTOS/tasks.c ****                 }
 1835              		.loc 1 1931 21 view .LVU521
 1836 0052 154A     		ldr	r2, .L128+16
 1837 0054 03EB8303 		add	r3, r3, r3, lsl #2
 1838 0058 02EB8303 		add	r3, r2, r3, lsl #2
 1839 005c 5B68     		ldr	r3, [r3, #4]
 1840              	.LVL140:
1931:./FreeRTOS/tasks.c ****                 }
 1841              		.loc 1 1931 21 view .LVU522
1931:./FreeRTOS/tasks.c ****                 }
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 140


 1842              		.loc 1 1931 21 view .LVU523
1931:./FreeRTOS/tasks.c ****                 }
 1843              		.loc 1 1931 21 view .LVU524
 1844 005e A360     		str	r3, [r4, #8]
1931:./FreeRTOS/tasks.c ****                 }
 1845              		.loc 1 1931 21 view .LVU525
 1846 0060 9968     		ldr	r1, [r3, #8]
 1847 0062 E160     		str	r1, [r4, #12]
1931:./FreeRTOS/tasks.c ****                 }
 1848              		.loc 1 1931 21 view .LVU526
 1849 0064 4F60     		str	r7, [r1, #4]
1931:./FreeRTOS/tasks.c ****                 }
 1850              		.loc 1 1931 21 view .LVU527
 1851 0066 9F60     		str	r7, [r3, #8]
1931:./FreeRTOS/tasks.c ****                 }
 1852              		.loc 1 1931 21 view .LVU528
 1853 0068 E36A     		ldr	r3, [r4, #44]
 1854              	.LVL141:
1931:./FreeRTOS/tasks.c ****                 }
 1855              		.loc 1 1931 21 is_stmt 0 view .LVU529
 1856 006a 03EB8301 		add	r1, r3, r3, lsl #2
 1857 006e 8800     		lsls	r0, r1, #2
 1858 0070 02EB8101 		add	r1, r2, r1, lsl #2
 1859 0074 6161     		str	r1, [r4, #20]
1931:./FreeRTOS/tasks.c ****                 }
 1860              		.loc 1 1931 21 is_stmt 1 view .LVU530
 1861 0076 1158     		ldr	r1, [r2, r0]
 1862 0078 0131     		adds	r1, r1, #1
 1863 007a 1150     		str	r1, [r2, r0]
 1864              	.LBE47:
1931:./FreeRTOS/tasks.c ****                 }
 1865              		.loc 1 1931 21 view .LVU531
1931:./FreeRTOS/tasks.c ****                 }
 1866              		.loc 1 1931 51 view .LVU532
 1867              	.LVL142:
 1868              	.L123:
1943:./FreeRTOS/tasks.c ****             }
 1869              		.loc 1 1943 41 view .LVU533
1946:./FreeRTOS/tasks.c **** 
 1870              		.loc 1 1946 9 view .LVU534
 1871              	.LBB48:
 1872              	.LBI48:
 236:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 1873              		.loc 2 236 34 view .LVU535
 1874              	.LBB49:
 1875              		.loc 2 238 9 view .LVU536
 1876              		.syntax unified
 1877              	@ 238 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 1878 007c 85F31188 			msr basepri, r5	
 1879              	@ 0 "" 2
 1880              		.thumb
 1881              		.syntax unified
 1882              	.LBE49:
 1883              	.LBE48:
1948:./FreeRTOS/tasks.c ****     }
 1884              		.loc 1 1948 9 view .LVU537
1949:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 141


 1885              		.loc 1 1949 5 is_stmt 0 view .LVU538
 1886 0080 3046     		mov	r0, r6
 1887 0082 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1888              	.LVL143:
 1889              	.L126:
1881:./FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1890              		.loc 1 1881 20 view .LVU539
 1891 0084 0026     		movs	r6, #0
 1892 0086 D9E7     		b	.L125
 1893              	.L124:
1938:./FreeRTOS/tasks.c ****                 }
 1894              		.loc 1 1938 21 is_stmt 1 view .LVU540
 1895 0088 04F11801 		add	r1, r4, #24
 1896 008c 0748     		ldr	r0, .L128+20
 1897 008e FFF7FEFF 		bl	vListInsertEnd
 1898              	.LVL144:
1881:./FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1899              		.loc 1 1881 20 is_stmt 0 view .LVU541
 1900 0092 0026     		movs	r6, #0
 1901 0094 F2E7     		b	.L123
 1902              	.L129:
 1903 0096 00BF     		.align	2
 1904              	.L128:
 1905 0098 00000000 		.word	uxSchedulerSuspended
 1906 009c 00000000 		.word	pxCurrentTCB
 1907 00a0 00000000 		.word	xYieldPending
 1908 00a4 00000000 		.word	uxTopReadyPriority
 1909 00a8 00000000 		.word	pxReadyTasksLists
 1910 00ac 00000000 		.word	xPendingReadyList
 1911              		.cfi_endproc
 1912              	.LFE46:
 1914              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 1915              		.align	2
 1916              	.LC0:
 1917 0000 49444C45 		.ascii	"IDLE\000"
 1917      00
 1918              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1919              		.align	1
 1920              		.global	vTaskStartScheduler
 1921              		.syntax unified
 1922              		.thumb
 1923              		.thumb_func
 1925              	vTaskStartScheduler:
 1926              	.LFB47:
1955:./FreeRTOS/tasks.c ****     BaseType_t xReturn;
 1927              		.loc 1 1955 1 is_stmt 1 view -0
 1928              		.cfi_startproc
 1929              		@ args = 0, pretend = 0, frame = 0
 1930              		@ frame_needed = 0, uses_anonymous_args = 0
 1931 0000 00B5     		push	{lr}
 1932              	.LCFI16:
 1933              		.cfi_def_cfa_offset 4
 1934              		.cfi_offset 14, -4
 1935 0002 83B0     		sub	sp, sp, #12
 1936              	.LCFI17:
 1937              		.cfi_def_cfa_offset 16
1956:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 142


 1938              		.loc 1 1956 5 view .LVU543
1988:./FreeRTOS/tasks.c ****                                configIDLE_TASK_NAME,
 1939              		.loc 1 1988 9 view .LVU544
1988:./FreeRTOS/tasks.c ****                                configIDLE_TASK_NAME,
 1940              		.loc 1 1988 19 is_stmt 0 view .LVU545
 1941 0004 144B     		ldr	r3, .L134
 1942 0006 0193     		str	r3, [sp, #4]
 1943 0008 0023     		movs	r3, #0
 1944 000a 0093     		str	r3, [sp]
 1945 000c 8022     		movs	r2, #128
 1946 000e 1349     		ldr	r1, .L134+4
 1947 0010 1348     		ldr	r0, .L134+8
 1948 0012 FFF7FEFF 		bl	xTaskCreate
 1949              	.LVL145:
1999:./FreeRTOS/tasks.c ****         {
 1950              		.loc 1 1999 9 is_stmt 1 view .LVU546
1999:./FreeRTOS/tasks.c ****         {
 1951              		.loc 1 1999 11 is_stmt 0 view .LVU547
 1952 0016 0128     		cmp	r0, #1
 1953 0018 04D0     		beq	.L133
 1954              	.LVL146:
 1955              	.L131:
2066:./FreeRTOS/tasks.c ****     }
 1956              		.loc 1 2066 73 is_stmt 1 view .LVU548
2071:./FreeRTOS/tasks.c **** 
 1957              		.loc 1 2071 5 view .LVU549
2075:./FreeRTOS/tasks.c **** }
 1958              		.loc 1 2075 5 view .LVU550
 1959 001a 124B     		ldr	r3, .L134+12
 1960 001c 1B68     		ldr	r3, [r3]
2076:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1961              		.loc 1 2076 1 is_stmt 0 view .LVU551
 1962 001e 03B0     		add	sp, sp, #12
 1963              	.LCFI18:
 1964              		.cfi_remember_state
 1965              		.cfi_def_cfa_offset 4
 1966              		@ sp needed
 1967 0020 5DF804FB 		ldr	pc, [sp], #4
 1968              	.LVL147:
 1969              	.L133:
 1970              	.LCFI19:
 1971              		.cfi_restore_state
2001:./FreeRTOS/tasks.c ****         }
 1972              		.loc 1 2001 13 is_stmt 1 view .LVU552
2001:./FreeRTOS/tasks.c ****         }
 1973              		.loc 1 2001 23 is_stmt 0 view .LVU553
 1974 0024 FFF7FEFF 		bl	xTimerCreateTimerTask
 1975              	.LVL148:
2005:./FreeRTOS/tasks.c ****         }
 1976              		.loc 1 2005 37 is_stmt 1 view .LVU554
2010:./FreeRTOS/tasks.c ****     {
 1977              		.loc 1 2010 5 view .LVU555
2010:./FreeRTOS/tasks.c ****     {
 1978              		.loc 1 2010 7 is_stmt 0 view .LVU556
 1979 0028 0128     		cmp	r0, #1
 1980 002a F6D1     		bne	.L131
2026:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 143


 1981              		.loc 1 2026 9 is_stmt 1 view .LVU557
 1982              	.LBB50:
 1983              	.LBI50:
 200:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 1984              		.loc 2 200 34 view .LVU558
 1985              	.LBB51:
 202:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 1986              		.loc 2 202 9 view .LVU559
 204:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 1987              		.loc 2 204 9 view .LVU560
 1988              		.syntax unified
 1989              	@ 204 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 1990 002c 4FF0BF03 			mov r3, #191												
 1991 0030 83F31188 		msr basepri, r3											
 1992 0034 BFF36F8F 		isb														
 1993 0038 BFF34F8F 		dsb														
 1994              	
 1995              	@ 0 "" 2
 1996              		.thumb
 1997              		.syntax unified
 1998              	.LBE51:
 1999              	.LBE50:
2036:./FreeRTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
 2000              		.loc 1 2036 9 view .LVU561
2036:./FreeRTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
 2001              		.loc 1 2036 30 is_stmt 0 view .LVU562
 2002 003c 0A4B     		ldr	r3, .L134+16
 2003 003e 4FF0FF32 		mov	r2, #-1
 2004 0042 1A60     		str	r2, [r3]
2037:./FreeRTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2005              		.loc 1 2037 9 is_stmt 1 view .LVU563
2037:./FreeRTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2006              		.loc 1 2037 27 is_stmt 0 view .LVU564
 2007 0044 094B     		ldr	r3, .L134+20
 2008 0046 0122     		movs	r2, #1
 2009 0048 1A60     		str	r2, [r3]
2038:./FreeRTOS/tasks.c **** 
 2010              		.loc 1 2038 9 is_stmt 1 view .LVU565
2038:./FreeRTOS/tasks.c **** 
 2011              		.loc 1 2038 20 is_stmt 0 view .LVU566
 2012 004a 094B     		ldr	r3, .L134+24
 2013 004c 0022     		movs	r2, #0
 2014 004e 1A60     		str	r2, [r3]
2046:./FreeRTOS/tasks.c **** 
 2015              		.loc 1 2046 49 is_stmt 1 view .LVU567
2048:./FreeRTOS/tasks.c **** 
 2016              		.loc 1 2048 32 view .LVU568
2052:./FreeRTOS/tasks.c **** 
 2017              		.loc 1 2052 9 view .LVU569
 2018 0050 FFF7FEFF 		bl	xPortStartScheduler
 2019              	.LVL149:
2052:./FreeRTOS/tasks.c **** 
 2020              		.loc 1 2052 9 is_stmt 0 view .LVU570
 2021 0054 E1E7     		b	.L131
 2022              	.L135:
 2023 0056 00BF     		.align	2
 2024              	.L134:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 144


 2025 0058 00000000 		.word	xIdleTaskHandle
 2026 005c 00000000 		.word	.LC0
 2027 0060 00000000 		.word	prvIdleTask
 2028 0064 00000000 		.word	uxTopUsedPriority
 2029 0068 00000000 		.word	xNextTaskUnblockTime
 2030 006c 00000000 		.word	xSchedulerRunning
 2031 0070 00000000 		.word	xTickCount
 2032              		.cfi_endproc
 2033              	.LFE47:
 2035              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2036              		.align	1
 2037              		.global	vTaskEndScheduler
 2038              		.syntax unified
 2039              		.thumb
 2040              		.thumb_func
 2042              	vTaskEndScheduler:
 2043              	.LFB48:
2080:./FreeRTOS/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
 2044              		.loc 1 2080 1 is_stmt 1 view -0
 2045              		.cfi_startproc
 2046              		@ args = 0, pretend = 0, frame = 0
 2047              		@ frame_needed = 0, uses_anonymous_args = 0
 2048 0000 08B5     		push	{r3, lr}
 2049              	.LCFI20:
 2050              		.cfi_def_cfa_offset 8
 2051              		.cfi_offset 3, -8
 2052              		.cfi_offset 14, -4
2084:./FreeRTOS/tasks.c ****     xSchedulerRunning = pdFALSE;
 2053              		.loc 1 2084 5 view .LVU572
 2054              	.LBB52:
 2055              	.LBI52:
 200:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 2056              		.loc 2 200 34 view .LVU573
 2057              	.LBB53:
 202:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 2058              		.loc 2 202 9 view .LVU574
 204:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 2059              		.loc 2 204 9 view .LVU575
 2060              		.syntax unified
 2061              	@ 204 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 2062 0002 4FF0BF03 			mov r3, #191												
 2063 0006 83F31188 		msr basepri, r3											
 2064 000a BFF36F8F 		isb														
 2065 000e BFF34F8F 		dsb														
 2066              	
 2067              	@ 0 "" 2
 2068              		.thumb
 2069              		.syntax unified
 2070              	.LBE53:
 2071              	.LBE52:
2085:./FreeRTOS/tasks.c ****     vPortEndScheduler();
 2072              		.loc 1 2085 5 view .LVU576
2085:./FreeRTOS/tasks.c ****     vPortEndScheduler();
 2073              		.loc 1 2085 23 is_stmt 0 view .LVU577
 2074 0012 034B     		ldr	r3, .L138
 2075 0014 0022     		movs	r2, #0
 2076 0016 1A60     		str	r2, [r3]
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 145


2086:./FreeRTOS/tasks.c **** }
 2077              		.loc 1 2086 5 is_stmt 1 view .LVU578
 2078 0018 FFF7FEFF 		bl	vPortEndScheduler
 2079              	.LVL150:
2087:./FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 2080              		.loc 1 2087 1 is_stmt 0 view .LVU579
 2081 001c 08BD     		pop	{r3, pc}
 2082              	.L139:
 2083 001e 00BF     		.align	2
 2084              	.L138:
 2085 0020 00000000 		.word	xSchedulerRunning
 2086              		.cfi_endproc
 2087              	.LFE48:
 2089              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2090              		.align	1
 2091              		.global	vTaskSuspendAll
 2092              		.syntax unified
 2093              		.thumb
 2094              		.thumb_func
 2096              	vTaskSuspendAll:
 2097              	.LFB49:
2091:./FreeRTOS/tasks.c ****     /* A critical section is not required as the variable is of type
 2098              		.loc 1 2091 1 is_stmt 1 view -0
 2099              		.cfi_startproc
 2100              		@ args = 0, pretend = 0, frame = 0
 2101              		@ frame_needed = 0, uses_anonymous_args = 0
 2102              		@ link register save eliminated.
2099:./FreeRTOS/tasks.c **** 
 2103              		.loc 1 2099 27 view .LVU581
2103:./FreeRTOS/tasks.c **** 
 2104              		.loc 1 2103 5 view .LVU582
 2105 0000 024A     		ldr	r2, .L141
 2106 0002 1368     		ldr	r3, [r2]
 2107 0004 0133     		adds	r3, r3, #1
 2108 0006 1360     		str	r3, [r2]
2107:./FreeRTOS/tasks.c **** }
 2109              		.loc 1 2107 5 view .LVU583
2108:./FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 2110              		.loc 1 2108 1 is_stmt 0 view .LVU584
 2111 0008 7047     		bx	lr
 2112              	.L142:
 2113 000a 00BF     		.align	2
 2114              	.L141:
 2115 000c 00000000 		.word	uxSchedulerSuspended
 2116              		.cfi_endproc
 2117              	.LFE49:
 2119              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2120              		.align	1
 2121              		.global	xTaskGetTickCount
 2122              		.syntax unified
 2123              		.thumb
 2124              		.thumb_func
 2126              	xTaskGetTickCount:
 2127              	.LFB51:
2287:./FreeRTOS/tasks.c ****     TickType_t xTicks;
 2128              		.loc 1 2287 1 is_stmt 1 view -0
 2129              		.cfi_startproc
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 146


 2130              		@ args = 0, pretend = 0, frame = 0
 2131              		@ frame_needed = 0, uses_anonymous_args = 0
 2132              		@ link register save eliminated.
2288:./FreeRTOS/tasks.c **** 
 2133              		.loc 1 2288 5 view .LVU586
2291:./FreeRTOS/tasks.c ****     {
 2134              		.loc 1 2291 35 view .LVU587
2293:./FreeRTOS/tasks.c ****     }
 2135              		.loc 1 2293 9 view .LVU588
2293:./FreeRTOS/tasks.c ****     }
 2136              		.loc 1 2293 16 is_stmt 0 view .LVU589
 2137 0000 014B     		ldr	r3, .L144
 2138 0002 1868     		ldr	r0, [r3]
 2139              	.LVL151:
2295:./FreeRTOS/tasks.c **** 
 2140              		.loc 1 2295 34 is_stmt 1 view .LVU590
2297:./FreeRTOS/tasks.c **** }
 2141              		.loc 1 2297 5 view .LVU591
2298:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2142              		.loc 1 2298 1 is_stmt 0 view .LVU592
 2143 0004 7047     		bx	lr
 2144              	.L145:
 2145 0006 00BF     		.align	2
 2146              	.L144:
 2147 0008 00000000 		.word	xTickCount
 2148              		.cfi_endproc
 2149              	.LFE51:
 2151              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2152              		.align	1
 2153              		.global	xTaskGetTickCountFromISR
 2154              		.syntax unified
 2155              		.thumb
 2156              		.thumb_func
 2158              	xTaskGetTickCountFromISR:
 2159              	.LFB52:
2302:./FreeRTOS/tasks.c ****     TickType_t xReturn;
 2160              		.loc 1 2302 1 is_stmt 1 view -0
 2161              		.cfi_startproc
 2162              		@ args = 0, pretend = 0, frame = 0
 2163              		@ frame_needed = 0, uses_anonymous_args = 0
 2164              		@ link register save eliminated.
2303:./FreeRTOS/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
 2165              		.loc 1 2303 5 view .LVU594
2304:./FreeRTOS/tasks.c **** 
 2166              		.loc 1 2304 5 view .LVU595
2320:./FreeRTOS/tasks.c **** 
 2167              		.loc 1 2320 47 view .LVU596
2322:./FreeRTOS/tasks.c ****     {
 2168              		.loc 1 2322 5 view .LVU597
 2169              	.LVL152:
2324:./FreeRTOS/tasks.c ****     }
 2170              		.loc 1 2324 9 view .LVU598
2324:./FreeRTOS/tasks.c ****     }
 2171              		.loc 1 2324 17 is_stmt 0 view .LVU599
 2172 0000 014B     		ldr	r3, .L147
 2173 0002 1868     		ldr	r0, [r3]
 2174              	.LVL153:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 147


2326:./FreeRTOS/tasks.c **** 
 2175              		.loc 1 2326 5 is_stmt 1 view .LVU600
2328:./FreeRTOS/tasks.c **** }
 2176              		.loc 1 2328 5 view .LVU601
2329:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2177              		.loc 1 2329 1 is_stmt 0 view .LVU602
 2178 0004 7047     		bx	lr
 2179              	.L148:
 2180 0006 00BF     		.align	2
 2181              	.L147:
 2182 0008 00000000 		.word	xTickCount
 2183              		.cfi_endproc
 2184              	.LFE52:
 2186              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2187              		.align	1
 2188              		.global	uxTaskGetNumberOfTasks
 2189              		.syntax unified
 2190              		.thumb
 2191              		.thumb_func
 2193              	uxTaskGetNumberOfTasks:
 2194              	.LFB53:
2333:./FreeRTOS/tasks.c ****     /* A critical section is not required because the variables are of type
 2195              		.loc 1 2333 1 is_stmt 1 view -0
 2196              		.cfi_startproc
 2197              		@ args = 0, pretend = 0, frame = 0
 2198              		@ frame_needed = 0, uses_anonymous_args = 0
 2199              		@ link register save eliminated.
2336:./FreeRTOS/tasks.c **** }
 2200              		.loc 1 2336 5 view .LVU604
2336:./FreeRTOS/tasks.c **** }
 2201              		.loc 1 2336 12 is_stmt 0 view .LVU605
 2202 0000 014B     		ldr	r3, .L150
 2203 0002 1868     		ldr	r0, [r3]
2337:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2204              		.loc 1 2337 1 view .LVU606
 2205 0004 7047     		bx	lr
 2206              	.L151:
 2207 0006 00BF     		.align	2
 2208              	.L150:
 2209 0008 00000000 		.word	uxCurrentNumberOfTasks
 2210              		.cfi_endproc
 2211              	.LFE53:
 2213              		.section	.text.pcTaskGetName,"ax",%progbits
 2214              		.align	1
 2215              		.global	pcTaskGetName
 2216              		.syntax unified
 2217              		.thumb
 2218              		.thumb_func
 2220              	pcTaskGetName:
 2221              	.LVL154:
 2222              	.LFB54:
2341:./FreeRTOS/tasks.c ****     TCB_t * pxTCB;
 2223              		.loc 1 2341 1 is_stmt 1 view -0
 2224              		.cfi_startproc
 2225              		@ args = 0, pretend = 0, frame = 0
 2226              		@ frame_needed = 0, uses_anonymous_args = 0
 2227              		@ link register save eliminated.
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 148


2342:./FreeRTOS/tasks.c **** 
 2228              		.loc 1 2342 5 view .LVU608
2346:./FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 2229              		.loc 1 2346 5 view .LVU609
2346:./FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 2230              		.loc 1 2346 13 is_stmt 0 view .LVU610
 2231 0000 0346     		mov	r3, r0
 2232 0002 10B1     		cbz	r0, .L154
 2233              	.LVL155:
 2234              	.L153:
2347:./FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2235              		.loc 1 2347 26 is_stmt 1 discriminator 4 view .LVU611
2348:./FreeRTOS/tasks.c **** }
 2236              		.loc 1 2348 5 discriminator 4 view .LVU612
2349:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2237              		.loc 1 2349 1 is_stmt 0 discriminator 4 view .LVU613
 2238 0004 03F13400 		add	r0, r3, #52
 2239 0008 7047     		bx	lr
 2240              	.LVL156:
 2241              	.L154:
2346:./FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 2242              		.loc 1 2346 13 discriminator 1 view .LVU614
 2243 000a 014B     		ldr	r3, .L155
 2244 000c 1B68     		ldr	r3, [r3]
 2245              	.LVL157:
2346:./FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 2246              		.loc 1 2346 13 discriminator 1 view .LVU615
 2247 000e F9E7     		b	.L153
 2248              	.L156:
 2249              		.align	2
 2250              	.L155:
 2251 0010 00000000 		.word	pxCurrentTCB
 2252              		.cfi_endproc
 2253              	.LFE54:
 2255              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2256              		.align	1
 2257              		.global	xTaskIncrementTick
 2258              		.syntax unified
 2259              		.thumb
 2260              		.thumb_func
 2262              	xTaskIncrementTick:
 2263              	.LFB56:
2721:./FreeRTOS/tasks.c ****     TCB_t * pxTCB;
 2264              		.loc 1 2721 1 is_stmt 1 view -0
 2265              		.cfi_startproc
 2266              		@ args = 0, pretend = 0, frame = 0
 2267              		@ frame_needed = 0, uses_anonymous_args = 0
 2268 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2269              	.LCFI21:
 2270              		.cfi_def_cfa_offset 24
 2271              		.cfi_offset 3, -24
 2272              		.cfi_offset 4, -20
 2273              		.cfi_offset 5, -16
 2274              		.cfi_offset 6, -12
 2275              		.cfi_offset 7, -8
 2276              		.cfi_offset 14, -4
2722:./FreeRTOS/tasks.c ****     TickType_t xItemValue;
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 149


 2277              		.loc 1 2722 5 view .LVU617
2723:./FreeRTOS/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
 2278              		.loc 1 2723 5 view .LVU618
2724:./FreeRTOS/tasks.c **** 
 2279              		.loc 1 2724 5 view .LVU619
 2280              	.LVL158:
2729:./FreeRTOS/tasks.c **** 
 2281              		.loc 1 2729 43 view .LVU620
2731:./FreeRTOS/tasks.c ****     {
 2282              		.loc 1 2731 5 view .LVU621
2731:./FreeRTOS/tasks.c ****     {
 2283              		.loc 1 2731 30 is_stmt 0 view .LVU622
 2284 0002 4C4B     		ldr	r3, .L180
 2285 0004 1B68     		ldr	r3, [r3]
2731:./FreeRTOS/tasks.c ****     {
 2286              		.loc 1 2731 7 view .LVU623
 2287 0006 002B     		cmp	r3, #0
 2288 0008 40F08D80 		bne	.L158
 2289              	.LBB54:
2735:./FreeRTOS/tasks.c **** 
 2290              		.loc 1 2735 9 is_stmt 1 view .LVU624
2735:./FreeRTOS/tasks.c **** 
 2291              		.loc 1 2735 55 is_stmt 0 view .LVU625
 2292 000c 4A4B     		ldr	r3, .L180+4
 2293 000e 1C68     		ldr	r4, [r3]
2735:./FreeRTOS/tasks.c **** 
 2294              		.loc 1 2735 26 view .LVU626
 2295 0010 0134     		adds	r4, r4, #1
 2296              	.LVL159:
2739:./FreeRTOS/tasks.c **** 
 2297              		.loc 1 2739 9 is_stmt 1 view .LVU627
2739:./FreeRTOS/tasks.c **** 
 2298              		.loc 1 2739 20 is_stmt 0 view .LVU628
 2299 0012 1C60     		str	r4, [r3]
2741:./FreeRTOS/tasks.c ****         {
 2300              		.loc 1 2741 9 is_stmt 1 view .LVU629
2741:./FreeRTOS/tasks.c ****         {
 2301              		.loc 1 2741 11 is_stmt 0 view .LVU630
 2302 0014 ACB1     		cbz	r4, .L176
 2303              	.L159:
2747:./FreeRTOS/tasks.c ****         }
 2304              		.loc 1 2747 37 is_stmt 1 view .LVU631
2754:./FreeRTOS/tasks.c ****         {
 2305              		.loc 1 2754 9 view .LVU632
2754:./FreeRTOS/tasks.c ****         {
 2306              		.loc 1 2754 29 is_stmt 0 view .LVU633
 2307 0016 494B     		ldr	r3, .L180+8
 2308 0018 1B68     		ldr	r3, [r3]
2754:./FreeRTOS/tasks.c ****         {
 2309              		.loc 1 2754 11 view .LVU634
 2310 001a A342     		cmp	r3, r4
 2311 001c 1ED9     		bls	.L171
 2312              	.LBE54:
2724:./FreeRTOS/tasks.c **** 
 2313              		.loc 1 2724 16 view .LVU635
 2314 001e 0020     		movs	r0, #0
 2315              	.LVL160:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 150


 2316              	.L161:
 2317              	.LBB61:
2841:./FreeRTOS/tasks.c ****             {
 2318              		.loc 1 2841 13 is_stmt 1 view .LVU636
2841:./FreeRTOS/tasks.c ****             {
 2319              		.loc 1 2841 17 is_stmt 0 view .LVU637
 2320 0020 474B     		ldr	r3, .L180+12
 2321 0022 1B68     		ldr	r3, [r3]
 2322 0024 DB6A     		ldr	r3, [r3, #44]
 2323 0026 03EB8303 		add	r3, r3, r3, lsl #2
 2324 002a 9A00     		lsls	r2, r3, #2
 2325 002c 454B     		ldr	r3, .L180+16
 2326 002e 9B58     		ldr	r3, [r3, r2]
2841:./FreeRTOS/tasks.c ****             {
 2327              		.loc 1 2841 15 view .LVU638
 2328 0030 012B     		cmp	r3, #1
 2329 0032 00D9     		bls	.L169
2843:./FreeRTOS/tasks.c ****             }
 2330              		.loc 1 2843 33 view .LVU639
 2331 0034 0120     		movs	r0, #1
 2332              	.LVL161:
 2333              	.L169:
2847:./FreeRTOS/tasks.c ****             }
 2334              		.loc 1 2847 41 is_stmt 1 view .LVU640
2869:./FreeRTOS/tasks.c ****             {
 2335              		.loc 1 2869 13 view .LVU641
2869:./FreeRTOS/tasks.c ****             {
 2336              		.loc 1 2869 31 is_stmt 0 view .LVU642
 2337 0036 444B     		ldr	r3, .L180+20
 2338 0038 1B68     		ldr	r3, [r3]
2869:./FreeRTOS/tasks.c ****             {
 2339              		.loc 1 2869 15 view .LVU643
 2340 003a 002B     		cmp	r3, #0
 2341 003c 78D0     		beq	.L157
2871:./FreeRTOS/tasks.c ****             }
 2342              		.loc 1 2871 33 view .LVU644
 2343 003e 0120     		movs	r0, #1
 2344              	.LVL162:
2871:./FreeRTOS/tasks.c ****             }
 2345              		.loc 1 2871 33 view .LVU645
 2346              	.LBE61:
2893:./FreeRTOS/tasks.c **** }
 2347              		.loc 1 2893 5 is_stmt 1 view .LVU646
2893:./FreeRTOS/tasks.c **** }
 2348              		.loc 1 2893 12 is_stmt 0 view .LVU647
 2349 0040 76E0     		b	.L157
 2350              	.LVL163:
 2351              	.L176:
 2352              	.LBB62:
 2353              	.LBB55:
2743:./FreeRTOS/tasks.c ****         }
 2354              		.loc 1 2743 13 is_stmt 1 view .LVU648
2743:./FreeRTOS/tasks.c ****         }
 2355              		.loc 1 2743 13 view .LVU649
2743:./FreeRTOS/tasks.c ****         }
 2356              		.loc 1 2743 13 view .LVU650
 2357 0042 424A     		ldr	r2, .L180+24
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 151


 2358 0044 1168     		ldr	r1, [r2]
 2359              	.LVL164:
2743:./FreeRTOS/tasks.c ****         }
 2360              		.loc 1 2743 13 view .LVU651
 2361 0046 424B     		ldr	r3, .L180+28
 2362 0048 1868     		ldr	r0, [r3]
 2363 004a 1060     		str	r0, [r2]
2743:./FreeRTOS/tasks.c ****         }
 2364              		.loc 1 2743 13 view .LVU652
 2365 004c 1960     		str	r1, [r3]
2743:./FreeRTOS/tasks.c ****         }
 2366              		.loc 1 2743 13 view .LVU653
 2367 004e 414A     		ldr	r2, .L180+32
 2368 0050 1368     		ldr	r3, [r2]
 2369 0052 0133     		adds	r3, r3, #1
 2370 0054 1360     		str	r3, [r2]
2743:./FreeRTOS/tasks.c ****         }
 2371              		.loc 1 2743 13 view .LVU654
 2372 0056 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2373              	.LVL165:
2743:./FreeRTOS/tasks.c ****         }
 2374              		.loc 1 2743 13 is_stmt 0 view .LVU655
 2375              	.LBE55:
2743:./FreeRTOS/tasks.c ****         }
 2376              		.loc 1 2743 39 is_stmt 1 view .LVU656
 2377 005a DCE7     		b	.L159
 2378              	.LVL166:
 2379              	.L171:
2743:./FreeRTOS/tasks.c ****         }
 2380              		.loc 1 2743 39 is_stmt 0 view .LVU657
 2381              	.LBE62:
2724:./FreeRTOS/tasks.c **** 
 2382              		.loc 1 2724 16 view .LVU658
 2383 005c 0020     		movs	r0, #0
 2384 005e 37E0     		b	.L160
 2385              	.LVL167:
 2386              	.L177:
 2387              	.LBB63:
2765:./FreeRTOS/tasks.c ****                     break;
 2388              		.loc 1 2765 21 is_stmt 1 view .LVU659
2765:./FreeRTOS/tasks.c ****                     break;
 2389              		.loc 1 2765 42 is_stmt 0 view .LVU660
 2390 0060 364B     		ldr	r3, .L180+8
 2391 0062 4FF0FF32 		mov	r2, #-1
 2392 0066 1A60     		str	r2, [r3]
2766:./FreeRTOS/tasks.c ****                 }
 2393              		.loc 1 2766 21 is_stmt 1 view .LVU661
 2394 0068 DAE7     		b	.L161
 2395              	.LVL168:
 2396              	.L178:
2784:./FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 2397              		.loc 1 2784 25 view .LVU662
2784:./FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 2398              		.loc 1 2784 46 is_stmt 0 view .LVU663
 2399 006a 344B     		ldr	r3, .L180+8
 2400              	.LVL169:
2784:./FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 152


 2401              		.loc 1 2784 46 view .LVU664
 2402 006c 1A60     		str	r2, [r3]
2785:./FreeRTOS/tasks.c ****                     }
 2403              		.loc 1 2785 25 is_stmt 1 view .LVU665
 2404 006e D7E7     		b	.L161
 2405              	.LVL170:
 2406              	.L179:
 2407              	.LBB56:
2793:./FreeRTOS/tasks.c **** 
 2408              		.loc 1 2793 21 discriminator 1 view .LVU666
 2409 0070 D968     		ldr	r1, [r3, #12]
 2410 0072 5160     		str	r1, [r2, #4]
 2411 0074 42E0     		b	.L164
 2412              	.LVL171:
 2413              	.L166:
2793:./FreeRTOS/tasks.c **** 
 2414              		.loc 1 2793 21 is_stmt 0 discriminator 1 view .LVU667
 2415              	.LBE56:
 2416              	.LBB57:
2799:./FreeRTOS/tasks.c ****                     }
 2417              		.loc 1 2799 25 is_stmt 1 discriminator 3 view .LVU668
 2418 0076 0021     		movs	r1, #0
 2419 0078 9962     		str	r1, [r3, #40]
2799:./FreeRTOS/tasks.c ****                     }
 2420              		.loc 1 2799 25 discriminator 3 view .LVU669
 2421 007a 1168     		ldr	r1, [r2]
 2422 007c 0139     		subs	r1, r1, #1
 2423 007e 1160     		str	r1, [r2]
 2424              	.LBE57:
2799:./FreeRTOS/tasks.c ****                     }
 2425              		.loc 1 2799 70 discriminator 3 view .LVU670
 2426              	.LVL172:
 2427              	.L165:
2803:./FreeRTOS/tasks.c ****                     }
 2428              		.loc 1 2803 49 view .LVU671
2808:./FreeRTOS/tasks.c **** 
 2429              		.loc 1 2808 21 view .LVU672
2808:./FreeRTOS/tasks.c **** 
 2430              		.loc 1 2808 21 view .LVU673
 2431 0080 DA6A     		ldr	r2, [r3, #44]
 2432 0082 0121     		movs	r1, #1
 2433 0084 9140     		lsls	r1, r1, r2
 2434 0086 344E     		ldr	r6, .L180+36
 2435 0088 3768     		ldr	r7, [r6]
 2436 008a 3943     		orrs	r1, r1, r7
 2437 008c 3160     		str	r1, [r6]
 2438              	.LBB58:
2808:./FreeRTOS/tasks.c **** 
 2439              		.loc 1 2808 21 view .LVU674
 2440 008e 2D49     		ldr	r1, .L180+16
 2441 0090 02EB8202 		add	r2, r2, r2, lsl #2
 2442 0094 4FEA820C 		lsl	ip, r2, #2
 2443 0098 8C44     		add	ip, ip, r1
 2444 009a DCF80420 		ldr	r2, [ip, #4]
 2445              	.LVL173:
2808:./FreeRTOS/tasks.c **** 
 2446              		.loc 1 2808 21 view .LVU675
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 153


2808:./FreeRTOS/tasks.c **** 
 2447              		.loc 1 2808 21 view .LVU676
2808:./FreeRTOS/tasks.c **** 
 2448              		.loc 1 2808 21 view .LVU677
 2449 009e 9A60     		str	r2, [r3, #8]
2808:./FreeRTOS/tasks.c **** 
 2450              		.loc 1 2808 21 view .LVU678
 2451 00a0 9668     		ldr	r6, [r2, #8]
 2452 00a2 DE60     		str	r6, [r3, #12]
2808:./FreeRTOS/tasks.c **** 
 2453              		.loc 1 2808 21 view .LVU679
 2454 00a4 7560     		str	r5, [r6, #4]
2808:./FreeRTOS/tasks.c **** 
 2455              		.loc 1 2808 21 view .LVU680
 2456 00a6 9560     		str	r5, [r2, #8]
2808:./FreeRTOS/tasks.c **** 
 2457              		.loc 1 2808 21 view .LVU681
 2458 00a8 DA6A     		ldr	r2, [r3, #44]
 2459              	.LVL174:
2808:./FreeRTOS/tasks.c **** 
 2460              		.loc 1 2808 21 is_stmt 0 view .LVU682
 2461 00aa 02EB820C 		add	ip, r2, r2, lsl #2
 2462 00ae 4FEA8C05 		lsl	r5, ip, #2
 2463 00b2 6E18     		adds	r6, r5, r1
 2464 00b4 5E61     		str	r6, [r3, #20]
2808:./FreeRTOS/tasks.c **** 
 2465              		.loc 1 2808 21 is_stmt 1 view .LVU683
 2466 00b6 4D59     		ldr	r5, [r1, r5]
 2467 00b8 0135     		adds	r5, r5, #1
 2468 00ba 4FEA8C0C 		lsl	ip, ip, #2
 2469 00be 41F80C50 		str	r5, [r1, ip]
 2470              	.LBE58:
2808:./FreeRTOS/tasks.c **** 
 2471              		.loc 1 2808 21 view .LVU684
2808:./FreeRTOS/tasks.c **** 
 2472              		.loc 1 2808 51 view .LVU685
2822:./FreeRTOS/tasks.c ****                         {
 2473              		.loc 1 2822 25 view .LVU686
2822:./FreeRTOS/tasks.c ****                         {
 2474              		.loc 1 2822 34 is_stmt 0 view .LVU687
 2475 00c2 DA6A     		ldr	r2, [r3, #44]
2822:./FreeRTOS/tasks.c ****                         {
 2476              		.loc 1 2822 61 view .LVU688
 2477 00c4 1E4B     		ldr	r3, .L180+12
 2478              	.LVL175:
2822:./FreeRTOS/tasks.c ****                         {
 2479              		.loc 1 2822 61 view .LVU689
 2480 00c6 1B68     		ldr	r3, [r3]
 2481 00c8 DB6A     		ldr	r3, [r3, #44]
2822:./FreeRTOS/tasks.c ****                         {
 2482              		.loc 1 2822 27 view .LVU690
 2483 00ca 9A42     		cmp	r2, r3
 2484 00cc 00D9     		bls	.L160
2824:./FreeRTOS/tasks.c ****                         }
 2485              		.loc 1 2824 45 view .LVU691
 2486 00ce 0120     		movs	r0, #1
 2487              	.LVL176:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 154


 2488              	.L160:
2756:./FreeRTOS/tasks.c ****             {
 2489              		.loc 1 2756 13 is_stmt 1 view .LVU692
2758:./FreeRTOS/tasks.c ****                 {
 2490              		.loc 1 2758 17 view .LVU693
2758:./FreeRTOS/tasks.c ****                 {
 2491              		.loc 1 2758 21 is_stmt 0 view .LVU694
 2492 00d0 1E4B     		ldr	r3, .L180+24
 2493 00d2 1B68     		ldr	r3, [r3]
 2494 00d4 1B68     		ldr	r3, [r3]
2758:./FreeRTOS/tasks.c ****                 {
 2495              		.loc 1 2758 19 view .LVU695
 2496 00d6 002B     		cmp	r3, #0
 2497 00d8 C2D0     		beq	.L177
2774:./FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2498              		.loc 1 2774 21 is_stmt 1 view .LVU696
2774:./FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2499              		.loc 1 2774 29 is_stmt 0 view .LVU697
 2500 00da 1C4B     		ldr	r3, .L180+24
 2501 00dc 1B68     		ldr	r3, [r3]
 2502 00de DB68     		ldr	r3, [r3, #12]
2774:./FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2503              		.loc 1 2774 27 view .LVU698
 2504 00e0 DB68     		ldr	r3, [r3, #12]
 2505              	.LVL177:
2775:./FreeRTOS/tasks.c **** 
 2506              		.loc 1 2775 21 is_stmt 1 view .LVU699
2775:./FreeRTOS/tasks.c **** 
 2507              		.loc 1 2775 32 is_stmt 0 view .LVU700
 2508 00e2 5A68     		ldr	r2, [r3, #4]
 2509              	.LVL178:
2777:./FreeRTOS/tasks.c ****                     {
 2510              		.loc 1 2777 21 is_stmt 1 view .LVU701
2777:./FreeRTOS/tasks.c ****                     {
 2511              		.loc 1 2777 23 is_stmt 0 view .LVU702
 2512 00e4 9442     		cmp	r4, r2
 2513 00e6 C0D3     		bcc	.L178
2789:./FreeRTOS/tasks.c ****                     }
 2514              		.loc 1 2789 49 is_stmt 1 view .LVU703
 2515              	.LBB59:
2793:./FreeRTOS/tasks.c **** 
 2516              		.loc 1 2793 21 view .LVU704
 2517 00e8 5A69     		ldr	r2, [r3, #20]
 2518              	.LVL179:
2793:./FreeRTOS/tasks.c **** 
 2519              		.loc 1 2793 21 view .LVU705
 2520 00ea 9D68     		ldr	r5, [r3, #8]
 2521 00ec D968     		ldr	r1, [r3, #12]
 2522 00ee A960     		str	r1, [r5, #8]
 2523              	.LVL180:
2793:./FreeRTOS/tasks.c **** 
 2524              		.loc 1 2793 21 view .LVU706
 2525 00f0 9D68     		ldr	r5, [r3, #8]
 2526 00f2 4D60     		str	r5, [r1, #4]
2793:./FreeRTOS/tasks.c **** 
 2527              		.loc 1 2793 21 view .LVU707
 2528 00f4 5168     		ldr	r1, [r2, #4]
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 155


 2529 00f6 1D1D     		adds	r5, r3, #4
 2530 00f8 A942     		cmp	r1, r5
 2531 00fa B9D0     		beq	.L179
 2532              	.L164:
2793:./FreeRTOS/tasks.c **** 
 2533              		.loc 1 2793 21 discriminator 3 view .LVU708
 2534 00fc 0021     		movs	r1, #0
 2535 00fe 5961     		str	r1, [r3, #20]
2793:./FreeRTOS/tasks.c **** 
 2536              		.loc 1 2793 21 discriminator 3 view .LVU709
 2537 0100 1168     		ldr	r1, [r2]
 2538 0102 0139     		subs	r1, r1, #1
 2539 0104 1160     		str	r1, [r2]
 2540              	.LBE59:
2793:./FreeRTOS/tasks.c **** 
 2541              		.loc 1 2793 66 discriminator 3 view .LVU710
2797:./FreeRTOS/tasks.c ****                     {
 2542              		.loc 1 2797 21 discriminator 3 view .LVU711
2797:./FreeRTOS/tasks.c ****                     {
 2543              		.loc 1 2797 25 is_stmt 0 discriminator 3 view .LVU712
 2544 0106 9A6A     		ldr	r2, [r3, #40]
 2545              	.LVL181:
2797:./FreeRTOS/tasks.c ****                     {
 2546              		.loc 1 2797 23 discriminator 3 view .LVU713
 2547 0108 002A     		cmp	r2, #0
 2548 010a B9D0     		beq	.L165
 2549              	.LBB60:
2799:./FreeRTOS/tasks.c ****                     }
 2550              		.loc 1 2799 25 is_stmt 1 view .LVU714
 2551              	.LVL182:
2799:./FreeRTOS/tasks.c ****                     }
 2552              		.loc 1 2799 25 view .LVU715
 2553 010c DE69     		ldr	r6, [r3, #28]
 2554 010e 196A     		ldr	r1, [r3, #32]
 2555 0110 B160     		str	r1, [r6, #8]
2799:./FreeRTOS/tasks.c ****                     }
 2556              		.loc 1 2799 25 view .LVU716
 2557 0112 DE69     		ldr	r6, [r3, #28]
 2558 0114 4E60     		str	r6, [r1, #4]
2799:./FreeRTOS/tasks.c ****                     }
 2559              		.loc 1 2799 25 view .LVU717
 2560 0116 5668     		ldr	r6, [r2, #4]
 2561 0118 03F11801 		add	r1, r3, #24
 2562 011c 8E42     		cmp	r6, r1
 2563 011e AAD1     		bne	.L166
2799:./FreeRTOS/tasks.c ****                     }
 2564              		.loc 1 2799 25 discriminator 1 view .LVU718
 2565 0120 196A     		ldr	r1, [r3, #32]
 2566 0122 5160     		str	r1, [r2, #4]
 2567 0124 A7E7     		b	.L166
 2568              	.LVL183:
 2569              	.L158:
2799:./FreeRTOS/tasks.c ****                     }
 2570              		.loc 1 2799 25 is_stmt 0 discriminator 1 view .LVU719
 2571              	.LBE60:
 2572              	.LBE63:
2882:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 156


 2573              		.loc 1 2882 9 is_stmt 1 view .LVU720
 2574 0126 0D4A     		ldr	r2, .L180+40
 2575 0128 1368     		ldr	r3, [r2]
 2576 012a 0133     		adds	r3, r3, #1
 2577 012c 1360     		str	r3, [r2]
2724:./FreeRTOS/tasks.c **** 
 2578              		.loc 1 2724 16 is_stmt 0 view .LVU721
 2579 012e 0020     		movs	r0, #0
 2580              	.LVL184:
 2581              	.L157:
2894:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2582              		.loc 1 2894 1 view .LVU722
 2583 0130 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2584              	.L181:
 2585 0132 00BF     		.align	2
 2586              	.L180:
 2587 0134 00000000 		.word	uxSchedulerSuspended
 2588 0138 00000000 		.word	xTickCount
 2589 013c 00000000 		.word	xNextTaskUnblockTime
 2590 0140 00000000 		.word	pxCurrentTCB
 2591 0144 00000000 		.word	pxReadyTasksLists
 2592 0148 00000000 		.word	xYieldPending
 2593 014c 00000000 		.word	pxDelayedTaskList
 2594 0150 00000000 		.word	pxOverflowDelayedTaskList
 2595 0154 00000000 		.word	xNumOfOverflows
 2596 0158 00000000 		.word	uxTopReadyPriority
 2597 015c 00000000 		.word	xPendedTicks
 2598              		.cfi_endproc
 2599              	.LFE56:
 2601              		.section	.text.xTaskResumeAll,"ax",%progbits
 2602              		.align	1
 2603              		.global	xTaskResumeAll
 2604              		.syntax unified
 2605              		.thumb
 2606              		.thumb_func
 2608              	xTaskResumeAll:
 2609              	.LFB50:
2175:./FreeRTOS/tasks.c ****     TCB_t * pxTCB = NULL;
 2610              		.loc 1 2175 1 is_stmt 1 view -0
 2611              		.cfi_startproc
 2612              		@ args = 0, pretend = 0, frame = 0
 2613              		@ frame_needed = 0, uses_anonymous_args = 0
 2614 0000 38B5     		push	{r3, r4, r5, lr}
 2615              	.LCFI22:
 2616              		.cfi_def_cfa_offset 16
 2617              		.cfi_offset 3, -16
 2618              		.cfi_offset 4, -12
 2619              		.cfi_offset 5, -8
 2620              		.cfi_offset 14, -4
2176:./FreeRTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 2621              		.loc 1 2176 5 view .LVU724
 2622              	.LVL185:
2177:./FreeRTOS/tasks.c **** 
 2623              		.loc 1 2177 5 view .LVU725
2181:./FreeRTOS/tasks.c **** 
 2624              		.loc 1 2181 41 view .LVU726
2188:./FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 157


 2625              		.loc 1 2188 5 view .LVU727
 2626 0002 FFF7FEFF 		bl	vPortEnterCritical
 2627              	.LVL186:
2190:./FreeRTOS/tasks.c **** 
 2628              		.loc 1 2190 9 view .LVU728
 2629 0006 434B     		ldr	r3, .L200
 2630 0008 1A68     		ldr	r2, [r3]
 2631 000a 013A     		subs	r2, r2, #1
 2632 000c 1A60     		str	r2, [r3]
2192:./FreeRTOS/tasks.c ****         {
 2633              		.loc 1 2192 9 view .LVU729
2192:./FreeRTOS/tasks.c ****         {
 2634              		.loc 1 2192 34 is_stmt 0 view .LVU730
 2635 000e 1B68     		ldr	r3, [r3]
2192:./FreeRTOS/tasks.c ****         {
 2636              		.loc 1 2192 11 view .LVU731
 2637 0010 002B     		cmp	r3, #0
 2638 0012 7AD1     		bne	.L193
2194:./FreeRTOS/tasks.c ****             {
 2639              		.loc 1 2194 13 is_stmt 1 view .LVU732
2194:./FreeRTOS/tasks.c ****             {
 2640              		.loc 1 2194 40 is_stmt 0 view .LVU733
 2641 0014 404B     		ldr	r3, .L200+4
 2642 0016 1B68     		ldr	r3, [r3]
2194:./FreeRTOS/tasks.c ****             {
 2643              		.loc 1 2194 15 view .LVU734
 2644 0018 3BB9     		cbnz	r3, .L194
2177:./FreeRTOS/tasks.c **** 
 2645              		.loc 1 2177 16 view .LVU735
 2646 001a 0024     		movs	r4, #0
 2647 001c 76E0     		b	.L183
 2648              	.LVL187:
 2649              	.L197:
 2650              	.LBB64:
2201:./FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2651              		.loc 1 2201 21 is_stmt 1 discriminator 1 view .LVU736
 2652 001e 196A     		ldr	r1, [r3, #32]
 2653 0020 5160     		str	r1, [r2, #4]
 2654 0022 15E0     		b	.L185
 2655              	.LVL188:
 2656              	.L198:
2201:./FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2657              		.loc 1 2201 21 is_stmt 0 discriminator 1 view .LVU737
 2658              	.LBE64:
 2659              	.LBB65:
2203:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2660              		.loc 1 2203 21 is_stmt 1 discriminator 1 view .LVU738
 2661 0024 D968     		ldr	r1, [r3, #12]
 2662 0026 5160     		str	r1, [r2, #4]
 2663 0028 21E0     		b	.L186
 2664              	.LVL189:
 2665              	.L194:
2203:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2666              		.loc 1 2203 21 is_stmt 0 discriminator 1 view .LVU739
 2667              	.LBE65:
2176:./FreeRTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 2668              		.loc 1 2176 13 view .LVU740
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 158


 2669 002a 0023     		movs	r3, #0
 2670              	.LVL190:
 2671              	.L184:
2214:./FreeRTOS/tasks.c ****                     }
 2672              		.loc 1 2214 49 is_stmt 1 view .LVU741
2198:./FreeRTOS/tasks.c ****                 {
 2673              		.loc 1 2198 64 view .LVU742
2198:./FreeRTOS/tasks.c ****                 {
 2674              		.loc 1 2198 24 is_stmt 0 view .LVU743
 2675 002c 3B4A     		ldr	r2, .L200+8
 2676 002e 1268     		ldr	r2, [r2]
2198:./FreeRTOS/tasks.c ****                 {
 2677              		.loc 1 2198 64 view .LVU744
 2678 0030 002A     		cmp	r2, #0
 2679 0032 47D0     		beq	.L196
2200:./FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 2680              		.loc 1 2200 21 is_stmt 1 view .LVU745
2200:./FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 2681              		.loc 1 2200 29 is_stmt 0 view .LVU746
 2682 0034 394B     		ldr	r3, .L200+8
 2683              	.LVL191:
2200:./FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 2684              		.loc 1 2200 29 view .LVU747
 2685 0036 DB68     		ldr	r3, [r3, #12]
2200:./FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 2686              		.loc 1 2200 27 view .LVU748
 2687 0038 DB68     		ldr	r3, [r3, #12]
 2688              	.LVL192:
 2689              	.LBB66:
2201:./FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2690              		.loc 1 2201 21 is_stmt 1 view .LVU749
 2691 003a 9A6A     		ldr	r2, [r3, #40]
 2692              	.LVL193:
2201:./FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2693              		.loc 1 2201 21 view .LVU750
 2694 003c D869     		ldr	r0, [r3, #28]
 2695 003e 196A     		ldr	r1, [r3, #32]
 2696 0040 8160     		str	r1, [r0, #8]
2201:./FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2697              		.loc 1 2201 21 view .LVU751
 2698 0042 D869     		ldr	r0, [r3, #28]
 2699 0044 4860     		str	r0, [r1, #4]
2201:./FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2700              		.loc 1 2201 21 view .LVU752
 2701 0046 5068     		ldr	r0, [r2, #4]
 2702 0048 03F11801 		add	r1, r3, #24
 2703 004c 8842     		cmp	r0, r1
 2704 004e E6D0     		beq	.L197
 2705              	.L185:
2201:./FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2706              		.loc 1 2201 21 discriminator 3 view .LVU753
 2707 0050 0021     		movs	r1, #0
 2708 0052 9962     		str	r1, [r3, #40]
2201:./FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2709              		.loc 1 2201 21 discriminator 3 view .LVU754
 2710 0054 1168     		ldr	r1, [r2]
 2711 0056 0139     		subs	r1, r1, #1
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 159


 2712 0058 1160     		str	r1, [r2]
 2713              	.LBE66:
2201:./FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2714              		.loc 1 2201 66 discriminator 3 view .LVU755
2202:./FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 2715              		.loc 1 2202 21 discriminator 3 view .LVU756
 2716              	.LBB67:
2203:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2717              		.loc 1 2203 21 discriminator 3 view .LVU757
 2718 005a 5A69     		ldr	r2, [r3, #20]
 2719              	.LVL194:
2203:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2720              		.loc 1 2203 21 discriminator 3 view .LVU758
 2721 005c 9868     		ldr	r0, [r3, #8]
 2722 005e D968     		ldr	r1, [r3, #12]
 2723 0060 8160     		str	r1, [r0, #8]
2203:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2724              		.loc 1 2203 21 discriminator 3 view .LVU759
 2725 0062 9868     		ldr	r0, [r3, #8]
 2726 0064 4860     		str	r0, [r1, #4]
2203:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2727              		.loc 1 2203 21 discriminator 3 view .LVU760
 2728 0066 5168     		ldr	r1, [r2, #4]
 2729 0068 181D     		adds	r0, r3, #4
 2730 006a 8142     		cmp	r1, r0
 2731 006c DAD0     		beq	.L198
 2732              	.L186:
2203:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2733              		.loc 1 2203 21 discriminator 3 view .LVU761
 2734 006e 0021     		movs	r1, #0
 2735 0070 5961     		str	r1, [r3, #20]
2203:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2736              		.loc 1 2203 21 discriminator 3 view .LVU762
 2737 0072 1168     		ldr	r1, [r2]
 2738 0074 0139     		subs	r1, r1, #1
 2739 0076 1160     		str	r1, [r2]
 2740              	.LBE67:
2203:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2741              		.loc 1 2203 66 discriminator 3 view .LVU763
2204:./FreeRTOS/tasks.c **** 
 2742              		.loc 1 2204 21 discriminator 3 view .LVU764
2204:./FreeRTOS/tasks.c **** 
 2743              		.loc 1 2204 21 discriminator 3 view .LVU765
 2744 0078 DA6A     		ldr	r2, [r3, #44]
 2745              	.LVL195:
2204:./FreeRTOS/tasks.c **** 
 2746              		.loc 1 2204 21 is_stmt 0 discriminator 3 view .LVU766
 2747 007a 0121     		movs	r1, #1
 2748 007c 9140     		lsls	r1, r1, r2
 2749 007e 284C     		ldr	r4, .L200+12
 2750 0080 2568     		ldr	r5, [r4]
 2751 0082 2943     		orrs	r1, r1, r5
 2752 0084 2160     		str	r1, [r4]
 2753              	.LBB68:
2204:./FreeRTOS/tasks.c **** 
 2754              		.loc 1 2204 21 is_stmt 1 discriminator 3 view .LVU767
 2755 0086 2749     		ldr	r1, .L200+16
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 160


 2756 0088 02EB8202 		add	r2, r2, r2, lsl #2
 2757 008c 01EB8202 		add	r2, r1, r2, lsl #2
 2758 0090 5268     		ldr	r2, [r2, #4]
 2759              	.LVL196:
2204:./FreeRTOS/tasks.c **** 
 2760              		.loc 1 2204 21 discriminator 3 view .LVU768
2204:./FreeRTOS/tasks.c **** 
 2761              		.loc 1 2204 21 discriminator 3 view .LVU769
2204:./FreeRTOS/tasks.c **** 
 2762              		.loc 1 2204 21 discriminator 3 view .LVU770
 2763 0092 9A60     		str	r2, [r3, #8]
2204:./FreeRTOS/tasks.c **** 
 2764              		.loc 1 2204 21 discriminator 3 view .LVU771
 2765 0094 9468     		ldr	r4, [r2, #8]
 2766 0096 DC60     		str	r4, [r3, #12]
2204:./FreeRTOS/tasks.c **** 
 2767              		.loc 1 2204 21 discriminator 3 view .LVU772
 2768 0098 6060     		str	r0, [r4, #4]
2204:./FreeRTOS/tasks.c **** 
 2769              		.loc 1 2204 21 discriminator 3 view .LVU773
 2770 009a 9060     		str	r0, [r2, #8]
2204:./FreeRTOS/tasks.c **** 
 2771              		.loc 1 2204 21 discriminator 3 view .LVU774
 2772 009c DA6A     		ldr	r2, [r3, #44]
 2773              	.LVL197:
2204:./FreeRTOS/tasks.c **** 
 2774              		.loc 1 2204 21 is_stmt 0 discriminator 3 view .LVU775
 2775 009e 02EB8200 		add	r0, r2, r2, lsl #2
 2776 00a2 8400     		lsls	r4, r0, #2
 2777 00a4 01EB8000 		add	r0, r1, r0, lsl #2
 2778 00a8 5861     		str	r0, [r3, #20]
2204:./FreeRTOS/tasks.c **** 
 2779              		.loc 1 2204 21 is_stmt 1 discriminator 3 view .LVU776
 2780 00aa 0859     		ldr	r0, [r1, r4]
 2781 00ac 0130     		adds	r0, r0, #1
 2782 00ae 0851     		str	r0, [r1, r4]
 2783              	.LBE68:
2204:./FreeRTOS/tasks.c **** 
 2784              		.loc 1 2204 21 discriminator 3 view .LVU777
2204:./FreeRTOS/tasks.c **** 
 2785              		.loc 1 2204 51 discriminator 3 view .LVU778
2208:./FreeRTOS/tasks.c ****                     {
 2786              		.loc 1 2208 21 discriminator 3 view .LVU779
2208:./FreeRTOS/tasks.c ****                     {
 2787              		.loc 1 2208 30 is_stmt 0 discriminator 3 view .LVU780
 2788 00b0 D96A     		ldr	r1, [r3, #44]
2208:./FreeRTOS/tasks.c ****                     {
 2789              		.loc 1 2208 58 discriminator 3 view .LVU781
 2790 00b2 1D4A     		ldr	r2, .L200+20
 2791 00b4 1268     		ldr	r2, [r2]
 2792 00b6 D26A     		ldr	r2, [r2, #44]
2208:./FreeRTOS/tasks.c ****                     {
 2793              		.loc 1 2208 23 discriminator 3 view .LVU782
 2794 00b8 9142     		cmp	r1, r2
 2795 00ba B7D3     		bcc	.L184
2210:./FreeRTOS/tasks.c ****                     }
 2796              		.loc 1 2210 25 is_stmt 1 view .LVU783
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 161


2210:./FreeRTOS/tasks.c ****                     }
 2797              		.loc 1 2210 39 is_stmt 0 view .LVU784
 2798 00bc 1B4A     		ldr	r2, .L200+24
 2799 00be 0121     		movs	r1, #1
 2800 00c0 1160     		str	r1, [r2]
 2801 00c2 B3E7     		b	.L184
 2802              	.LVL198:
 2803              	.L196:
2218:./FreeRTOS/tasks.c ****                 {
 2804              		.loc 1 2218 17 is_stmt 1 view .LVU785
2218:./FreeRTOS/tasks.c ****                 {
 2805              		.loc 1 2218 19 is_stmt 0 view .LVU786
 2806 00c4 0BB1     		cbz	r3, .L189
2226:./FreeRTOS/tasks.c ****                 }
 2807              		.loc 1 2226 21 is_stmt 1 view .LVU787
 2808 00c6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2809              	.LVL199:
 2810              	.L189:
 2811              	.LBB69:
2234:./FreeRTOS/tasks.c **** 
 2812              		.loc 1 2234 21 view .LVU788
2234:./FreeRTOS/tasks.c **** 
 2813              		.loc 1 2234 32 is_stmt 0 view .LVU789
 2814 00ca 194B     		ldr	r3, .L200+28
 2815 00cc 1C68     		ldr	r4, [r3]
 2816              	.LVL200:
2236:./FreeRTOS/tasks.c ****                     {
 2817              		.loc 1 2236 21 is_stmt 1 view .LVU790
2236:./FreeRTOS/tasks.c ****                     {
 2818              		.loc 1 2236 23 is_stmt 0 view .LVU791
 2819 00ce 84B9     		cbnz	r4, .L192
 2820              	.L190:
2256:./FreeRTOS/tasks.c ****                     }
 2821              		.loc 1 2256 49 is_stmt 1 view .LVU792
 2822              	.LBE69:
2260:./FreeRTOS/tasks.c ****                 {
 2823              		.loc 1 2260 17 view .LVU793
2260:./FreeRTOS/tasks.c ****                 {
 2824              		.loc 1 2260 35 is_stmt 0 view .LVU794
 2825 00d0 164B     		ldr	r3, .L200+24
 2826 00d2 1C68     		ldr	r4, [r3]
 2827              	.LVL201:
2260:./FreeRTOS/tasks.c ****                 {
 2828              		.loc 1 2260 19 view .LVU795
 2829 00d4 D4B1     		cbz	r4, .L183
2264:./FreeRTOS/tasks.c ****                     }
 2830              		.loc 1 2264 25 is_stmt 1 view .LVU796
 2831              	.LVL202:
2267:./FreeRTOS/tasks.c ****                 }
 2832              		.loc 1 2267 21 view .LVU797
 2833 00d6 4FF0E023 		mov	r3, #-536813568
 2834 00da 4FF08052 		mov	r2, #268435456
 2835 00de C3F8042D 		str	r2, [r3, #3332]
2267:./FreeRTOS/tasks.c ****                 }
 2836              		.loc 1 2267 21 view .LVU798
 2837              		.syntax unified
 2838              	@ 2267 "./FreeRTOS/tasks.c" 1
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 162


 2839 00e2 BFF34F8F 		dsb
 2840              	@ 0 "" 2
2267:./FreeRTOS/tasks.c ****                 }
 2841              		.loc 1 2267 21 view .LVU799
 2842              	@ 2267 "./FreeRTOS/tasks.c" 1
 2843 00e6 BFF36F8F 		isb
 2844              	@ 0 "" 2
2267:./FreeRTOS/tasks.c ****                 }
 2845              		.loc 1 2267 52 view .LVU800
2264:./FreeRTOS/tasks.c ****                     }
 2846              		.loc 1 2264 41 is_stmt 0 view .LVU801
 2847              		.thumb
 2848              		.syntax unified
 2849 00ea 0124     		movs	r4, #1
 2850 00ec 0EE0     		b	.L183
 2851              	.LVL203:
 2852              	.L191:
 2853              	.LBB70:
2246:./FreeRTOS/tasks.c ****                             }
 2854              		.loc 1 2246 57 is_stmt 1 view .LVU802
2249:./FreeRTOS/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
 2855              		.loc 1 2249 29 view .LVU803
2250:./FreeRTOS/tasks.c **** 
 2856              		.loc 1 2250 48 view .LVU804
 2857 00ee 013C     		subs	r4, r4, #1
 2858              	.LVL204:
2250:./FreeRTOS/tasks.c **** 
 2859              		.loc 1 2250 48 is_stmt 0 view .LVU805
 2860 00f0 07D0     		beq	.L199
 2861              	.L192:
2238:./FreeRTOS/tasks.c ****                         {
 2862              		.loc 1 2238 25 is_stmt 1 view .LVU806
2240:./FreeRTOS/tasks.c ****                             {
 2863              		.loc 1 2240 29 view .LVU807
2240:./FreeRTOS/tasks.c ****                             {
 2864              		.loc 1 2240 33 is_stmt 0 view .LVU808
 2865 00f2 FFF7FEFF 		bl	xTaskIncrementTick
 2866              	.LVL205:
2240:./FreeRTOS/tasks.c ****                             {
 2867              		.loc 1 2240 31 view .LVU809
 2868 00f6 0028     		cmp	r0, #0
 2869 00f8 F9D0     		beq	.L191
2242:./FreeRTOS/tasks.c ****                             }
 2870              		.loc 1 2242 33 is_stmt 1 view .LVU810
2242:./FreeRTOS/tasks.c ****                             }
 2871              		.loc 1 2242 47 is_stmt 0 view .LVU811
 2872 00fa 0C4B     		ldr	r3, .L200+24
 2873 00fc 0122     		movs	r2, #1
 2874 00fe 1A60     		str	r2, [r3]
 2875 0100 F5E7     		b	.L191
 2876              	.L199:
2252:./FreeRTOS/tasks.c ****                     }
 2877              		.loc 1 2252 25 is_stmt 1 view .LVU812
2252:./FreeRTOS/tasks.c ****                     }
 2878              		.loc 1 2252 38 is_stmt 0 view .LVU813
 2879 0102 0B4B     		ldr	r3, .L200+28
 2880 0104 0022     		movs	r2, #0
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 163


 2881 0106 1A60     		str	r2, [r3]
 2882 0108 E2E7     		b	.L190
 2883              	.LVL206:
 2884              	.L193:
2252:./FreeRTOS/tasks.c ****                     }
 2885              		.loc 1 2252 38 view .LVU814
 2886              	.LBE70:
2177:./FreeRTOS/tasks.c **** 
 2887              		.loc 1 2177 16 view .LVU815
 2888 010a 0024     		movs	r4, #0
 2889              	.LVL207:
 2890              	.L183:
2277:./FreeRTOS/tasks.c ****         }
 2891              		.loc 1 2277 37 is_stmt 1 view .LVU816
2280:./FreeRTOS/tasks.c **** 
 2892              		.loc 1 2280 5 view .LVU817
 2893 010c FFF7FEFF 		bl	vPortExitCritical
 2894              	.LVL208:
2282:./FreeRTOS/tasks.c **** }
 2895              		.loc 1 2282 5 view .LVU818
2283:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2896              		.loc 1 2283 1 is_stmt 0 view .LVU819
 2897 0110 2046     		mov	r0, r4
 2898 0112 38BD     		pop	{r3, r4, r5, pc}
 2899              	.LVL209:
 2900              	.L201:
2283:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2901              		.loc 1 2283 1 view .LVU820
 2902              		.align	2
 2903              	.L200:
 2904 0114 00000000 		.word	uxSchedulerSuspended
 2905 0118 00000000 		.word	uxCurrentNumberOfTasks
 2906 011c 00000000 		.word	xPendingReadyList
 2907 0120 00000000 		.word	uxTopReadyPriority
 2908 0124 00000000 		.word	pxReadyTasksLists
 2909 0128 00000000 		.word	pxCurrentTCB
 2910 012c 00000000 		.word	xYieldPending
 2911 0130 00000000 		.word	xPendedTicks
 2912              		.cfi_endproc
 2913              	.LFE50:
 2915              		.section	.text.xTaskDelayUntil,"ax",%progbits
 2916              		.align	1
 2917              		.global	xTaskDelayUntil
 2918              		.syntax unified
 2919              		.thumb
 2920              		.thumb_func
 2922              	xTaskDelayUntil:
 2923              	.LVL210:
 2924              	.LFB38:
1216:./FreeRTOS/tasks.c ****         TickType_t xTimeToWake;
 2925              		.loc 1 1216 5 is_stmt 1 view -0
 2926              		.cfi_startproc
 2927              		@ args = 0, pretend = 0, frame = 0
 2928              		@ frame_needed = 0, uses_anonymous_args = 0
1216:./FreeRTOS/tasks.c ****         TickType_t xTimeToWake;
 2929              		.loc 1 1216 5 is_stmt 0 view .LVU822
 2930 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 164


 2931              	.LCFI23:
 2932              		.cfi_def_cfa_offset 16
 2933              		.cfi_offset 3, -16
 2934              		.cfi_offset 4, -12
 2935              		.cfi_offset 5, -8
 2936              		.cfi_offset 14, -4
 2937 0002 0546     		mov	r5, r0
 2938 0004 0C46     		mov	r4, r1
1217:./FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 2939              		.loc 1 1217 9 is_stmt 1 view .LVU823
1218:./FreeRTOS/tasks.c **** 
 2940              		.loc 1 1218 9 view .LVU824
 2941              	.LVL211:
1220:./FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 2942              		.loc 1 1220 43 view .LVU825
1221:./FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 2943              		.loc 1 1221 48 view .LVU826
1222:./FreeRTOS/tasks.c **** 
 2944              		.loc 1 1222 50 view .LVU827
1224:./FreeRTOS/tasks.c ****         {
 2945              		.loc 1 1224 9 view .LVU828
 2946 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2947              	.LVL212:
 2948              	.LBB71:
1228:./FreeRTOS/tasks.c **** 
 2949              		.loc 1 1228 13 view .LVU829
1228:./FreeRTOS/tasks.c **** 
 2950              		.loc 1 1228 30 is_stmt 0 view .LVU830
 2951 000a 174B     		ldr	r3, .L212
 2952 000c 1868     		ldr	r0, [r3]
 2953              	.LVL213:
1231:./FreeRTOS/tasks.c **** 
 2954              		.loc 1 1231 13 is_stmt 1 view .LVU831
1231:./FreeRTOS/tasks.c **** 
 2955              		.loc 1 1231 27 is_stmt 0 view .LVU832
 2956 000e 2A68     		ldr	r2, [r5]
1231:./FreeRTOS/tasks.c **** 
 2957              		.loc 1 1231 25 view .LVU833
 2958 0010 1444     		add	r4, r4, r2
 2959              	.LVL214:
1233:./FreeRTOS/tasks.c ****             {
 2960              		.loc 1 1233 13 is_stmt 1 view .LVU834
1233:./FreeRTOS/tasks.c ****             {
 2961              		.loc 1 1233 15 is_stmt 0 view .LVU835
 2962 0012 8242     		cmp	r2, r0
 2963 0014 0BD9     		bls	.L203
1240:./FreeRTOS/tasks.c ****                 {
 2964              		.loc 1 1240 17 is_stmt 1 view .LVU836
1240:./FreeRTOS/tasks.c ****                 {
 2965              		.loc 1 1240 19 is_stmt 0 view .LVU837
 2966 0016 A242     		cmp	r2, r4
 2967 0018 02D8     		bhi	.L204
1265:./FreeRTOS/tasks.c **** 
 2968              		.loc 1 1265 13 is_stmt 1 view .LVU838
1265:./FreeRTOS/tasks.c **** 
 2969              		.loc 1 1265 33 is_stmt 0 view .LVU839
 2970 001a 2C60     		str	r4, [r5]
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 165


1267:./FreeRTOS/tasks.c ****             {
 2971              		.loc 1 1267 13 is_stmt 1 view .LVU840
 2972              	.LBE71:
1218:./FreeRTOS/tasks.c **** 
 2973              		.loc 1 1218 37 is_stmt 0 view .LVU841
 2974 001c 0024     		movs	r4, #0
 2975              	.LVL215:
1218:./FreeRTOS/tasks.c **** 
 2976              		.loc 1 1218 37 view .LVU842
 2977 001e 10E0     		b	.L205
 2978              	.LVL216:
 2979              	.L204:
 2980              	.LBB72:
1240:./FreeRTOS/tasks.c ****                 {
 2981              		.loc 1 1240 59 discriminator 1 view .LVU843
 2982 0020 A042     		cmp	r0, r4
 2983 0022 02D3     		bcc	.L206
1265:./FreeRTOS/tasks.c **** 
 2984              		.loc 1 1265 13 is_stmt 1 view .LVU844
1265:./FreeRTOS/tasks.c **** 
 2985              		.loc 1 1265 33 is_stmt 0 view .LVU845
 2986 0024 2C60     		str	r4, [r5]
1267:./FreeRTOS/tasks.c ****             {
 2987              		.loc 1 1267 13 is_stmt 1 view .LVU846
 2988              	.LBE72:
1218:./FreeRTOS/tasks.c **** 
 2989              		.loc 1 1218 37 is_stmt 0 view .LVU847
 2990 0026 0024     		movs	r4, #0
 2991              	.LVL217:
1218:./FreeRTOS/tasks.c **** 
 2992              		.loc 1 1218 37 view .LVU848
 2993 0028 0BE0     		b	.L205
 2994              	.LVL218:
 2995              	.L206:
 2996              	.LBB73:
1242:./FreeRTOS/tasks.c ****                 }
 2997              		.loc 1 1242 21 is_stmt 1 view .LVU849
1265:./FreeRTOS/tasks.c **** 
 2998              		.loc 1 1265 13 view .LVU850
1265:./FreeRTOS/tasks.c **** 
 2999              		.loc 1 1265 33 is_stmt 0 view .LVU851
 3000 002a 2C60     		str	r4, [r5]
1267:./FreeRTOS/tasks.c ****             {
 3001              		.loc 1 1267 13 is_stmt 1 view .LVU852
 3002 002c 04E0     		b	.L207
 3003              	.LVL219:
 3004              	.L203:
1254:./FreeRTOS/tasks.c ****                 {
 3005              		.loc 1 1254 17 view .LVU853
1254:./FreeRTOS/tasks.c ****                 {
 3006              		.loc 1 1254 19 is_stmt 0 view .LVU854
 3007 002e A242     		cmp	r2, r4
 3008 0030 01D8     		bhi	.L208
1254:./FreeRTOS/tasks.c ****                 {
 3009              		.loc 1 1254 59 discriminator 1 view .LVU855
 3010 0032 A042     		cmp	r0, r4
 3011 0034 14D2     		bcs	.L209
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 166


 3012              	.L208:
1256:./FreeRTOS/tasks.c ****                 }
 3013              		.loc 1 1256 21 is_stmt 1 view .LVU856
 3014              	.LVL220:
1265:./FreeRTOS/tasks.c **** 
 3015              		.loc 1 1265 13 view .LVU857
1265:./FreeRTOS/tasks.c **** 
 3016              		.loc 1 1265 33 is_stmt 0 view .LVU858
 3017 0036 2C60     		str	r4, [r5]
1267:./FreeRTOS/tasks.c ****             {
 3018              		.loc 1 1267 13 is_stmt 1 view .LVU859
 3019              	.L207:
1269:./FreeRTOS/tasks.c **** 
 3020              		.loc 1 1269 53 view .LVU860
1273:./FreeRTOS/tasks.c ****             }
 3021              		.loc 1 1273 17 view .LVU861
 3022 0038 0021     		movs	r1, #0
 3023 003a 201A     		subs	r0, r4, r0
 3024              	.LVL221:
1273:./FreeRTOS/tasks.c ****             }
 3025              		.loc 1 1273 17 is_stmt 0 view .LVU862
 3026 003c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3027              	.LVL222:
 3028 0040 0124     		movs	r4, #1
 3029              	.LVL223:
 3030              	.L205:
1277:./FreeRTOS/tasks.c ****             }
 3031              		.loc 1 1277 41 is_stmt 1 view .LVU863
 3032              	.LBE73:
1280:./FreeRTOS/tasks.c **** 
 3033              		.loc 1 1280 9 view .LVU864
1280:./FreeRTOS/tasks.c **** 
 3034              		.loc 1 1280 27 is_stmt 0 view .LVU865
 3035 0042 FFF7FEFF 		bl	xTaskResumeAll
 3036              	.LVL224:
1284:./FreeRTOS/tasks.c ****         {
 3037              		.loc 1 1284 9 is_stmt 1 view .LVU866
1284:./FreeRTOS/tasks.c ****         {
 3038              		.loc 1 1284 11 is_stmt 0 view .LVU867
 3039 0046 48B9     		cbnz	r0, .L202
1286:./FreeRTOS/tasks.c ****         }
 3040              		.loc 1 1286 13 is_stmt 1 view .LVU868
 3041 0048 4FF0E023 		mov	r3, #-536813568
 3042 004c 4FF08052 		mov	r2, #268435456
 3043 0050 C3F8042D 		str	r2, [r3, #3332]
1286:./FreeRTOS/tasks.c ****         }
 3044              		.loc 1 1286 13 view .LVU869
 3045              		.syntax unified
 3046              	@ 1286 "./FreeRTOS/tasks.c" 1
 3047 0054 BFF34F8F 		dsb
 3048              	@ 0 "" 2
1286:./FreeRTOS/tasks.c ****         }
 3049              		.loc 1 1286 13 view .LVU870
 3050              	@ 1286 "./FreeRTOS/tasks.c" 1
 3051 0058 BFF36F8F 		isb
 3052              	@ 0 "" 2
1286:./FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 167


 3053              		.loc 1 1286 35 view .LVU871
1290:./FreeRTOS/tasks.c ****         }
 3054              		.loc 1 1290 37 view .LVU872
1293:./FreeRTOS/tasks.c ****     }
 3055              		.loc 1 1293 9 view .LVU873
 3056              		.thumb
 3057              		.syntax unified
 3058              	.L202:
1294:./FreeRTOS/tasks.c **** 
 3059              		.loc 1 1294 5 is_stmt 0 view .LVU874
 3060 005c 2046     		mov	r0, r4
 3061              	.LVL225:
1294:./FreeRTOS/tasks.c **** 
 3062              		.loc 1 1294 5 view .LVU875
 3063 005e 38BD     		pop	{r3, r4, r5, pc}
 3064              	.LVL226:
 3065              	.L209:
 3066              	.LBB74:
1265:./FreeRTOS/tasks.c **** 
 3067              		.loc 1 1265 13 is_stmt 1 view .LVU876
1265:./FreeRTOS/tasks.c **** 
 3068              		.loc 1 1265 33 is_stmt 0 view .LVU877
 3069 0060 2C60     		str	r4, [r5]
1267:./FreeRTOS/tasks.c ****             {
 3070              		.loc 1 1267 13 is_stmt 1 view .LVU878
 3071              	.LBE74:
1218:./FreeRTOS/tasks.c **** 
 3072              		.loc 1 1218 37 is_stmt 0 view .LVU879
 3073 0062 0024     		movs	r4, #0
 3074              	.LVL227:
1218:./FreeRTOS/tasks.c **** 
 3075              		.loc 1 1218 37 view .LVU880
 3076 0064 EDE7     		b	.L205
 3077              	.L213:
 3078 0066 00BF     		.align	2
 3079              	.L212:
 3080 0068 00000000 		.word	xTickCount
 3081              		.cfi_endproc
 3082              	.LFE38:
 3084              		.section	.text.vTaskDelay,"ax",%progbits
 3085              		.align	1
 3086              		.global	vTaskDelay
 3087              		.syntax unified
 3088              		.thumb
 3089              		.thumb_func
 3091              	vTaskDelay:
 3092              	.LVL228:
 3093              	.LFB39:
1302:./FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 3094              		.loc 1 1302 5 is_stmt 1 view -0
 3095              		.cfi_startproc
 3096              		@ args = 0, pretend = 0, frame = 0
 3097              		@ frame_needed = 0, uses_anonymous_args = 0
1302:./FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 3098              		.loc 1 1302 5 is_stmt 0 view .LVU882
 3099 0000 10B5     		push	{r4, lr}
 3100              	.LCFI24:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 168


 3101              		.cfi_def_cfa_offset 8
 3102              		.cfi_offset 4, -8
 3103              		.cfi_offset 14, -4
1303:./FreeRTOS/tasks.c **** 
 3104              		.loc 1 1303 9 is_stmt 1 view .LVU883
 3105              	.LVL229:
1306:./FreeRTOS/tasks.c ****         {
 3106              		.loc 1 1306 9 view .LVU884
1306:./FreeRTOS/tasks.c ****         {
 3107              		.loc 1 1306 11 is_stmt 0 view .LVU885
 3108 0002 50B9     		cbnz	r0, .L218
 3109              	.LVL230:
 3110              	.L215:
1333:./FreeRTOS/tasks.c ****         }
 3111              		.loc 1 1333 13 is_stmt 1 view .LVU886
 3112 0004 4FF0E023 		mov	r3, #-536813568
 3113 0008 4FF08052 		mov	r2, #268435456
 3114 000c C3F8042D 		str	r2, [r3, #3332]
1333:./FreeRTOS/tasks.c ****         }
 3115              		.loc 1 1333 13 view .LVU887
 3116              		.syntax unified
 3117              	@ 1333 "./FreeRTOS/tasks.c" 1
 3118 0010 BFF34F8F 		dsb
 3119              	@ 0 "" 2
1333:./FreeRTOS/tasks.c ****         }
 3120              		.loc 1 1333 13 view .LVU888
 3121              	@ 1333 "./FreeRTOS/tasks.c" 1
 3122 0014 BFF36F8F 		isb
 3123              	@ 0 "" 2
1333:./FreeRTOS/tasks.c ****         }
 3124              		.loc 1 1333 35 view .LVU889
1337:./FreeRTOS/tasks.c ****         }
 3125              		.loc 1 1337 37 view .LVU890
 3126              		.thumb
 3127              		.syntax unified
 3128              	.L214:
1339:./FreeRTOS/tasks.c **** 
 3129              		.loc 1 1339 5 is_stmt 0 view .LVU891
 3130 0018 10BD     		pop	{r4, pc}
 3131              	.LVL231:
 3132              	.L218:
1339:./FreeRTOS/tasks.c **** 
 3133              		.loc 1 1339 5 view .LVU892
 3134 001a 0446     		mov	r4, r0
1308:./FreeRTOS/tasks.c ****             vTaskSuspendAll();
 3135              		.loc 1 1308 54 is_stmt 1 view .LVU893
1309:./FreeRTOS/tasks.c ****             {
 3136              		.loc 1 1309 13 view .LVU894
 3137 001c FFF7FEFF 		bl	vTaskSuspendAll
 3138              	.LVL232:
1311:./FreeRTOS/tasks.c **** 
 3139              		.loc 1 1311 34 view .LVU895
1320:./FreeRTOS/tasks.c ****             }
 3140              		.loc 1 1320 17 view .LVU896
 3141 0020 0021     		movs	r1, #0
 3142 0022 2046     		mov	r0, r4
 3143 0024 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 169


 3144              	.LVL233:
1322:./FreeRTOS/tasks.c ****         }
 3145              		.loc 1 1322 13 view .LVU897
1322:./FreeRTOS/tasks.c ****         }
 3146              		.loc 1 1322 31 is_stmt 0 view .LVU898
 3147 0028 FFF7FEFF 		bl	xTaskResumeAll
 3148              	.LVL234:
1326:./FreeRTOS/tasks.c ****         }
 3149              		.loc 1 1326 37 is_stmt 1 view .LVU899
1331:./FreeRTOS/tasks.c ****         {
 3150              		.loc 1 1331 9 view .LVU900
1331:./FreeRTOS/tasks.c ****         {
 3151              		.loc 1 1331 11 is_stmt 0 view .LVU901
 3152 002c 0028     		cmp	r0, #0
 3153 002e F3D1     		bne	.L214
1331:./FreeRTOS/tasks.c ****         {
 3154              		.loc 1 1331 11 view .LVU902
 3155 0030 E8E7     		b	.L215
 3156              		.cfi_endproc
 3157              	.LFE39:
 3159              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3160              		.align	1
 3161              		.global	xTaskCatchUpTicks
 3162              		.syntax unified
 3163              		.thumb
 3164              		.thumb_func
 3166              	xTaskCatchUpTicks:
 3167              	.LVL235:
 3168              	.LFB55:
2617:./FreeRTOS/tasks.c ****     BaseType_t xYieldOccurred;
 3169              		.loc 1 2617 1 is_stmt 1 view -0
 3170              		.cfi_startproc
 3171              		@ args = 0, pretend = 0, frame = 0
 3172              		@ frame_needed = 0, uses_anonymous_args = 0
2617:./FreeRTOS/tasks.c ****     BaseType_t xYieldOccurred;
 3173              		.loc 1 2617 1 is_stmt 0 view .LVU904
 3174 0000 10B5     		push	{r4, lr}
 3175              	.LCFI25:
 3176              		.cfi_def_cfa_offset 8
 3177              		.cfi_offset 4, -8
 3178              		.cfi_offset 14, -4
 3179 0002 0446     		mov	r4, r0
2618:./FreeRTOS/tasks.c **** 
 3180              		.loc 1 2618 5 is_stmt 1 view .LVU905
2622:./FreeRTOS/tasks.c **** 
 3181              		.loc 1 2622 46 view .LVU906
2626:./FreeRTOS/tasks.c **** 
 3182              		.loc 1 2626 5 view .LVU907
 3183 0004 FFF7FEFF 		bl	vTaskSuspendAll
 3184              	.LVL236:
2629:./FreeRTOS/tasks.c ****     {
 3185              		.loc 1 2629 5 view .LVU908
 3186 0008 FFF7FEFF 		bl	vPortEnterCritical
 3187              	.LVL237:
2631:./FreeRTOS/tasks.c ****     }
 3188              		.loc 1 2631 9 view .LVU909
2631:./FreeRTOS/tasks.c ****     }
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 170


 3189              		.loc 1 2631 22 is_stmt 0 view .LVU910
 3190 000c 044A     		ldr	r2, .L221
 3191 000e 1368     		ldr	r3, [r2]
 3192 0010 2344     		add	r3, r3, r4
 3193 0012 1360     		str	r3, [r2]
2633:./FreeRTOS/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 3194              		.loc 1 2633 5 is_stmt 1 view .LVU911
 3195 0014 FFF7FEFF 		bl	vPortExitCritical
 3196              	.LVL238:
2634:./FreeRTOS/tasks.c **** 
 3197              		.loc 1 2634 5 view .LVU912
2634:./FreeRTOS/tasks.c **** 
 3198              		.loc 1 2634 22 is_stmt 0 view .LVU913
 3199 0018 FFF7FEFF 		bl	xTaskResumeAll
 3200              	.LVL239:
2636:./FreeRTOS/tasks.c **** }
 3201              		.loc 1 2636 5 is_stmt 1 view .LVU914
2637:./FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 3202              		.loc 1 2637 1 is_stmt 0 view .LVU915
 3203 001c 10BD     		pop	{r4, pc}
 3204              	.LVL240:
 3205              	.L222:
2637:./FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 3206              		.loc 1 2637 1 view .LVU916
 3207 001e 00BF     		.align	2
 3208              	.L221:
 3209 0020 00000000 		.word	xPendedTicks
 3210              		.cfi_endproc
 3211              	.LFE55:
 3213              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3214              		.align	1
 3215              		.global	vTaskSwitchContext
 3216              		.syntax unified
 3217              		.thumb
 3218              		.thumb_func
 3220              	vTaskSwitchContext:
 3221              	.LFB57:
3010:./FreeRTOS/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3222              		.loc 1 3010 1 is_stmt 1 view -0
 3223              		.cfi_startproc
 3224              		@ args = 0, pretend = 0, frame = 0
 3225              		@ frame_needed = 0, uses_anonymous_args = 0
 3226              		@ link register save eliminated.
3011:./FreeRTOS/tasks.c ****     {
 3227              		.loc 1 3011 5 view .LVU918
3011:./FreeRTOS/tasks.c ****     {
 3228              		.loc 1 3011 30 is_stmt 0 view .LVU919
 3229 0000 184B     		ldr	r3, .L228
 3230 0002 1B68     		ldr	r3, [r3]
3011:./FreeRTOS/tasks.c ****     {
 3231              		.loc 1 3011 7 view .LVU920
 3232 0004 1BB1     		cbz	r3, .L224
3015:./FreeRTOS/tasks.c ****     }
 3233              		.loc 1 3015 9 is_stmt 1 view .LVU921
3015:./FreeRTOS/tasks.c ****     }
 3234              		.loc 1 3015 23 is_stmt 0 view .LVU922
 3235 0006 184B     		ldr	r3, .L228+4
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 171


 3236 0008 0122     		movs	r2, #1
 3237 000a 1A60     		str	r2, [r3]
 3238 000c 7047     		bx	lr
 3239              	.L224:
3019:./FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
 3240              		.loc 1 3019 9 is_stmt 1 view .LVU923
3019:./FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
 3241              		.loc 1 3019 23 is_stmt 0 view .LVU924
 3242 000e 164B     		ldr	r3, .L228+4
 3243 0010 0022     		movs	r2, #0
 3244 0012 1A60     		str	r2, [r3]
3020:./FreeRTOS/tasks.c **** 
 3245              		.loc 1 3020 33 is_stmt 1 view .LVU925
3051:./FreeRTOS/tasks.c **** 
 3246              		.loc 1 3051 39 view .LVU926
 3247              	.LBB75:
3062:./FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3248              		.loc 1 3062 9 view .LVU927
3062:./FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3249              		.loc 1 3062 9 view .LVU928
 3250 0014 154B     		ldr	r3, .L228+8
 3251 0016 1B68     		ldr	r3, [r3]
 3252              	.LVL241:
 3253              	.LBB76:
 3254              	.LBI76:
 136:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         {
 3255              		.loc 2 136 66 view .LVU929
 3256              	.LBB77:
 138:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 3257              		.loc 2 138 13 view .LVU930
 140:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 3258              		.loc 2 140 13 view .LVU931
 3259              		.syntax unified
 3260              	@ 140 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 3261 0018 B3FA83F3 		clz r3, r3
 3262              	@ 0 "" 2
 3263              	.LVL242:
 140:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 3264              		.loc 2 140 13 is_stmt 0 view .LVU932
 3265              		.thumb
 3266              		.syntax unified
 3267 001c DBB2     		uxtb	r3, r3
 3268              	.LVL243:
 142:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         }
 3269              		.loc 2 142 13 is_stmt 1 view .LVU933
 142:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         }
 3270              		.loc 2 142 13 is_stmt 0 view .LVU934
 3271              	.LBE77:
 3272              	.LBE76:
3062:./FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3273              		.loc 1 3062 9 view .LVU935
 3274 001e C3F11F03 		rsb	r3, r3, #31
 3275              	.LVL244:
3062:./FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3276              		.loc 1 3062 9 is_stmt 1 view .LVU936
 3277              	.LBB78:
3062:./FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 172


 3278              		.loc 1 3062 9 view .LVU937
3062:./FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3279              		.loc 1 3062 9 view .LVU938
 3280 0022 1348     		ldr	r0, .L228+12
 3281 0024 03EB8301 		add	r1, r3, r3, lsl #2
 3282 0028 8A00     		lsls	r2, r1, #2
 3283 002a 0244     		add	r2, r2, r0
 3284 002c 5168     		ldr	r1, [r2, #4]
 3285 002e 4968     		ldr	r1, [r1, #4]
 3286 0030 5160     		str	r1, [r2, #4]
3062:./FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3287              		.loc 1 3062 9 view .LVU939
 3288 0032 03EB830C 		add	ip, r3, r3, lsl #2
 3289 0036 4FEA8C02 		lsl	r2, ip, #2
 3290 003a 0832     		adds	r2, r2, #8
 3291 003c 0244     		add	r2, r2, r0
 3292 003e 9142     		cmp	r1, r2
 3293 0040 09D0     		beq	.L227
 3294              	.L226:
3062:./FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3295              		.loc 1 3062 9 discriminator 3 view .LVU940
 3296 0042 03EB8303 		add	r3, r3, r3, lsl #2
 3297              	.LVL245:
3062:./FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3298              		.loc 1 3062 9 is_stmt 0 discriminator 3 view .LVU941
 3299 0046 9A00     		lsls	r2, r3, #2
 3300 0048 094B     		ldr	r3, .L228+12
 3301 004a 1344     		add	r3, r3, r2
 3302 004c 5B68     		ldr	r3, [r3, #4]
 3303 004e DA68     		ldr	r2, [r3, #12]
 3304 0050 084B     		ldr	r3, .L228+16
 3305 0052 1A60     		str	r2, [r3]
 3306              	.LBE78:
3062:./FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3307              		.loc 1 3062 9 is_stmt 1 discriminator 3 view .LVU942
 3308              	.LBE75:
3062:./FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3309              		.loc 1 3062 43 discriminator 3 view .LVU943
3063:./FreeRTOS/tasks.c **** 
 3310              		.loc 1 3063 32 discriminator 3 view .LVU944
3080:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3311              		.loc 1 3080 1 is_stmt 0 discriminator 3 view .LVU945
 3312 0054 7047     		bx	lr
 3313              	.LVL246:
 3314              	.L227:
 3315              	.LBB80:
 3316              	.LBB79:
3062:./FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3317              		.loc 1 3062 9 is_stmt 1 discriminator 1 view .LVU946
 3318 0056 4868     		ldr	r0, [r1, #4]
 3319 0058 6246     		mov	r2, ip
 3320 005a 9100     		lsls	r1, r2, #2
 3321 005c 044A     		ldr	r2, .L228+12
 3322 005e 0A44     		add	r2, r2, r1
 3323 0060 5060     		str	r0, [r2, #4]
 3324 0062 EEE7     		b	.L226
 3325              	.L229:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 173


 3326              		.align	2
 3327              	.L228:
 3328 0064 00000000 		.word	uxSchedulerSuspended
 3329 0068 00000000 		.word	xYieldPending
 3330 006c 00000000 		.word	uxTopReadyPriority
 3331 0070 00000000 		.word	pxReadyTasksLists
 3332 0074 00000000 		.word	pxCurrentTCB
 3333              	.LBE79:
 3334              	.LBE80:
 3335              		.cfi_endproc
 3336              	.LFE57:
 3338              		.section	.text.vTaskSuspend,"ax",%progbits
 3339              		.align	1
 3340              		.global	vTaskSuspend
 3341              		.syntax unified
 3342              		.thumb
 3343              		.thumb_func
 3345              	vTaskSuspend:
 3346              	.LVL247:
 3347              	.LFB43:
1674:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 3348              		.loc 1 1674 5 view -0
 3349              		.cfi_startproc
 3350              		@ args = 0, pretend = 0, frame = 0
 3351              		@ frame_needed = 0, uses_anonymous_args = 0
1674:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 3352              		.loc 1 1674 5 is_stmt 0 view .LVU948
 3353 0000 38B5     		push	{r3, r4, r5, lr}
 3354              	.LCFI26:
 3355              		.cfi_def_cfa_offset 16
 3356              		.cfi_offset 3, -16
 3357              		.cfi_offset 4, -12
 3358              		.cfi_offset 5, -8
 3359              		.cfi_offset 14, -4
 3360 0002 0446     		mov	r4, r0
1675:./FreeRTOS/tasks.c **** 
 3361              		.loc 1 1675 9 is_stmt 1 view .LVU949
1677:./FreeRTOS/tasks.c ****         {
 3362              		.loc 1 1677 9 view .LVU950
 3363 0004 FFF7FEFF 		bl	vPortEnterCritical
 3364              	.LVL248:
1681:./FreeRTOS/tasks.c **** 
 3365              		.loc 1 1681 13 view .LVU951
1681:./FreeRTOS/tasks.c **** 
 3366              		.loc 1 1681 21 is_stmt 0 view .LVU952
 3367 0008 54B3     		cbz	r4, .L242
 3368              	.LVL249:
 3369              	.L231:
1683:./FreeRTOS/tasks.c **** 
 3370              		.loc 1 1683 39 is_stmt 1 discriminator 4 view .LVU953
1687:./FreeRTOS/tasks.c ****             {
 3371              		.loc 1 1687 13 discriminator 4 view .LVU954
1687:./FreeRTOS/tasks.c ****             {
 3372              		.loc 1 1687 17 is_stmt 0 discriminator 4 view .LVU955
 3373 000a 251D     		adds	r5, r4, #4
 3374 000c 2846     		mov	r0, r5
 3375 000e FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 174


 3376              	.LVL250:
1687:./FreeRTOS/tasks.c ****             {
 3377              		.loc 1 1687 15 discriminator 4 view .LVU956
 3378 0012 70B9     		cbnz	r0, .L232
1689:./FreeRTOS/tasks.c ****             }
 3379              		.loc 1 1689 17 is_stmt 1 view .LVU957
 3380 0014 E26A     		ldr	r2, [r4, #44]
 3381 0016 02EB8203 		add	r3, r2, r2, lsl #2
 3382 001a 9B00     		lsls	r3, r3, #2
 3383 001c 2949     		ldr	r1, .L246
 3384 001e CB58     		ldr	r3, [r1, r3]
 3385 0020 3BB9     		cbnz	r3, .L232
1689:./FreeRTOS/tasks.c ****             }
 3386              		.loc 1 1689 17 discriminator 1 view .LVU958
 3387 0022 0123     		movs	r3, #1
 3388 0024 03FA02F2 		lsl	r2, r3, r2
 3389 0028 2749     		ldr	r1, .L246+4
 3390 002a 0B68     		ldr	r3, [r1]
 3391 002c 23EA0203 		bic	r3, r3, r2
 3392 0030 0B60     		str	r3, [r1]
 3393              	.L232:
1693:./FreeRTOS/tasks.c ****             }
 3394              		.loc 1 1693 41 view .LVU959
1697:./FreeRTOS/tasks.c ****             {
 3395              		.loc 1 1697 13 view .LVU960
1697:./FreeRTOS/tasks.c ****             {
 3396              		.loc 1 1697 17 is_stmt 0 view .LVU961
 3397 0032 A36A     		ldr	r3, [r4, #40]
1697:./FreeRTOS/tasks.c ****             {
 3398              		.loc 1 1697 15 view .LVU962
 3399 0034 1BB1     		cbz	r3, .L233
1699:./FreeRTOS/tasks.c ****             }
 3400              		.loc 1 1699 17 is_stmt 1 view .LVU963
1699:./FreeRTOS/tasks.c ****             }
 3401              		.loc 1 1699 26 is_stmt 0 view .LVU964
 3402 0036 04F11800 		add	r0, r4, #24
 3403 003a FFF7FEFF 		bl	uxListRemove
 3404              	.LVL251:
 3405              	.L233:
1703:./FreeRTOS/tasks.c ****             }
 3406              		.loc 1 1703 41 is_stmt 1 view .LVU965
1706:./FreeRTOS/tasks.c **** 
 3407              		.loc 1 1706 13 view .LVU966
 3408 003e 2946     		mov	r1, r5
 3409 0040 2248     		ldr	r0, .L246+8
 3410 0042 FFF7FEFF 		bl	vListInsertEnd
 3411              	.LVL252:
 3412              	.LBB81:
1710:./FreeRTOS/tasks.c **** 
 3413              		.loc 1 1710 17 view .LVU967
1712:./FreeRTOS/tasks.c ****                 {
 3414              		.loc 1 1712 17 view .LVU968
1712:./FreeRTOS/tasks.c ****                 {
 3415              		.loc 1 1712 24 is_stmt 0 view .LVU969
 3416 0046 0023     		movs	r3, #0
 3417              	.LVL253:
 3418              	.L234:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 175


1712:./FreeRTOS/tasks.c ****                 {
 3419              		.loc 1 1712 31 is_stmt 1 discriminator 1 view .LVU970
 3420 0048 002B     		cmp	r3, #0
 3421 004a 0CDD     		ble	.L236
 3422              	.LBE81:
1724:./FreeRTOS/tasks.c **** 
 3423              		.loc 1 1724 9 view .LVU971
 3424 004c FFF7FEFF 		bl	vPortExitCritical
 3425              	.LVL254:
1726:./FreeRTOS/tasks.c ****         {
 3426              		.loc 1 1726 9 view .LVU972
1726:./FreeRTOS/tasks.c ****         {
 3427              		.loc 1 1726 31 is_stmt 0 view .LVU973
 3428 0050 1F4B     		ldr	r3, .L246+12
 3429 0052 1B68     		ldr	r3, [r3]
1726:./FreeRTOS/tasks.c ****         {
 3430              		.loc 1 1726 11 view .LVU974
 3431 0054 A3B9     		cbnz	r3, .L243
 3432              	.L237:
1738:./FreeRTOS/tasks.c ****         }
 3433              		.loc 1 1738 37 is_stmt 1 view .LVU975
1741:./FreeRTOS/tasks.c ****         {
 3434              		.loc 1 1741 9 view .LVU976
1741:./FreeRTOS/tasks.c ****         {
 3435              		.loc 1 1741 19 is_stmt 0 view .LVU977
 3436 0056 1F4B     		ldr	r3, .L246+16
 3437 0058 1B68     		ldr	r3, [r3]
1741:./FreeRTOS/tasks.c ****         {
 3438              		.loc 1 1741 11 view .LVU978
 3439 005a A342     		cmp	r3, r4
 3440 005c 17D0     		beq	.L244
 3441              	.L230:
1772:./FreeRTOS/tasks.c **** 
 3442              		.loc 1 1772 5 view .LVU979
 3443 005e 38BD     		pop	{r3, r4, r5, pc}
 3444              	.LVL255:
 3445              	.L242:
1681:./FreeRTOS/tasks.c **** 
 3446              		.loc 1 1681 21 discriminator 1 view .LVU980
 3447 0060 1C4B     		ldr	r3, .L246+16
 3448 0062 1C68     		ldr	r4, [r3]
 3449              	.LVL256:
1681:./FreeRTOS/tasks.c **** 
 3450              		.loc 1 1681 21 discriminator 1 view .LVU981
 3451 0064 D1E7     		b	.L231
 3452              	.LVL257:
 3453              	.L236:
 3454              	.LBB82:
1714:./FreeRTOS/tasks.c ****                     {
 3455              		.loc 1 1714 21 is_stmt 1 view .LVU982
1714:./FreeRTOS/tasks.c ****                     {
 3456              		.loc 1 1714 45 is_stmt 0 view .LVU983
 3457 0066 E218     		adds	r2, r4, r3
 3458 0068 92F85020 		ldrb	r2, [r2, #80]	@ zero_extendqisi2
 3459 006c D2B2     		uxtb	r2, r2
1714:./FreeRTOS/tasks.c ****                     {
 3460              		.loc 1 1714 23 view .LVU984
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 176


 3461 006e 012A     		cmp	r2, #1
 3462 0070 01D0     		beq	.L245
 3463              	.L235:
1712:./FreeRTOS/tasks.c ****                 {
 3464              		.loc 1 1712 73 is_stmt 1 discriminator 2 view .LVU985
 3465 0072 0133     		adds	r3, r3, #1
 3466              	.LVL258:
1712:./FreeRTOS/tasks.c ****                 {
 3467              		.loc 1 1712 73 is_stmt 0 discriminator 2 view .LVU986
 3468 0074 E8E7     		b	.L234
 3469              	.L245:
1718:./FreeRTOS/tasks.c ****                     }
 3470              		.loc 1 1718 25 is_stmt 1 view .LVU987
1718:./FreeRTOS/tasks.c ****                     }
 3471              		.loc 1 1718 51 is_stmt 0 view .LVU988
 3472 0076 E218     		adds	r2, r4, r3
 3473 0078 0021     		movs	r1, #0
 3474 007a 82F85010 		strb	r1, [r2, #80]
 3475 007e F8E7     		b	.L235
 3476              	.LVL259:
 3477              	.L243:
1718:./FreeRTOS/tasks.c ****                     }
 3478              		.loc 1 1718 51 view .LVU989
 3479              	.LBE82:
1730:./FreeRTOS/tasks.c ****             {
 3480              		.loc 1 1730 13 is_stmt 1 view .LVU990
 3481 0080 FFF7FEFF 		bl	vPortEnterCritical
 3482              	.LVL260:
1732:./FreeRTOS/tasks.c ****             }
 3483              		.loc 1 1732 17 view .LVU991
 3484 0084 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3485              	.LVL261:
1734:./FreeRTOS/tasks.c ****         }
 3486              		.loc 1 1734 13 view .LVU992
 3487 0088 FFF7FEFF 		bl	vPortExitCritical
 3488              	.LVL262:
 3489 008c E3E7     		b	.L237
 3490              	.L244:
1743:./FreeRTOS/tasks.c ****             {
 3491              		.loc 1 1743 13 view .LVU993
1743:./FreeRTOS/tasks.c ****             {
 3492              		.loc 1 1743 35 is_stmt 0 view .LVU994
 3493 008e 104B     		ldr	r3, .L246+12
 3494 0090 1B68     		ldr	r3, [r3]
1743:./FreeRTOS/tasks.c ****             {
 3495              		.loc 1 1743 15 view .LVU995
 3496 0092 53B1     		cbz	r3, .L239
1746:./FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 3497              		.loc 1 1746 58 is_stmt 1 view .LVU996
1747:./FreeRTOS/tasks.c ****             }
 3498              		.loc 1 1747 17 view .LVU997
 3499 0094 4FF0E023 		mov	r3, #-536813568
 3500 0098 4FF08052 		mov	r2, #268435456
 3501 009c C3F8042D 		str	r2, [r3, #3332]
1747:./FreeRTOS/tasks.c ****             }
 3502              		.loc 1 1747 17 view .LVU998
 3503              		.syntax unified
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 177


 3504              	@ 1747 "./FreeRTOS/tasks.c" 1
 3505 00a0 BFF34F8F 		dsb
 3506              	@ 0 "" 2
1747:./FreeRTOS/tasks.c ****             }
 3507              		.loc 1 1747 17 view .LVU999
 3508              	@ 1747 "./FreeRTOS/tasks.c" 1
 3509 00a4 BFF36F8F 		isb
 3510              	@ 0 "" 2
1747:./FreeRTOS/tasks.c ****             }
 3511              		.loc 1 1747 39 view .LVU1000
 3512              		.thumb
 3513              		.syntax unified
 3514 00a8 D9E7     		b	.L230
 3515              	.L239:
1754:./FreeRTOS/tasks.c ****                 {
 3516              		.loc 1 1754 17 view .LVU1001
1754:./FreeRTOS/tasks.c ****                 {
 3517              		.loc 1 1754 21 is_stmt 0 view .LVU1002
 3518 00aa 084B     		ldr	r3, .L246+8
 3519 00ac 1A68     		ldr	r2, [r3]
1754:./FreeRTOS/tasks.c ****                 {
 3520              		.loc 1 1754 68 view .LVU1003
 3521 00ae 0A4B     		ldr	r3, .L246+20
 3522 00b0 1B68     		ldr	r3, [r3]
1754:./FreeRTOS/tasks.c ****                 {
 3523              		.loc 1 1754 19 view .LVU1004
 3524 00b2 9A42     		cmp	r2, r3
 3525 00b4 03D1     		bne	.L240
1760:./FreeRTOS/tasks.c ****                 }
 3526              		.loc 1 1760 21 is_stmt 1 view .LVU1005
1760:./FreeRTOS/tasks.c ****                 }
 3527              		.loc 1 1760 34 is_stmt 0 view .LVU1006
 3528 00b6 074B     		ldr	r3, .L246+16
 3529 00b8 0022     		movs	r2, #0
 3530 00ba 1A60     		str	r2, [r3]
 3531 00bc CFE7     		b	.L230
 3532              	.L240:
1764:./FreeRTOS/tasks.c ****                 }
 3533              		.loc 1 1764 21 is_stmt 1 view .LVU1007
 3534 00be FFF7FEFF 		bl	vTaskSwitchContext
 3535              	.LVL263:
1770:./FreeRTOS/tasks.c ****         }
 3536              		.loc 1 1770 37 view .LVU1008
1772:./FreeRTOS/tasks.c **** 
 3537              		.loc 1 1772 5 is_stmt 0 view .LVU1009
 3538 00c2 CCE7     		b	.L230
 3539              	.L247:
 3540              		.align	2
 3541              	.L246:
 3542 00c4 00000000 		.word	pxReadyTasksLists
 3543 00c8 00000000 		.word	uxTopReadyPriority
 3544 00cc 00000000 		.word	xSuspendedTaskList
 3545 00d0 00000000 		.word	xSchedulerRunning
 3546 00d4 00000000 		.word	pxCurrentTCB
 3547 00d8 00000000 		.word	uxCurrentNumberOfTasks
 3548              		.cfi_endproc
 3549              	.LFE43:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 178


 3551              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3552              		.align	1
 3553              		.global	vTaskPlaceOnEventList
 3554              		.syntax unified
 3555              		.thumb
 3556              		.thumb_func
 3558              	vTaskPlaceOnEventList:
 3559              	.LVL264:
 3560              	.LFB58:
3085:./FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 3561              		.loc 1 3085 1 is_stmt 1 view -0
 3562              		.cfi_startproc
 3563              		@ args = 0, pretend = 0, frame = 0
 3564              		@ frame_needed = 0, uses_anonymous_args = 0
3085:./FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 3565              		.loc 1 3085 1 is_stmt 0 view .LVU1011
 3566 0000 10B5     		push	{r4, lr}
 3567              	.LCFI27:
 3568              		.cfi_def_cfa_offset 8
 3569              		.cfi_offset 4, -8
 3570              		.cfi_offset 14, -4
 3571 0002 0C46     		mov	r4, r1
3086:./FreeRTOS/tasks.c **** 
 3572              		.loc 1 3086 32 is_stmt 1 view .LVU1012
3102:./FreeRTOS/tasks.c **** 
 3573              		.loc 1 3102 5 view .LVU1013
3102:./FreeRTOS/tasks.c **** 
 3574              		.loc 1 3102 46 is_stmt 0 view .LVU1014
 3575 0004 044B     		ldr	r3, .L250
 3576 0006 1968     		ldr	r1, [r3]
 3577              	.LVL265:
3102:./FreeRTOS/tasks.c **** 
 3578              		.loc 1 3102 5 view .LVU1015
 3579 0008 1831     		adds	r1, r1, #24
 3580 000a FFF7FEFF 		bl	vListInsert
 3581              	.LVL266:
3104:./FreeRTOS/tasks.c **** }
 3582              		.loc 1 3104 5 is_stmt 1 view .LVU1016
 3583 000e 0121     		movs	r1, #1
 3584 0010 2046     		mov	r0, r4
 3585 0012 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3586              	.LVL267:
3105:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3587              		.loc 1 3105 1 is_stmt 0 view .LVU1017
 3588 0016 10BD     		pop	{r4, pc}
 3589              	.LVL268:
 3590              	.L251:
3105:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3591              		.loc 1 3105 1 view .LVU1018
 3592              		.align	2
 3593              	.L250:
 3594 0018 00000000 		.word	pxCurrentTCB
 3595              		.cfi_endproc
 3596              	.LFE58:
 3598              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3599              		.align	1
 3600              		.global	vTaskPlaceOnUnorderedEventList
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 179


 3601              		.syntax unified
 3602              		.thumb
 3603              		.thumb_func
 3605              	vTaskPlaceOnUnorderedEventList:
 3606              	.LVL269:
 3607              	.LFB59:
3111:./FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 3608              		.loc 1 3111 1 is_stmt 1 view -0
 3609              		.cfi_startproc
 3610              		@ args = 0, pretend = 0, frame = 0
 3611              		@ frame_needed = 0, uses_anonymous_args = 0
3111:./FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 3612              		.loc 1 3111 1 is_stmt 0 view .LVU1020
 3613 0000 70B5     		push	{r4, r5, r6, lr}
 3614              	.LCFI28:
 3615              		.cfi_def_cfa_offset 16
 3616              		.cfi_offset 4, -16
 3617              		.cfi_offset 5, -12
 3618              		.cfi_offset 6, -8
 3619              		.cfi_offset 14, -4
 3620 0002 0346     		mov	r3, r0
3112:./FreeRTOS/tasks.c **** 
 3621              		.loc 1 3112 32 is_stmt 1 view .LVU1021
3116:./FreeRTOS/tasks.c **** 
 3622              		.loc 1 3116 46 view .LVU1022
3121:./FreeRTOS/tasks.c **** 
 3623              		.loc 1 3121 5 view .LVU1023
 3624 0004 0D4C     		ldr	r4, .L254
 3625 0006 2068     		ldr	r0, [r4]
 3626              	.LVL270:
3121:./FreeRTOS/tasks.c **** 
 3627              		.loc 1 3121 5 is_stmt 0 view .LVU1024
 3628 0008 41F00041 		orr	r1, r1, #-2147483648
 3629              	.LVL271:
3121:./FreeRTOS/tasks.c **** 
 3630              		.loc 1 3121 5 view .LVU1025
 3631 000c 8161     		str	r1, [r0, #24]
 3632              	.LBB83:
3128:./FreeRTOS/tasks.c **** 
 3633              		.loc 1 3128 5 is_stmt 1 view .LVU1026
 3634 000e 5968     		ldr	r1, [r3, #4]
 3635              	.LVL272:
3128:./FreeRTOS/tasks.c **** 
 3636              		.loc 1 3128 5 view .LVU1027
3128:./FreeRTOS/tasks.c **** 
 3637              		.loc 1 3128 5 view .LVU1028
3128:./FreeRTOS/tasks.c **** 
 3638              		.loc 1 3128 5 view .LVU1029
 3639 0010 2068     		ldr	r0, [r4]
 3640 0012 C161     		str	r1, [r0, #28]
3128:./FreeRTOS/tasks.c **** 
 3641              		.loc 1 3128 5 view .LVU1030
 3642 0014 2068     		ldr	r0, [r4]
 3643 0016 8E68     		ldr	r6, [r1, #8]
 3644 0018 0662     		str	r6, [r0, #32]
3128:./FreeRTOS/tasks.c **** 
 3645              		.loc 1 3128 5 view .LVU1031
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 180


 3646 001a 2568     		ldr	r5, [r4]
 3647 001c 1835     		adds	r5, r5, #24
 3648 001e 7560     		str	r5, [r6, #4]
3128:./FreeRTOS/tasks.c **** 
 3649              		.loc 1 3128 5 view .LVU1032
 3650 0020 2568     		ldr	r5, [r4]
 3651 0022 1835     		adds	r5, r5, #24
 3652 0024 8D60     		str	r5, [r1, #8]
3128:./FreeRTOS/tasks.c **** 
 3653              		.loc 1 3128 5 view .LVU1033
 3654 0026 2168     		ldr	r1, [r4]
 3655              	.LVL273:
3128:./FreeRTOS/tasks.c **** 
 3656              		.loc 1 3128 5 is_stmt 0 view .LVU1034
 3657 0028 8B62     		str	r3, [r1, #40]
3128:./FreeRTOS/tasks.c **** 
 3658              		.loc 1 3128 5 is_stmt 1 view .LVU1035
 3659 002a 1968     		ldr	r1, [r3]
 3660 002c 0131     		adds	r1, r1, #1
 3661 002e 1960     		str	r1, [r3]
 3662              	.LBE83:
3128:./FreeRTOS/tasks.c **** 
 3663              		.loc 1 3128 69 view .LVU1036
3130:./FreeRTOS/tasks.c **** }
 3664              		.loc 1 3130 5 view .LVU1037
 3665 0030 0121     		movs	r1, #1
 3666 0032 1046     		mov	r0, r2
 3667 0034 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3668              	.LVL274:
3131:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3669              		.loc 1 3131 1 is_stmt 0 view .LVU1038
 3670 0038 70BD     		pop	{r4, r5, r6, pc}
 3671              	.L255:
 3672 003a 00BF     		.align	2
 3673              	.L254:
 3674 003c 00000000 		.word	pxCurrentTCB
 3675              		.cfi_endproc
 3676              	.LFE59:
 3678              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3679              		.align	1
 3680              		.global	vTaskPlaceOnEventListRestricted
 3681              		.syntax unified
 3682              		.thumb
 3683              		.thumb_func
 3685              	vTaskPlaceOnEventListRestricted:
 3686              	.LVL275:
 3687              	.LFB60:
3139:./FreeRTOS/tasks.c ****         configASSERT( pxEventList );
 3688              		.loc 1 3139 5 is_stmt 1 view -0
 3689              		.cfi_startproc
 3690              		@ args = 0, pretend = 0, frame = 0
 3691              		@ frame_needed = 0, uses_anonymous_args = 0
3139:./FreeRTOS/tasks.c ****         configASSERT( pxEventList );
 3692              		.loc 1 3139 5 is_stmt 0 view .LVU1040
 3693 0000 70B5     		push	{r4, r5, r6, lr}
 3694              	.LCFI29:
 3695              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 181


 3696              		.cfi_offset 4, -16
 3697              		.cfi_offset 5, -12
 3698              		.cfi_offset 6, -8
 3699              		.cfi_offset 14, -4
 3700 0002 0346     		mov	r3, r0
 3701 0004 0846     		mov	r0, r1
 3702              	.LVL276:
3140:./FreeRTOS/tasks.c **** 
 3703              		.loc 1 3140 36 is_stmt 1 view .LVU1041
 3704              	.LBB84:
3152:./FreeRTOS/tasks.c **** 
 3705              		.loc 1 3152 9 view .LVU1042
 3706 0006 5968     		ldr	r1, [r3, #4]
 3707              	.LVL277:
3152:./FreeRTOS/tasks.c **** 
 3708              		.loc 1 3152 9 view .LVU1043
3152:./FreeRTOS/tasks.c **** 
 3709              		.loc 1 3152 9 view .LVU1044
3152:./FreeRTOS/tasks.c **** 
 3710              		.loc 1 3152 9 view .LVU1045
 3711 0008 0B4C     		ldr	r4, .L260
 3712 000a 2568     		ldr	r5, [r4]
 3713 000c E961     		str	r1, [r5, #28]
3152:./FreeRTOS/tasks.c **** 
 3714              		.loc 1 3152 9 view .LVU1046
 3715 000e 2568     		ldr	r5, [r4]
 3716 0010 8E68     		ldr	r6, [r1, #8]
 3717 0012 2E62     		str	r6, [r5, #32]
3152:./FreeRTOS/tasks.c **** 
 3718              		.loc 1 3152 9 view .LVU1047
 3719 0014 2568     		ldr	r5, [r4]
 3720 0016 1835     		adds	r5, r5, #24
 3721 0018 7560     		str	r5, [r6, #4]
3152:./FreeRTOS/tasks.c **** 
 3722              		.loc 1 3152 9 view .LVU1048
 3723 001a 2568     		ldr	r5, [r4]
 3724 001c 1835     		adds	r5, r5, #24
 3725 001e 8D60     		str	r5, [r1, #8]
3152:./FreeRTOS/tasks.c **** 
 3726              		.loc 1 3152 9 view .LVU1049
 3727 0020 2168     		ldr	r1, [r4]
 3728              	.LVL278:
3152:./FreeRTOS/tasks.c **** 
 3729              		.loc 1 3152 9 is_stmt 0 view .LVU1050
 3730 0022 8B62     		str	r3, [r1, #40]
3152:./FreeRTOS/tasks.c **** 
 3731              		.loc 1 3152 9 is_stmt 1 view .LVU1051
 3732 0024 1968     		ldr	r1, [r3]
 3733 0026 0131     		adds	r1, r1, #1
 3734 0028 1960     		str	r1, [r3]
 3735              	.LBE84:
3152:./FreeRTOS/tasks.c **** 
 3736              		.loc 1 3152 73 view .LVU1052
3157:./FreeRTOS/tasks.c ****         {
 3737              		.loc 1 3157 9 view .LVU1053
3157:./FreeRTOS/tasks.c ****         {
 3738              		.loc 1 3157 11 is_stmt 0 view .LVU1054
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 182


 3739 002a 1146     		mov	r1, r2
 3740 002c 0AB1     		cbz	r2, .L257
3159:./FreeRTOS/tasks.c ****         }
 3741              		.loc 1 3159 26 view .LVU1055
 3742 002e 4FF0FF30 		mov	r0, #-1
 3743              	.LVL279:
 3744              	.L257:
3162:./FreeRTOS/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 3745              		.loc 1 3162 63 is_stmt 1 view .LVU1056
3163:./FreeRTOS/tasks.c ****     }
 3746              		.loc 1 3163 9 view .LVU1057
 3747 0032 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3748              	.LVL280:
3164:./FreeRTOS/tasks.c **** 
 3749              		.loc 1 3164 5 is_stmt 0 view .LVU1058
 3750 0036 70BD     		pop	{r4, r5, r6, pc}
 3751              	.L261:
 3752              		.align	2
 3753              	.L260:
 3754 0038 00000000 		.word	pxCurrentTCB
 3755              		.cfi_endproc
 3756              	.LFE60:
 3758              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3759              		.align	1
 3760              		.global	xTaskRemoveFromEventList
 3761              		.syntax unified
 3762              		.thumb
 3763              		.thumb_func
 3765              	xTaskRemoveFromEventList:
 3766              	.LVL281:
 3767              	.LFB61:
3170:./FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 3768              		.loc 1 3170 1 is_stmt 1 view -0
 3769              		.cfi_startproc
 3770              		@ args = 0, pretend = 0, frame = 0
 3771              		@ frame_needed = 0, uses_anonymous_args = 0
 3772              		@ link register save eliminated.
3170:./FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 3773              		.loc 1 3170 1 is_stmt 0 view .LVU1060
 3774 0000 30B4     		push	{r4, r5}
 3775              	.LCFI30:
 3776              		.cfi_def_cfa_offset 8
 3777              		.cfi_offset 4, -8
 3778              		.cfi_offset 5, -4
3171:./FreeRTOS/tasks.c ****     BaseType_t xReturn;
 3779              		.loc 1 3171 5 is_stmt 1 view .LVU1061
3172:./FreeRTOS/tasks.c **** 
 3780              		.loc 1 3172 5 view .LVU1062
3187:./FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 3781              		.loc 1 3187 5 view .LVU1063
3187:./FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 3782              		.loc 1 3187 22 is_stmt 0 view .LVU1064
 3783 0002 C368     		ldr	r3, [r0, #12]
3187:./FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 3784              		.loc 1 3187 20 view .LVU1065
 3785 0004 DB68     		ldr	r3, [r3, #12]
 3786              	.LVL282:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 183


3188:./FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 3787              		.loc 1 3188 35 is_stmt 1 view .LVU1066
 3788              	.LBB85:
3189:./FreeRTOS/tasks.c **** 
 3789              		.loc 1 3189 5 view .LVU1067
 3790 0006 9A6A     		ldr	r2, [r3, #40]
 3791              	.LVL283:
3189:./FreeRTOS/tasks.c **** 
 3792              		.loc 1 3189 5 view .LVU1068
 3793 0008 D869     		ldr	r0, [r3, #28]
 3794              	.LVL284:
3189:./FreeRTOS/tasks.c **** 
 3795              		.loc 1 3189 5 is_stmt 0 view .LVU1069
 3796 000a 196A     		ldr	r1, [r3, #32]
 3797 000c 8160     		str	r1, [r0, #8]
3189:./FreeRTOS/tasks.c **** 
 3798              		.loc 1 3189 5 is_stmt 1 view .LVU1070
 3799 000e D869     		ldr	r0, [r3, #28]
 3800 0010 4860     		str	r0, [r1, #4]
3189:./FreeRTOS/tasks.c **** 
 3801              		.loc 1 3189 5 view .LVU1071
 3802 0012 5168     		ldr	r1, [r2, #4]
 3803 0014 03F11800 		add	r0, r3, #24
 3804 0018 8142     		cmp	r1, r0
 3805 001a 3ED0     		beq	.L270
 3806              	.L263:
3189:./FreeRTOS/tasks.c **** 
 3807              		.loc 1 3189 5 discriminator 3 view .LVU1072
 3808 001c 0021     		movs	r1, #0
 3809 001e 9962     		str	r1, [r3, #40]
3189:./FreeRTOS/tasks.c **** 
 3810              		.loc 1 3189 5 discriminator 3 view .LVU1073
 3811 0020 1168     		ldr	r1, [r2]
 3812 0022 0139     		subs	r1, r1, #1
 3813 0024 1160     		str	r1, [r2]
 3814              	.LBE85:
3189:./FreeRTOS/tasks.c **** 
 3815              		.loc 1 3189 59 discriminator 3 view .LVU1074
3191:./FreeRTOS/tasks.c ****     {
 3816              		.loc 1 3191 5 discriminator 3 view .LVU1075
3191:./FreeRTOS/tasks.c ****     {
 3817              		.loc 1 3191 30 is_stmt 0 discriminator 3 view .LVU1076
 3818 0026 274A     		ldr	r2, .L272
 3819              	.LVL285:
3191:./FreeRTOS/tasks.c ****     {
 3820              		.loc 1 3191 30 discriminator 3 view .LVU1077
 3821 0028 1268     		ldr	r2, [r2]
3191:./FreeRTOS/tasks.c ****     {
 3822              		.loc 1 3191 7 discriminator 3 view .LVU1078
 3823 002a 002A     		cmp	r2, #0
 3824 002c 3BD1     		bne	.L264
 3825              	.LBB86:
3193:./FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3826              		.loc 1 3193 9 is_stmt 1 view .LVU1079
 3827 002e 5A69     		ldr	r2, [r3, #20]
 3828              	.LVL286:
3193:./FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 184


 3829              		.loc 1 3193 9 view .LVU1080
 3830 0030 9868     		ldr	r0, [r3, #8]
 3831 0032 D968     		ldr	r1, [r3, #12]
 3832 0034 8160     		str	r1, [r0, #8]
3193:./FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3833              		.loc 1 3193 9 view .LVU1081
 3834 0036 9868     		ldr	r0, [r3, #8]
 3835 0038 4860     		str	r0, [r1, #4]
3193:./FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3836              		.loc 1 3193 9 view .LVU1082
 3837 003a 5168     		ldr	r1, [r2, #4]
 3838 003c 181D     		adds	r0, r3, #4
 3839 003e 8142     		cmp	r1, r0
 3840 0040 2ED0     		beq	.L271
 3841              	.L265:
3193:./FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3842              		.loc 1 3193 9 discriminator 3 view .LVU1083
 3843 0042 0021     		movs	r1, #0
 3844 0044 5961     		str	r1, [r3, #20]
3193:./FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3845              		.loc 1 3193 9 discriminator 3 view .LVU1084
 3846 0046 1168     		ldr	r1, [r2]
 3847 0048 0139     		subs	r1, r1, #1
 3848 004a 1160     		str	r1, [r2]
 3849              	.LBE86:
3193:./FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3850              		.loc 1 3193 63 discriminator 3 view .LVU1085
3194:./FreeRTOS/tasks.c **** 
 3851              		.loc 1 3194 9 discriminator 3 view .LVU1086
3194:./FreeRTOS/tasks.c **** 
 3852              		.loc 1 3194 9 discriminator 3 view .LVU1087
 3853 004c DA6A     		ldr	r2, [r3, #44]
 3854              	.LVL287:
3194:./FreeRTOS/tasks.c **** 
 3855              		.loc 1 3194 9 is_stmt 0 discriminator 3 view .LVU1088
 3856 004e 0121     		movs	r1, #1
 3857 0050 9140     		lsls	r1, r1, r2
 3858 0052 1D4C     		ldr	r4, .L272+4
 3859 0054 2568     		ldr	r5, [r4]
 3860 0056 2943     		orrs	r1, r1, r5
 3861 0058 2160     		str	r1, [r4]
 3862              	.LBB87:
3194:./FreeRTOS/tasks.c **** 
 3863              		.loc 1 3194 9 is_stmt 1 discriminator 3 view .LVU1089
 3864 005a 1C49     		ldr	r1, .L272+8
 3865 005c 02EB8202 		add	r2, r2, r2, lsl #2
 3866 0060 01EB8202 		add	r2, r1, r2, lsl #2
 3867 0064 5268     		ldr	r2, [r2, #4]
 3868              	.LVL288:
3194:./FreeRTOS/tasks.c **** 
 3869              		.loc 1 3194 9 discriminator 3 view .LVU1090
3194:./FreeRTOS/tasks.c **** 
 3870              		.loc 1 3194 9 discriminator 3 view .LVU1091
3194:./FreeRTOS/tasks.c **** 
 3871              		.loc 1 3194 9 discriminator 3 view .LVU1092
 3872 0066 9A60     		str	r2, [r3, #8]
3194:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 185


 3873              		.loc 1 3194 9 discriminator 3 view .LVU1093
 3874 0068 9468     		ldr	r4, [r2, #8]
 3875 006a DC60     		str	r4, [r3, #12]
3194:./FreeRTOS/tasks.c **** 
 3876              		.loc 1 3194 9 discriminator 3 view .LVU1094
 3877 006c 6060     		str	r0, [r4, #4]
3194:./FreeRTOS/tasks.c **** 
 3878              		.loc 1 3194 9 discriminator 3 view .LVU1095
 3879 006e 9060     		str	r0, [r2, #8]
3194:./FreeRTOS/tasks.c **** 
 3880              		.loc 1 3194 9 discriminator 3 view .LVU1096
 3881 0070 DA6A     		ldr	r2, [r3, #44]
 3882              	.LVL289:
3194:./FreeRTOS/tasks.c **** 
 3883              		.loc 1 3194 9 is_stmt 0 discriminator 3 view .LVU1097
 3884 0072 02EB8200 		add	r0, r2, r2, lsl #2
 3885 0076 8400     		lsls	r4, r0, #2
 3886 0078 01EB8000 		add	r0, r1, r0, lsl #2
 3887 007c 5861     		str	r0, [r3, #20]
3194:./FreeRTOS/tasks.c **** 
 3888              		.loc 1 3194 9 is_stmt 1 discriminator 3 view .LVU1098
 3889 007e 0859     		ldr	r0, [r1, r4]
 3890 0080 0130     		adds	r0, r0, #1
 3891 0082 0851     		str	r0, [r1, r4]
 3892              	.LBE87:
3194:./FreeRTOS/tasks.c **** 
 3893              		.loc 1 3194 9 discriminator 3 view .LVU1099
3194:./FreeRTOS/tasks.c **** 
 3894              		.loc 1 3194 48 discriminator 3 view .LVU1100
 3895              	.LVL290:
 3896              	.L266:
3214:./FreeRTOS/tasks.c ****     }
 3897              		.loc 1 3214 86 discriminator 1 view .LVU1101
3217:./FreeRTOS/tasks.c ****     {
 3898              		.loc 1 3217 5 discriminator 1 view .LVU1102
3217:./FreeRTOS/tasks.c ****     {
 3899              		.loc 1 3217 23 is_stmt 0 discriminator 1 view .LVU1103
 3900 0084 DA6A     		ldr	r2, [r3, #44]
3217:./FreeRTOS/tasks.c ****     {
 3901              		.loc 1 3217 50 discriminator 1 view .LVU1104
 3902 0086 124B     		ldr	r3, .L272+12
 3903              	.LVL291:
3217:./FreeRTOS/tasks.c ****     {
 3904              		.loc 1 3217 50 discriminator 1 view .LVU1105
 3905 0088 1B68     		ldr	r3, [r3]
 3906 008a DB6A     		ldr	r3, [r3, #44]
3217:./FreeRTOS/tasks.c ****     {
 3907              		.loc 1 3217 7 discriminator 1 view .LVU1106
 3908 008c 9A42     		cmp	r2, r3
 3909 008e 16D9     		bls	.L268
3222:./FreeRTOS/tasks.c **** 
 3910              		.loc 1 3222 9 is_stmt 1 view .LVU1107
 3911              	.LVL292:
3226:./FreeRTOS/tasks.c ****     }
 3912              		.loc 1 3226 9 view .LVU1108
3226:./FreeRTOS/tasks.c ****     }
 3913              		.loc 1 3226 23 is_stmt 0 view .LVU1109
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 186


 3914 0090 0120     		movs	r0, #1
 3915 0092 104B     		ldr	r3, .L272+16
 3916 0094 1860     		str	r0, [r3]
 3917              	.LVL293:
 3918              	.L262:
3234:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3919              		.loc 1 3234 1 view .LVU1110
 3920 0096 30BC     		pop	{r4, r5}
 3921              	.LCFI31:
 3922              		.cfi_remember_state
 3923              		.cfi_restore 5
 3924              		.cfi_restore 4
 3925              		.cfi_def_cfa_offset 0
 3926 0098 7047     		bx	lr
 3927              	.LVL294:
 3928              	.L270:
 3929              	.LCFI32:
 3930              		.cfi_restore_state
 3931              	.LBB88:
3189:./FreeRTOS/tasks.c **** 
 3932              		.loc 1 3189 5 is_stmt 1 discriminator 1 view .LVU1111
 3933 009a 196A     		ldr	r1, [r3, #32]
 3934 009c 5160     		str	r1, [r2, #4]
 3935 009e BDE7     		b	.L263
 3936              	.LVL295:
 3937              	.L271:
3189:./FreeRTOS/tasks.c **** 
 3938              		.loc 1 3189 5 is_stmt 0 discriminator 1 view .LVU1112
 3939              	.LBE88:
 3940              	.LBB89:
3193:./FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3941              		.loc 1 3193 9 is_stmt 1 discriminator 1 view .LVU1113
 3942 00a0 D968     		ldr	r1, [r3, #12]
 3943 00a2 5160     		str	r1, [r2, #4]
 3944 00a4 CDE7     		b	.L265
 3945              	.LVL296:
 3946              	.L264:
3193:./FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3947              		.loc 1 3193 9 is_stmt 0 discriminator 1 view .LVU1114
 3948              	.LBE89:
 3949              	.LBB90:
3214:./FreeRTOS/tasks.c ****     }
 3950              		.loc 1 3214 9 is_stmt 1 view .LVU1115
 3951 00a6 0C4A     		ldr	r2, .L272+20
 3952 00a8 5168     		ldr	r1, [r2, #4]
 3953              	.LVL297:
3214:./FreeRTOS/tasks.c ****     }
 3954              		.loc 1 3214 9 view .LVU1116
3214:./FreeRTOS/tasks.c ****     }
 3955              		.loc 1 3214 9 view .LVU1117
3214:./FreeRTOS/tasks.c ****     }
 3956              		.loc 1 3214 9 view .LVU1118
 3957 00aa D961     		str	r1, [r3, #28]
3214:./FreeRTOS/tasks.c ****     }
 3958              		.loc 1 3214 9 view .LVU1119
 3959 00ac 8C68     		ldr	r4, [r1, #8]
 3960 00ae 1C62     		str	r4, [r3, #32]
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 187


3214:./FreeRTOS/tasks.c ****     }
 3961              		.loc 1 3214 9 view .LVU1120
 3962 00b0 6060     		str	r0, [r4, #4]
3214:./FreeRTOS/tasks.c ****     }
 3963              		.loc 1 3214 9 view .LVU1121
 3964 00b2 8860     		str	r0, [r1, #8]
3214:./FreeRTOS/tasks.c ****     }
 3965              		.loc 1 3214 9 view .LVU1122
 3966 00b4 9A62     		str	r2, [r3, #40]
3214:./FreeRTOS/tasks.c ****     }
 3967              		.loc 1 3214 9 view .LVU1123
 3968 00b6 1168     		ldr	r1, [r2]
 3969              	.LVL298:
3214:./FreeRTOS/tasks.c ****     }
 3970              		.loc 1 3214 9 is_stmt 0 view .LVU1124
 3971 00b8 0131     		adds	r1, r1, #1
 3972 00ba 1160     		str	r1, [r2]
 3973 00bc E2E7     		b	.L266
 3974              	.LVL299:
 3975              	.L268:
3214:./FreeRTOS/tasks.c ****     }
 3976              		.loc 1 3214 9 view .LVU1125
 3977              	.LBE90:
3230:./FreeRTOS/tasks.c ****     }
 3978              		.loc 1 3230 17 view .LVU1126
 3979 00be 0020     		movs	r0, #0
 3980              	.LVL300:
3233:./FreeRTOS/tasks.c **** }
 3981              		.loc 1 3233 5 is_stmt 1 view .LVU1127
3233:./FreeRTOS/tasks.c **** }
 3982              		.loc 1 3233 12 is_stmt 0 view .LVU1128
 3983 00c0 E9E7     		b	.L262
 3984              	.L273:
 3985 00c2 00BF     		.align	2
 3986              	.L272:
 3987 00c4 00000000 		.word	uxSchedulerSuspended
 3988 00c8 00000000 		.word	uxTopReadyPriority
 3989 00cc 00000000 		.word	pxReadyTasksLists
 3990 00d0 00000000 		.word	pxCurrentTCB
 3991 00d4 00000000 		.word	xYieldPending
 3992 00d8 00000000 		.word	xPendingReadyList
 3993              		.cfi_endproc
 3994              	.LFE61:
 3996              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3997              		.align	1
 3998              		.global	vTaskRemoveFromUnorderedEventList
 3999              		.syntax unified
 4000              		.thumb
 4001              		.thumb_func
 4003              	vTaskRemoveFromUnorderedEventList:
 4004              	.LVL301:
 4005              	.LFB62:
3239:./FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 4006              		.loc 1 3239 1 is_stmt 1 view -0
 4007              		.cfi_startproc
 4008              		@ args = 0, pretend = 0, frame = 0
 4009              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 188


 4010              		@ link register save eliminated.
3239:./FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 4011              		.loc 1 3239 1 is_stmt 0 view .LVU1130
 4012 0000 30B4     		push	{r4, r5}
 4013              	.LCFI33:
 4014              		.cfi_def_cfa_offset 8
 4015              		.cfi_offset 4, -8
 4016              		.cfi_offset 5, -4
3240:./FreeRTOS/tasks.c **** 
 4017              		.loc 1 3240 5 is_stmt 1 view .LVU1131
3244:./FreeRTOS/tasks.c **** 
 4018              		.loc 1 3244 52 view .LVU1132
3247:./FreeRTOS/tasks.c **** 
 4019              		.loc 1 3247 5 view .LVU1133
 4020 0002 41F00041 		orr	r1, r1, #-2147483648
 4021              	.LVL302:
3247:./FreeRTOS/tasks.c **** 
 4022              		.loc 1 3247 5 is_stmt 0 view .LVU1134
 4023 0006 0160     		str	r1, [r0]
3251:./FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4024              		.loc 1 3251 5 is_stmt 1 view .LVU1135
3251:./FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4025              		.loc 1 3251 20 is_stmt 0 view .LVU1136
 4026 0008 C368     		ldr	r3, [r0, #12]
 4027              	.LVL303:
3252:./FreeRTOS/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 4028              		.loc 1 3252 35 is_stmt 1 view .LVU1137
 4029              	.LBB91:
3253:./FreeRTOS/tasks.c **** 
 4030              		.loc 1 3253 5 view .LVU1138
 4031 000a 0269     		ldr	r2, [r0, #16]
 4032              	.LVL304:
3253:./FreeRTOS/tasks.c **** 
 4033              		.loc 1 3253 5 view .LVU1139
 4034 000c 4468     		ldr	r4, [r0, #4]
 4035 000e 8168     		ldr	r1, [r0, #8]
 4036 0010 A160     		str	r1, [r4, #8]
3253:./FreeRTOS/tasks.c **** 
 4037              		.loc 1 3253 5 view .LVU1140
 4038 0012 4468     		ldr	r4, [r0, #4]
 4039 0014 4C60     		str	r4, [r1, #4]
3253:./FreeRTOS/tasks.c **** 
 4040              		.loc 1 3253 5 view .LVU1141
 4041 0016 5168     		ldr	r1, [r2, #4]
 4042 0018 8142     		cmp	r1, r0
 4043 001a 3AD0     		beq	.L279
 4044              	.L275:
3253:./FreeRTOS/tasks.c **** 
 4045              		.loc 1 3253 5 discriminator 3 view .LVU1142
 4046 001c 0021     		movs	r1, #0
 4047 001e 0161     		str	r1, [r0, #16]
3253:./FreeRTOS/tasks.c **** 
 4048              		.loc 1 3253 5 discriminator 3 view .LVU1143
 4049 0020 1168     		ldr	r1, [r2]
 4050 0022 0139     		subs	r1, r1, #1
 4051 0024 1160     		str	r1, [r2]
 4052              	.LBE91:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 189


3253:./FreeRTOS/tasks.c **** 
 4053              		.loc 1 3253 39 discriminator 3 view .LVU1144
 4054              	.LBB92:
3272:./FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4055              		.loc 1 3272 5 discriminator 3 view .LVU1145
 4056 0026 5A69     		ldr	r2, [r3, #20]
 4057              	.LVL305:
3272:./FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4058              		.loc 1 3272 5 discriminator 3 view .LVU1146
 4059 0028 9868     		ldr	r0, [r3, #8]
 4060              	.LVL306:
3272:./FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4061              		.loc 1 3272 5 is_stmt 0 discriminator 3 view .LVU1147
 4062 002a D968     		ldr	r1, [r3, #12]
 4063 002c 8160     		str	r1, [r0, #8]
3272:./FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4064              		.loc 1 3272 5 is_stmt 1 discriminator 3 view .LVU1148
 4065 002e 9868     		ldr	r0, [r3, #8]
 4066 0030 4860     		str	r0, [r1, #4]
3272:./FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4067              		.loc 1 3272 5 discriminator 3 view .LVU1149
 4068 0032 5168     		ldr	r1, [r2, #4]
 4069 0034 181D     		adds	r0, r3, #4
 4070 0036 8142     		cmp	r1, r0
 4071 0038 2ED0     		beq	.L280
 4072              	.L276:
3272:./FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4073              		.loc 1 3272 5 discriminator 3 view .LVU1150
 4074 003a 0021     		movs	r1, #0
 4075 003c 5961     		str	r1, [r3, #20]
3272:./FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4076              		.loc 1 3272 5 discriminator 3 view .LVU1151
 4077 003e 1168     		ldr	r1, [r2]
 4078 0040 0139     		subs	r1, r1, #1
 4079 0042 1160     		str	r1, [r2]
 4080              	.LBE92:
3272:./FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4081              		.loc 1 3272 59 discriminator 3 view .LVU1152
3273:./FreeRTOS/tasks.c **** 
 4082              		.loc 1 3273 5 discriminator 3 view .LVU1153
3273:./FreeRTOS/tasks.c **** 
 4083              		.loc 1 3273 5 discriminator 3 view .LVU1154
 4084 0044 DA6A     		ldr	r2, [r3, #44]
 4085              	.LVL307:
3273:./FreeRTOS/tasks.c **** 
 4086              		.loc 1 3273 5 is_stmt 0 discriminator 3 view .LVU1155
 4087 0046 0121     		movs	r1, #1
 4088 0048 9140     		lsls	r1, r1, r2
 4089 004a 154C     		ldr	r4, .L281
 4090 004c 2568     		ldr	r5, [r4]
 4091 004e 2943     		orrs	r1, r1, r5
 4092 0050 2160     		str	r1, [r4]
 4093              	.LBB93:
3273:./FreeRTOS/tasks.c **** 
 4094              		.loc 1 3273 5 is_stmt 1 discriminator 3 view .LVU1156
 4095 0052 1449     		ldr	r1, .L281+4
 4096 0054 02EB8202 		add	r2, r2, r2, lsl #2
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 190


 4097 0058 01EB8202 		add	r2, r1, r2, lsl #2
 4098 005c 5268     		ldr	r2, [r2, #4]
 4099              	.LVL308:
3273:./FreeRTOS/tasks.c **** 
 4100              		.loc 1 3273 5 discriminator 3 view .LVU1157
3273:./FreeRTOS/tasks.c **** 
 4101              		.loc 1 3273 5 discriminator 3 view .LVU1158
3273:./FreeRTOS/tasks.c **** 
 4102              		.loc 1 3273 5 discriminator 3 view .LVU1159
 4103 005e 9A60     		str	r2, [r3, #8]
3273:./FreeRTOS/tasks.c **** 
 4104              		.loc 1 3273 5 discriminator 3 view .LVU1160
 4105 0060 9468     		ldr	r4, [r2, #8]
 4106 0062 DC60     		str	r4, [r3, #12]
3273:./FreeRTOS/tasks.c **** 
 4107              		.loc 1 3273 5 discriminator 3 view .LVU1161
 4108 0064 6060     		str	r0, [r4, #4]
3273:./FreeRTOS/tasks.c **** 
 4109              		.loc 1 3273 5 discriminator 3 view .LVU1162
 4110 0066 9060     		str	r0, [r2, #8]
3273:./FreeRTOS/tasks.c **** 
 4111              		.loc 1 3273 5 discriminator 3 view .LVU1163
 4112 0068 DA6A     		ldr	r2, [r3, #44]
 4113              	.LVL309:
3273:./FreeRTOS/tasks.c **** 
 4114              		.loc 1 3273 5 is_stmt 0 discriminator 3 view .LVU1164
 4115 006a 02EB8200 		add	r0, r2, r2, lsl #2
 4116 006e 8400     		lsls	r4, r0, #2
 4117 0070 01EB8000 		add	r0, r1, r0, lsl #2
 4118 0074 5861     		str	r0, [r3, #20]
3273:./FreeRTOS/tasks.c **** 
 4119              		.loc 1 3273 5 is_stmt 1 discriminator 3 view .LVU1165
 4120 0076 0859     		ldr	r0, [r1, r4]
 4121 0078 0130     		adds	r0, r0, #1
 4122 007a 0851     		str	r0, [r1, r4]
 4123              	.LBE93:
3273:./FreeRTOS/tasks.c **** 
 4124              		.loc 1 3273 5 discriminator 3 view .LVU1166
3273:./FreeRTOS/tasks.c **** 
 4125              		.loc 1 3273 44 discriminator 3 view .LVU1167
3275:./FreeRTOS/tasks.c ****     {
 4126              		.loc 1 3275 5 discriminator 3 view .LVU1168
3275:./FreeRTOS/tasks.c ****     {
 4127              		.loc 1 3275 23 is_stmt 0 discriminator 3 view .LVU1169
 4128 007c DA6A     		ldr	r2, [r3, #44]
3275:./FreeRTOS/tasks.c ****     {
 4129              		.loc 1 3275 50 discriminator 3 view .LVU1170
 4130 007e 0A4B     		ldr	r3, .L281+8
 4131              	.LVL310:
3275:./FreeRTOS/tasks.c ****     {
 4132              		.loc 1 3275 50 discriminator 3 view .LVU1171
 4133 0080 1B68     		ldr	r3, [r3]
 4134 0082 DB6A     		ldr	r3, [r3, #44]
3275:./FreeRTOS/tasks.c ****     {
 4135              		.loc 1 3275 7 discriminator 3 view .LVU1172
 4136 0084 9A42     		cmp	r2, r3
 4137 0086 02D9     		bls	.L274
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 191


3281:./FreeRTOS/tasks.c ****     }
 4138              		.loc 1 3281 9 is_stmt 1 view .LVU1173
3281:./FreeRTOS/tasks.c ****     }
 4139              		.loc 1 3281 23 is_stmt 0 view .LVU1174
 4140 0088 084B     		ldr	r3, .L281+12
 4141 008a 0122     		movs	r2, #1
 4142 008c 1A60     		str	r2, [r3]
 4143              	.L274:
3283:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4144              		.loc 1 3283 1 view .LVU1175
 4145 008e 30BC     		pop	{r4, r5}
 4146              	.LCFI34:
 4147              		.cfi_remember_state
 4148              		.cfi_restore 5
 4149              		.cfi_restore 4
 4150              		.cfi_def_cfa_offset 0
 4151 0090 7047     		bx	lr
 4152              	.LVL311:
 4153              	.L279:
 4154              	.LCFI35:
 4155              		.cfi_restore_state
 4156              	.LBB94:
3253:./FreeRTOS/tasks.c **** 
 4157              		.loc 1 3253 5 is_stmt 1 discriminator 1 view .LVU1176
 4158 0092 8168     		ldr	r1, [r0, #8]
 4159 0094 5160     		str	r1, [r2, #4]
 4160 0096 C1E7     		b	.L275
 4161              	.LVL312:
 4162              	.L280:
3253:./FreeRTOS/tasks.c **** 
 4163              		.loc 1 3253 5 is_stmt 0 discriminator 1 view .LVU1177
 4164              	.LBE94:
 4165              	.LBB95:
3272:./FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4166              		.loc 1 3272 5 is_stmt 1 discriminator 1 view .LVU1178
 4167 0098 D968     		ldr	r1, [r3, #12]
 4168 009a 5160     		str	r1, [r2, #4]
 4169 009c CDE7     		b	.L276
 4170              	.L282:
 4171 009e 00BF     		.align	2
 4172              	.L281:
 4173 00a0 00000000 		.word	uxTopReadyPriority
 4174 00a4 00000000 		.word	pxReadyTasksLists
 4175 00a8 00000000 		.word	pxCurrentTCB
 4176 00ac 00000000 		.word	xYieldPending
 4177              	.LBE95:
 4178              		.cfi_endproc
 4179              	.LFE62:
 4181              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4182              		.align	1
 4183              		.global	vTaskSetTimeOutState
 4184              		.syntax unified
 4185              		.thumb
 4186              		.thumb_func
 4188              	vTaskSetTimeOutState:
 4189              	.LVL313:
 4190              	.LFB63:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 192


3287:./FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
 4191              		.loc 1 3287 1 view -0
 4192              		.cfi_startproc
 4193              		@ args = 0, pretend = 0, frame = 0
 4194              		@ frame_needed = 0, uses_anonymous_args = 0
3287:./FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
 4195              		.loc 1 3287 1 is_stmt 0 view .LVU1180
 4196 0000 10B5     		push	{r4, lr}
 4197              	.LCFI36:
 4198              		.cfi_def_cfa_offset 8
 4199              		.cfi_offset 4, -8
 4200              		.cfi_offset 14, -4
 4201 0002 0446     		mov	r4, r0
3288:./FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 4202              		.loc 1 3288 30 is_stmt 1 view .LVU1181
3289:./FreeRTOS/tasks.c ****     {
 4203              		.loc 1 3289 5 view .LVU1182
 4204 0004 FFF7FEFF 		bl	vPortEnterCritical
 4205              	.LVL314:
3291:./FreeRTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4206              		.loc 1 3291 9 view .LVU1183
3291:./FreeRTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4207              		.loc 1 3291 35 is_stmt 0 view .LVU1184
 4208 0008 044B     		ldr	r3, .L285
 4209 000a 1B68     		ldr	r3, [r3]
 4210 000c 2360     		str	r3, [r4]
3292:./FreeRTOS/tasks.c ****     }
 4211              		.loc 1 3292 9 is_stmt 1 view .LVU1185
3292:./FreeRTOS/tasks.c ****     }
 4212              		.loc 1 3292 36 is_stmt 0 view .LVU1186
 4213 000e 044B     		ldr	r3, .L285+4
 4214 0010 1B68     		ldr	r3, [r3]
 4215 0012 6360     		str	r3, [r4, #4]
3294:./FreeRTOS/tasks.c **** }
 4216              		.loc 1 3294 5 is_stmt 1 view .LVU1187
 4217 0014 FFF7FEFF 		bl	vPortExitCritical
 4218              	.LVL315:
3295:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4219              		.loc 1 3295 1 is_stmt 0 view .LVU1188
 4220 0018 10BD     		pop	{r4, pc}
 4221              	.LVL316:
 4222              	.L286:
3295:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4223              		.loc 1 3295 1 view .LVU1189
 4224 001a 00BF     		.align	2
 4225              	.L285:
 4226 001c 00000000 		.word	xNumOfOverflows
 4227 0020 00000000 		.word	xTickCount
 4228              		.cfi_endproc
 4229              	.LFE63:
 4231              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4232              		.align	1
 4233              		.global	vTaskInternalSetTimeOutState
 4234              		.syntax unified
 4235              		.thumb
 4236              		.thumb_func
 4238              	vTaskInternalSetTimeOutState:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 193


 4239              	.LVL317:
 4240              	.LFB64:
3299:./FreeRTOS/tasks.c ****     /* For internal use only as it does not use a critical section. */
 4241              		.loc 1 3299 1 is_stmt 1 view -0
 4242              		.cfi_startproc
 4243              		@ args = 0, pretend = 0, frame = 0
 4244              		@ frame_needed = 0, uses_anonymous_args = 0
 4245              		@ link register save eliminated.
3301:./FreeRTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 4246              		.loc 1 3301 5 view .LVU1191
3301:./FreeRTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 4247              		.loc 1 3301 31 is_stmt 0 view .LVU1192
 4248 0000 034B     		ldr	r3, .L288
 4249 0002 1B68     		ldr	r3, [r3]
 4250 0004 0360     		str	r3, [r0]
3302:./FreeRTOS/tasks.c **** }
 4251              		.loc 1 3302 5 is_stmt 1 view .LVU1193
3302:./FreeRTOS/tasks.c **** }
 4252              		.loc 1 3302 32 is_stmt 0 view .LVU1194
 4253 0006 034B     		ldr	r3, .L288+4
 4254 0008 1B68     		ldr	r3, [r3]
 4255 000a 4360     		str	r3, [r0, #4]
3303:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4256              		.loc 1 3303 1 view .LVU1195
 4257 000c 7047     		bx	lr
 4258              	.L289:
 4259 000e 00BF     		.align	2
 4260              	.L288:
 4261 0010 00000000 		.word	xNumOfOverflows
 4262 0014 00000000 		.word	xTickCount
 4263              		.cfi_endproc
 4264              	.LFE64:
 4266              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4267              		.align	1
 4268              		.global	xTaskCheckForTimeOut
 4269              		.syntax unified
 4270              		.thumb
 4271              		.thumb_func
 4273              	xTaskCheckForTimeOut:
 4274              	.LVL318:
 4275              	.LFB65:
3308:./FreeRTOS/tasks.c ****     BaseType_t xReturn;
 4276              		.loc 1 3308 1 is_stmt 1 view -0
 4277              		.cfi_startproc
 4278              		@ args = 0, pretend = 0, frame = 0
 4279              		@ frame_needed = 0, uses_anonymous_args = 0
3308:./FreeRTOS/tasks.c ****     BaseType_t xReturn;
 4280              		.loc 1 3308 1 is_stmt 0 view .LVU1197
 4281 0000 70B5     		push	{r4, r5, r6, lr}
 4282              	.LCFI37:
 4283              		.cfi_def_cfa_offset 16
 4284              		.cfi_offset 4, -16
 4285              		.cfi_offset 5, -12
 4286              		.cfi_offset 6, -8
 4287              		.cfi_offset 14, -4
 4288 0002 0446     		mov	r4, r0
 4289 0004 0D46     		mov	r5, r1
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 194


3309:./FreeRTOS/tasks.c **** 
 4290              		.loc 1 3309 5 is_stmt 1 view .LVU1198
3311:./FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4291              		.loc 1 3311 30 view .LVU1199
3312:./FreeRTOS/tasks.c **** 
 4292              		.loc 1 3312 34 view .LVU1200
3314:./FreeRTOS/tasks.c ****     {
 4293              		.loc 1 3314 5 view .LVU1201
 4294 0006 FFF7FEFF 		bl	vPortEnterCritical
 4295              	.LVL319:
 4296              	.LBB96:
3317:./FreeRTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4297              		.loc 1 3317 9 view .LVU1202
3317:./FreeRTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4298              		.loc 1 3317 26 is_stmt 0 view .LVU1203
 4299 000a 134B     		ldr	r3, .L297
 4300 000c 1968     		ldr	r1, [r3]
 4301              	.LVL320:
3318:./FreeRTOS/tasks.c **** 
 4302              		.loc 1 3318 9 is_stmt 1 view .LVU1204
3318:./FreeRTOS/tasks.c **** 
 4303              		.loc 1 3318 68 is_stmt 0 view .LVU1205
 4304 000e 6368     		ldr	r3, [r4, #4]
3318:./FreeRTOS/tasks.c **** 
 4305              		.loc 1 3318 26 view .LVU1206
 4306 0010 C81A     		subs	r0, r1, r3
 4307              	.LVL321:
3332:./FreeRTOS/tasks.c ****             {
 4308              		.loc 1 3332 13 is_stmt 1 view .LVU1207
3332:./FreeRTOS/tasks.c ****             {
 4309              		.loc 1 3332 17 is_stmt 0 view .LVU1208
 4310 0012 2A68     		ldr	r2, [r5]
3332:./FreeRTOS/tasks.c ****             {
 4311              		.loc 1 3332 15 view .LVU1209
 4312 0014 B2F1FF3F 		cmp	r2, #-1
 4313 0018 19D0     		beq	.L294
3342:./FreeRTOS/tasks.c ****         {
 4314              		.loc 1 3342 9 is_stmt 1 view .LVU1210
3342:./FreeRTOS/tasks.c ****         {
 4315              		.loc 1 3342 31 is_stmt 0 view .LVU1211
 4316 001a 104E     		ldr	r6, .L297+4
 4317 001c 3668     		ldr	r6, [r6]
3342:./FreeRTOS/tasks.c ****         {
 4318              		.loc 1 3342 11 view .LVU1212
 4319 001e D4F800C0 		ldr	ip, [r4]
 4320 0022 B445     		cmp	ip, r6
 4321 0024 05D0     		beq	.L292
3342:./FreeRTOS/tasks.c ****         {
 4322              		.loc 1 3342 62 discriminator 1 view .LVU1213
 4323 0026 8B42     		cmp	r3, r1
 4324 0028 03D8     		bhi	.L292
3349:./FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 4325              		.loc 1 3349 13 is_stmt 1 view .LVU1214
 4326              	.LVL322:
3350:./FreeRTOS/tasks.c ****         }
 4327              		.loc 1 3350 13 view .LVU1215
3350:./FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 195


 4328              		.loc 1 3350 28 is_stmt 0 view .LVU1216
 4329 002a 0023     		movs	r3, #0
 4330 002c 2B60     		str	r3, [r5]
3349:./FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 4331              		.loc 1 3349 21 view .LVU1217
 4332 002e 0124     		movs	r4, #1
 4333              	.LVL323:
3350:./FreeRTOS/tasks.c ****         }
 4334              		.loc 1 3350 28 view .LVU1218
 4335 0030 0EE0     		b	.L291
 4336              	.LVL324:
 4337              	.L292:
3352:./FreeRTOS/tasks.c ****         {
 4338              		.loc 1 3352 14 is_stmt 1 view .LVU1219
3352:./FreeRTOS/tasks.c ****         {
 4339              		.loc 1 3352 16 is_stmt 0 view .LVU1220
 4340 0032 8242     		cmp	r2, r0
 4341 0034 03D8     		bhi	.L296
3361:./FreeRTOS/tasks.c ****             xReturn = pdTRUE;
 4342              		.loc 1 3361 13 is_stmt 1 view .LVU1221
3361:./FreeRTOS/tasks.c ****             xReturn = pdTRUE;
 4343              		.loc 1 3361 28 is_stmt 0 view .LVU1222
 4344 0036 0023     		movs	r3, #0
 4345 0038 2B60     		str	r3, [r5]
3362:./FreeRTOS/tasks.c ****         }
 4346              		.loc 1 3362 13 is_stmt 1 view .LVU1223
 4347              	.LVL325:
3362:./FreeRTOS/tasks.c ****         }
 4348              		.loc 1 3362 21 is_stmt 0 view .LVU1224
 4349 003a 0124     		movs	r4, #1
 4350              	.LVL326:
3362:./FreeRTOS/tasks.c ****         }
 4351              		.loc 1 3362 21 view .LVU1225
 4352 003c 08E0     		b	.L291
 4353              	.LVL327:
 4354              	.L296:
3355:./FreeRTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 4355              		.loc 1 3355 13 is_stmt 1 view .LVU1226
3355:./FreeRTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 4356              		.loc 1 3355 28 is_stmt 0 view .LVU1227
 4357 003e 5B1A     		subs	r3, r3, r1
 4358 0040 1344     		add	r3, r3, r2
 4359 0042 2B60     		str	r3, [r5]
3356:./FreeRTOS/tasks.c ****             xReturn = pdFALSE;
 4360              		.loc 1 3356 13 is_stmt 1 view .LVU1228
 4361 0044 2046     		mov	r0, r4
 4362              	.LVL328:
3356:./FreeRTOS/tasks.c ****             xReturn = pdFALSE;
 4363              		.loc 1 3356 13 is_stmt 0 view .LVU1229
 4364 0046 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 4365              	.LVL329:
3357:./FreeRTOS/tasks.c ****         }
 4366              		.loc 1 3357 13 is_stmt 1 view .LVU1230
3357:./FreeRTOS/tasks.c ****         }
 4367              		.loc 1 3357 21 is_stmt 0 view .LVU1231
 4368 004a 0024     		movs	r4, #0
 4369              	.LVL330:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 196


3357:./FreeRTOS/tasks.c ****         }
 4370              		.loc 1 3357 21 view .LVU1232
 4371 004c 00E0     		b	.L291
 4372              	.LVL331:
 4373              	.L294:
3337:./FreeRTOS/tasks.c ****             }
 4374              		.loc 1 3337 25 view .LVU1233
 4375 004e 0024     		movs	r4, #0
 4376              	.LVL332:
 4377              	.L291:
3337:./FreeRTOS/tasks.c ****             }
 4378              		.loc 1 3337 25 view .LVU1234
 4379              	.LBE96:
3365:./FreeRTOS/tasks.c **** 
 4380              		.loc 1 3365 5 is_stmt 1 view .LVU1235
 4381 0050 FFF7FEFF 		bl	vPortExitCritical
 4382              	.LVL333:
3367:./FreeRTOS/tasks.c **** }
 4383              		.loc 1 3367 5 view .LVU1236
3368:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4384              		.loc 1 3368 1 is_stmt 0 view .LVU1237
 4385 0054 2046     		mov	r0, r4
 4386 0056 70BD     		pop	{r4, r5, r6, pc}
 4387              	.LVL334:
 4388              	.L298:
3368:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4389              		.loc 1 3368 1 view .LVU1238
 4390              		.align	2
 4391              	.L297:
 4392 0058 00000000 		.word	xTickCount
 4393 005c 00000000 		.word	xNumOfOverflows
 4394              		.cfi_endproc
 4395              	.LFE65:
 4397              		.section	.text.vTaskMissedYield,"ax",%progbits
 4398              		.align	1
 4399              		.global	vTaskMissedYield
 4400              		.syntax unified
 4401              		.thumb
 4402              		.thumb_func
 4404              	vTaskMissedYield:
 4405              	.LFB66:
3372:./FreeRTOS/tasks.c ****     xYieldPending = pdTRUE;
 4406              		.loc 1 3372 1 is_stmt 1 view -0
 4407              		.cfi_startproc
 4408              		@ args = 0, pretend = 0, frame = 0
 4409              		@ frame_needed = 0, uses_anonymous_args = 0
 4410              		@ link register save eliminated.
3373:./FreeRTOS/tasks.c **** }
 4411              		.loc 1 3373 5 view .LVU1240
3373:./FreeRTOS/tasks.c **** }
 4412              		.loc 1 3373 19 is_stmt 0 view .LVU1241
 4413 0000 014B     		ldr	r3, .L300
 4414 0002 0122     		movs	r2, #1
 4415 0004 1A60     		str	r2, [r3]
3374:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4416              		.loc 1 3374 1 view .LVU1242
 4417 0006 7047     		bx	lr
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 197


 4418              	.L301:
 4419              		.align	2
 4420              	.L300:
 4421 0008 00000000 		.word	xYieldPending
 4422              		.cfi_endproc
 4423              	.LFE66:
 4425              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4426              		.align	1
 4427              		.global	xTaskGetCurrentTaskHandle
 4428              		.syntax unified
 4429              		.thumb
 4430              		.thumb_func
 4432              	xTaskGetCurrentTaskHandle:
 4433              	.LFB72:
4023:./FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
 4434              		.loc 1 4023 5 is_stmt 1 view -0
 4435              		.cfi_startproc
 4436              		@ args = 0, pretend = 0, frame = 0
 4437              		@ frame_needed = 0, uses_anonymous_args = 0
 4438              		@ link register save eliminated.
4024:./FreeRTOS/tasks.c **** 
 4439              		.loc 1 4024 9 view .LVU1244
4029:./FreeRTOS/tasks.c **** 
 4440              		.loc 1 4029 9 view .LVU1245
4029:./FreeRTOS/tasks.c **** 
 4441              		.loc 1 4029 17 is_stmt 0 view .LVU1246
 4442 0000 014B     		ldr	r3, .L303
 4443 0002 1868     		ldr	r0, [r3]
 4444              	.LVL335:
4031:./FreeRTOS/tasks.c ****     }
 4445              		.loc 1 4031 9 is_stmt 1 view .LVU1247
4032:./FreeRTOS/tasks.c **** 
 4446              		.loc 1 4032 5 is_stmt 0 view .LVU1248
 4447 0004 7047     		bx	lr
 4448              	.L304:
 4449 0006 00BF     		.align	2
 4450              	.L303:
 4451 0008 00000000 		.word	pxCurrentTCB
 4452              		.cfi_endproc
 4453              	.LFE72:
 4455              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4456              		.align	1
 4457              		.global	xTaskGetSchedulerState
 4458              		.syntax unified
 4459              		.thumb
 4460              		.thumb_func
 4462              	xTaskGetSchedulerState:
 4463              	.LFB73:
4040:./FreeRTOS/tasks.c ****         BaseType_t xReturn;
 4464              		.loc 1 4040 5 is_stmt 1 view -0
 4465              		.cfi_startproc
 4466              		@ args = 0, pretend = 0, frame = 0
 4467              		@ frame_needed = 0, uses_anonymous_args = 0
 4468              		@ link register save eliminated.
4041:./FreeRTOS/tasks.c **** 
 4469              		.loc 1 4041 9 view .LVU1250
4043:./FreeRTOS/tasks.c ****         {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 198


 4470              		.loc 1 4043 9 view .LVU1251
4043:./FreeRTOS/tasks.c ****         {
 4471              		.loc 1 4043 31 is_stmt 0 view .LVU1252
 4472 0000 054B     		ldr	r3, .L310
 4473 0002 1B68     		ldr	r3, [r3]
4043:./FreeRTOS/tasks.c ****         {
 4474              		.loc 1 4043 11 view .LVU1253
 4475 0004 33B1     		cbz	r3, .L307
4049:./FreeRTOS/tasks.c ****             {
 4476              		.loc 1 4049 13 is_stmt 1 view .LVU1254
4049:./FreeRTOS/tasks.c ****             {
 4477              		.loc 1 4049 38 is_stmt 0 view .LVU1255
 4478 0006 054B     		ldr	r3, .L310+4
 4479 0008 1B68     		ldr	r3, [r3]
4049:./FreeRTOS/tasks.c ****             {
 4480              		.loc 1 4049 15 view .LVU1256
 4481 000a 0BB1     		cbz	r3, .L309
4055:./FreeRTOS/tasks.c ****             }
 4482              		.loc 1 4055 25 view .LVU1257
 4483 000c 0020     		movs	r0, #0
 4484              	.LVL336:
4059:./FreeRTOS/tasks.c ****     }
 4485              		.loc 1 4059 9 is_stmt 1 view .LVU1258
4060:./FreeRTOS/tasks.c **** 
 4486              		.loc 1 4060 5 is_stmt 0 view .LVU1259
 4487 000e 7047     		bx	lr
 4488              	.LVL337:
 4489              	.L309:
4051:./FreeRTOS/tasks.c ****             }
 4490              		.loc 1 4051 25 view .LVU1260
 4491 0010 0220     		movs	r0, #2
 4492 0012 7047     		bx	lr
 4493              	.L307:
4045:./FreeRTOS/tasks.c ****         }
 4494              		.loc 1 4045 21 view .LVU1261
 4495 0014 0120     		movs	r0, #1
 4496 0016 7047     		bx	lr
 4497              	.L311:
 4498              		.align	2
 4499              	.L310:
 4500 0018 00000000 		.word	xSchedulerRunning
 4501 001c 00000000 		.word	uxSchedulerSuspended
 4502              		.cfi_endproc
 4503              	.LFE73:
 4505              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4506              		.align	1
 4507              		.global	xTaskPriorityInherit
 4508              		.syntax unified
 4509              		.thumb
 4510              		.thumb_func
 4512              	xTaskPriorityInherit:
 4513              	.LVL338:
 4514              	.LFB74:
4068:./FreeRTOS/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4515              		.loc 1 4068 5 is_stmt 1 view -0
 4516              		.cfi_startproc
 4517              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 199


 4518              		@ frame_needed = 0, uses_anonymous_args = 0
4069:./FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 4519              		.loc 1 4069 9 view .LVU1263
4070:./FreeRTOS/tasks.c **** 
 4520              		.loc 1 4070 9 view .LVU1264
4075:./FreeRTOS/tasks.c ****         {
 4521              		.loc 1 4075 9 view .LVU1265
4075:./FreeRTOS/tasks.c ****         {
 4522              		.loc 1 4075 11 is_stmt 0 view .LVU1266
 4523 0000 0028     		cmp	r0, #0
 4524 0002 54D0     		beq	.L318
4068:./FreeRTOS/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4525              		.loc 1 4068 5 view .LVU1267
 4526 0004 70B5     		push	{r4, r5, r6, lr}
 4527              	.LCFI38:
 4528              		.cfi_def_cfa_offset 16
 4529              		.cfi_offset 4, -16
 4530              		.cfi_offset 5, -12
 4531              		.cfi_offset 6, -8
 4532              		.cfi_offset 14, -4
 4533 0006 0446     		mov	r4, r0
4080:./FreeRTOS/tasks.c ****             {
 4534              		.loc 1 4080 13 is_stmt 1 view .LVU1268
4080:./FreeRTOS/tasks.c ****             {
 4535              		.loc 1 4080 33 is_stmt 0 view .LVU1269
 4536 0008 C36A     		ldr	r3, [r0, #44]
4080:./FreeRTOS/tasks.c ****             {
 4537              		.loc 1 4080 60 view .LVU1270
 4538 000a 2B4A     		ldr	r2, .L325
 4539 000c 1268     		ldr	r2, [r2]
 4540 000e D26A     		ldr	r2, [r2, #44]
4080:./FreeRTOS/tasks.c ****             {
 4541              		.loc 1 4080 15 view .LVU1271
 4542 0010 9342     		cmp	r3, r2
 4543 0012 44D2     		bcs	.L314
4085:./FreeRTOS/tasks.c ****                 {
 4544              		.loc 1 4085 17 is_stmt 1 view .LVU1272
4085:./FreeRTOS/tasks.c ****                 {
 4545              		.loc 1 4085 23 is_stmt 0 view .LVU1273
 4546 0014 8269     		ldr	r2, [r0, #24]
4085:./FreeRTOS/tasks.c ****                 {
 4547              		.loc 1 4085 19 view .LVU1274
 4548 0016 002A     		cmp	r2, #0
 4549 0018 05DB     		blt	.L315
4087:./FreeRTOS/tasks.c ****                 }
 4550              		.loc 1 4087 21 is_stmt 1 view .LVU1275
 4551 001a 274A     		ldr	r2, .L325
 4552 001c 1268     		ldr	r2, [r2]
 4553 001e D26A     		ldr	r2, [r2, #44]
 4554 0020 C2F12002 		rsb	r2, r2, #32
 4555 0024 8261     		str	r2, [r0, #24]
 4556              	.L315:
4091:./FreeRTOS/tasks.c ****                 }
 4557              		.loc 1 4091 45 view .LVU1276
4096:./FreeRTOS/tasks.c ****                 {
 4558              		.loc 1 4096 17 view .LVU1277
4096:./FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 200


 4559              		.loc 1 4096 21 is_stmt 0 view .LVU1278
 4560 0026 6169     		ldr	r1, [r4, #20]
 4561 0028 03EB8303 		add	r3, r3, r3, lsl #2
 4562 002c 234A     		ldr	r2, .L325+4
 4563 002e 02EB8303 		add	r3, r2, r3, lsl #2
4096:./FreeRTOS/tasks.c ****                 {
 4564              		.loc 1 4096 19 view .LVU1279
 4565 0032 9942     		cmp	r1, r3
 4566 0034 05D0     		beq	.L324
4117:./FreeRTOS/tasks.c ****                 }
 4567              		.loc 1 4117 21 is_stmt 1 view .LVU1280
4117:./FreeRTOS/tasks.c ****                 }
 4568              		.loc 1 4117 64 is_stmt 0 view .LVU1281
 4569 0036 204B     		ldr	r3, .L325
 4570 0038 1B68     		ldr	r3, [r3]
 4571 003a DB6A     		ldr	r3, [r3, #44]
4117:./FreeRTOS/tasks.c ****                 }
 4572              		.loc 1 4117 50 view .LVU1282
 4573 003c E362     		str	r3, [r4, #44]
4123:./FreeRTOS/tasks.c ****             }
 4574              		.loc 1 4123 25 view .LVU1283
 4575 003e 0120     		movs	r0, #1
 4576              	.LVL339:
 4577              	.L312:
4150:./FreeRTOS/tasks.c **** 
 4578              		.loc 1 4150 5 view .LVU1284
 4579 0040 70BD     		pop	{r4, r5, r6, pc}
 4580              	.LVL340:
 4581              	.L324:
4098:./FreeRTOS/tasks.c ****                     {
 4582              		.loc 1 4098 21 is_stmt 1 view .LVU1285
4098:./FreeRTOS/tasks.c ****                     {
 4583              		.loc 1 4098 25 is_stmt 0 view .LVU1286
 4584 0042 251D     		adds	r5, r4, #4
 4585 0044 2846     		mov	r0, r5
 4586              	.LVL341:
4098:./FreeRTOS/tasks.c ****                     {
 4587              		.loc 1 4098 25 view .LVU1287
 4588 0046 FFF7FEFF 		bl	uxListRemove
 4589              	.LVL342:
4098:./FreeRTOS/tasks.c ****                     {
 4590              		.loc 1 4098 23 view .LVU1288
 4591 004a 38B9     		cbnz	r0, .L317
4103:./FreeRTOS/tasks.c ****                     }
 4592              		.loc 1 4103 25 is_stmt 1 view .LVU1289
 4593 004c E36A     		ldr	r3, [r4, #44]
 4594 004e 0122     		movs	r2, #1
 4595 0050 9A40     		lsls	r2, r2, r3
 4596 0052 1B49     		ldr	r1, .L325+8
 4597 0054 0B68     		ldr	r3, [r1]
 4598 0056 23EA0203 		bic	r3, r3, r2
 4599 005a 0B60     		str	r3, [r1]
 4600              	.L317:
4107:./FreeRTOS/tasks.c ****                     }
 4601              		.loc 1 4107 49 view .LVU1290
4111:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 4602              		.loc 1 4111 21 view .LVU1291
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 201


4111:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 4603              		.loc 1 4111 64 is_stmt 0 view .LVU1292
 4604 005c 164B     		ldr	r3, .L325
 4605 005e 1B68     		ldr	r3, [r3]
 4606 0060 DB6A     		ldr	r3, [r3, #44]
4111:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 4607              		.loc 1 4111 50 view .LVU1293
 4608 0062 E362     		str	r3, [r4, #44]
4112:./FreeRTOS/tasks.c ****                 }
 4609              		.loc 1 4112 21 is_stmt 1 view .LVU1294
4112:./FreeRTOS/tasks.c ****                 }
 4610              		.loc 1 4112 21 view .LVU1295
 4611 0064 0120     		movs	r0, #1
 4612 0066 00FA03F2 		lsl	r2, r0, r3
 4613 006a 1549     		ldr	r1, .L325+8
 4614 006c 0E68     		ldr	r6, [r1]
 4615 006e 3243     		orrs	r2, r2, r6
 4616 0070 0A60     		str	r2, [r1]
 4617              	.LBB97:
4112:./FreeRTOS/tasks.c ****                 }
 4618              		.loc 1 4112 21 view .LVU1296
 4619 0072 124A     		ldr	r2, .L325+4
 4620 0074 03EB8303 		add	r3, r3, r3, lsl #2
 4621 0078 02EB8303 		add	r3, r2, r3, lsl #2
 4622 007c 5B68     		ldr	r3, [r3, #4]
 4623              	.LVL343:
4112:./FreeRTOS/tasks.c ****                 }
 4624              		.loc 1 4112 21 view .LVU1297
4112:./FreeRTOS/tasks.c ****                 }
 4625              		.loc 1 4112 21 view .LVU1298
4112:./FreeRTOS/tasks.c ****                 }
 4626              		.loc 1 4112 21 view .LVU1299
 4627 007e A360     		str	r3, [r4, #8]
4112:./FreeRTOS/tasks.c ****                 }
 4628              		.loc 1 4112 21 view .LVU1300
 4629 0080 9968     		ldr	r1, [r3, #8]
 4630 0082 E160     		str	r1, [r4, #12]
4112:./FreeRTOS/tasks.c ****                 }
 4631              		.loc 1 4112 21 view .LVU1301
 4632 0084 4D60     		str	r5, [r1, #4]
4112:./FreeRTOS/tasks.c ****                 }
 4633              		.loc 1 4112 21 view .LVU1302
 4634 0086 9D60     		str	r5, [r3, #8]
4112:./FreeRTOS/tasks.c ****                 }
 4635              		.loc 1 4112 21 view .LVU1303
 4636 0088 E36A     		ldr	r3, [r4, #44]
 4637              	.LVL344:
4112:./FreeRTOS/tasks.c ****                 }
 4638              		.loc 1 4112 21 is_stmt 0 view .LVU1304
 4639 008a 03EB8301 		add	r1, r3, r3, lsl #2
 4640 008e 8D00     		lsls	r5, r1, #2
 4641 0090 02EB8101 		add	r1, r2, r1, lsl #2
 4642 0094 6161     		str	r1, [r4, #20]
4112:./FreeRTOS/tasks.c ****                 }
 4643              		.loc 1 4112 21 is_stmt 1 view .LVU1305
 4644 0096 5159     		ldr	r1, [r2, r5]
 4645 0098 0144     		add	r1, r1, r0
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 202


 4646 009a 5151     		str	r1, [r2, r5]
 4647              	.LBE97:
4112:./FreeRTOS/tasks.c ****                 }
 4648              		.loc 1 4112 21 view .LVU1306
4112:./FreeRTOS/tasks.c ****                 }
 4649              		.loc 1 4112 62 view .LVU1307
 4650 009c D0E7     		b	.L312
 4651              	.LVL345:
 4652              	.L314:
4127:./FreeRTOS/tasks.c ****                 {
 4653              		.loc 1 4127 17 view .LVU1308
4127:./FreeRTOS/tasks.c ****                 {
 4654              		.loc 1 4127 37 is_stmt 0 view .LVU1309
 4655 009e 426C     		ldr	r2, [r0, #68]
4127:./FreeRTOS/tasks.c ****                 {
 4656              		.loc 1 4127 68 view .LVU1310
 4657 00a0 054B     		ldr	r3, .L325
 4658 00a2 1B68     		ldr	r3, [r3]
 4659 00a4 DB6A     		ldr	r3, [r3, #44]
4127:./FreeRTOS/tasks.c ****                 {
 4660              		.loc 1 4127 19 view .LVU1311
 4661 00a6 9A42     		cmp	r2, r3
 4662 00a8 03D3     		bcc	.L319
4070:./FreeRTOS/tasks.c **** 
 4663              		.loc 1 4070 20 view .LVU1312
 4664 00aa 0020     		movs	r0, #0
 4665              	.LVL346:
4070:./FreeRTOS/tasks.c **** 
 4666              		.loc 1 4070 20 view .LVU1313
 4667 00ac C8E7     		b	.L312
 4668              	.LVL347:
 4669              	.L318:
 4670              	.LCFI39:
 4671              		.cfi_def_cfa_offset 0
 4672              		.cfi_restore 4
 4673              		.cfi_restore 5
 4674              		.cfi_restore 6
 4675              		.cfi_restore 14
4070:./FreeRTOS/tasks.c **** 
 4676              		.loc 1 4070 20 view .LVU1314
 4677 00ae 0020     		movs	r0, #0
 4678              	.LVL348:
4150:./FreeRTOS/tasks.c **** 
 4679              		.loc 1 4150 5 view .LVU1315
 4680 00b0 7047     		bx	lr
 4681              	.LVL349:
 4682              	.L319:
 4683              	.LCFI40:
 4684              		.cfi_def_cfa_offset 16
 4685              		.cfi_offset 4, -16
 4686              		.cfi_offset 5, -12
 4687              		.cfi_offset 6, -8
 4688              		.cfi_offset 14, -4
4136:./FreeRTOS/tasks.c ****                 }
 4689              		.loc 1 4136 29 view .LVU1316
 4690 00b2 0120     		movs	r0, #1
 4691              	.LVL350:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 203


4146:./FreeRTOS/tasks.c ****         }
 4692              		.loc 1 4146 37 is_stmt 1 view .LVU1317
4149:./FreeRTOS/tasks.c ****     }
 4693              		.loc 1 4149 9 view .LVU1318
4149:./FreeRTOS/tasks.c ****     }
 4694              		.loc 1 4149 16 is_stmt 0 view .LVU1319
 4695 00b4 C4E7     		b	.L312
 4696              	.L326:
 4697 00b6 00BF     		.align	2
 4698              	.L325:
 4699 00b8 00000000 		.word	pxCurrentTCB
 4700 00bc 00000000 		.word	pxReadyTasksLists
 4701 00c0 00000000 		.word	uxTopReadyPriority
 4702              		.cfi_endproc
 4703              	.LFE74:
 4705              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4706              		.align	1
 4707              		.global	xTaskPriorityDisinherit
 4708              		.syntax unified
 4709              		.thumb
 4710              		.thumb_func
 4712              	xTaskPriorityDisinherit:
 4713              	.LVL351:
 4714              	.LFB75:
4158:./FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 4715              		.loc 1 4158 5 is_stmt 1 view -0
 4716              		.cfi_startproc
 4717              		@ args = 0, pretend = 0, frame = 0
 4718              		@ frame_needed = 0, uses_anonymous_args = 0
4159:./FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 4719              		.loc 1 4159 9 view .LVU1321
4160:./FreeRTOS/tasks.c **** 
 4720              		.loc 1 4160 9 view .LVU1322
4162:./FreeRTOS/tasks.c ****         {
 4721              		.loc 1 4162 9 view .LVU1323
4162:./FreeRTOS/tasks.c ****         {
 4722              		.loc 1 4162 11 is_stmt 0 view .LVU1324
 4723 0000 0028     		cmp	r0, #0
 4724 0002 3AD0     		beq	.L330
4158:./FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 4725              		.loc 1 4158 5 view .LVU1325
 4726 0004 70B5     		push	{r4, r5, r6, lr}
 4727              	.LCFI41:
 4728              		.cfi_def_cfa_offset 16
 4729              		.cfi_offset 4, -16
 4730              		.cfi_offset 5, -12
 4731              		.cfi_offset 6, -8
 4732              		.cfi_offset 14, -4
 4733 0006 0446     		mov	r4, r0
4168:./FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 4734              		.loc 1 4168 50 is_stmt 1 view .LVU1326
4169:./FreeRTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 4735              		.loc 1 4169 49 view .LVU1327
4170:./FreeRTOS/tasks.c **** 
 4736              		.loc 1 4170 13 view .LVU1328
4170:./FreeRTOS/tasks.c **** 
 4737              		.loc 1 4170 20 is_stmt 0 view .LVU1329
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 204


 4738 0008 836C     		ldr	r3, [r0, #72]
4170:./FreeRTOS/tasks.c **** 
 4739              		.loc 1 4170 37 view .LVU1330
 4740 000a 013B     		subs	r3, r3, #1
 4741 000c 8364     		str	r3, [r0, #72]
4174:./FreeRTOS/tasks.c ****             {
 4742              		.loc 1 4174 13 is_stmt 1 view .LVU1331
4174:./FreeRTOS/tasks.c ****             {
 4743              		.loc 1 4174 22 is_stmt 0 view .LVU1332
 4744 000e C16A     		ldr	r1, [r0, #44]
4174:./FreeRTOS/tasks.c ****             {
 4745              		.loc 1 4174 43 view .LVU1333
 4746 0010 426C     		ldr	r2, [r0, #68]
4174:./FreeRTOS/tasks.c ****             {
 4747              		.loc 1 4174 15 view .LVU1334
 4748 0012 9142     		cmp	r1, r2
 4749 0014 33D0     		beq	.L331
4177:./FreeRTOS/tasks.c ****                 {
 4750              		.loc 1 4177 17 is_stmt 1 view .LVU1335
4177:./FreeRTOS/tasks.c ****                 {
 4751              		.loc 1 4177 19 is_stmt 0 view .LVU1336
 4752 0016 0BB1     		cbz	r3, .L337
4160:./FreeRTOS/tasks.c **** 
 4753              		.loc 1 4160 20 view .LVU1337
 4754 0018 0020     		movs	r0, #0
 4755              	.LVL352:
4226:./FreeRTOS/tasks.c ****         }
 4756              		.loc 1 4226 37 is_stmt 1 view .LVU1338
4229:./FreeRTOS/tasks.c ****     }
 4757              		.loc 1 4229 9 view .LVU1339
 4758              	.L327:
4230:./FreeRTOS/tasks.c **** 
 4759              		.loc 1 4230 5 is_stmt 0 view .LVU1340
 4760 001a 70BD     		pop	{r4, r5, r6, pc}
 4761              	.LVL353:
 4762              	.L337:
4184:./FreeRTOS/tasks.c ****                     {
 4763              		.loc 1 4184 21 is_stmt 1 view .LVU1341
4184:./FreeRTOS/tasks.c ****                     {
 4764              		.loc 1 4184 25 is_stmt 0 view .LVU1342
 4765 001c 051D     		adds	r5, r0, #4
 4766 001e 2846     		mov	r0, r5
 4767              	.LVL354:
4184:./FreeRTOS/tasks.c ****                     {
 4768              		.loc 1 4184 25 view .LVU1343
 4769 0020 FFF7FEFF 		bl	uxListRemove
 4770              	.LVL355:
4184:./FreeRTOS/tasks.c ****                     {
 4771              		.loc 1 4184 23 view .LVU1344
 4772 0024 38B9     		cbnz	r0, .L329
4186:./FreeRTOS/tasks.c ****                     }
 4773              		.loc 1 4186 25 is_stmt 1 view .LVU1345
 4774 0026 E36A     		ldr	r3, [r4, #44]
 4775 0028 0122     		movs	r2, #1
 4776 002a 9A40     		lsls	r2, r2, r3
 4777 002c 1549     		ldr	r1, .L338
 4778 002e 0B68     		ldr	r3, [r1]
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 205


 4779 0030 23EA0203 		bic	r3, r3, r2
 4780 0034 0B60     		str	r3, [r1]
 4781              	.L329:
4190:./FreeRTOS/tasks.c ****                     }
 4782              		.loc 1 4190 49 view .LVU1346
4195:./FreeRTOS/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
 4783              		.loc 1 4195 82 view .LVU1347
4196:./FreeRTOS/tasks.c **** 
 4784              		.loc 1 4196 21 view .LVU1348
4196:./FreeRTOS/tasks.c **** 
 4785              		.loc 1 4196 46 is_stmt 0 view .LVU1349
 4786 0036 636C     		ldr	r3, [r4, #68]
4196:./FreeRTOS/tasks.c **** 
 4787              		.loc 1 4196 39 view .LVU1350
 4788 0038 E362     		str	r3, [r4, #44]
4201:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 4789              		.loc 1 4201 21 is_stmt 1 view .LVU1351
 4790 003a C3F12002 		rsb	r2, r3, #32
 4791 003e A261     		str	r2, [r4, #24]
4202:./FreeRTOS/tasks.c **** 
 4792              		.loc 1 4202 21 view .LVU1352
4202:./FreeRTOS/tasks.c **** 
 4793              		.loc 1 4202 21 view .LVU1353
 4794 0040 0120     		movs	r0, #1
 4795 0042 00FA03F2 		lsl	r2, r0, r3
 4796 0046 0F49     		ldr	r1, .L338
 4797 0048 0E68     		ldr	r6, [r1]
 4798 004a 3243     		orrs	r2, r2, r6
 4799 004c 0A60     		str	r2, [r1]
 4800              	.LBB98:
4202:./FreeRTOS/tasks.c **** 
 4801              		.loc 1 4202 21 view .LVU1354
 4802 004e 0E4A     		ldr	r2, .L338+4
 4803 0050 03EB8303 		add	r3, r3, r3, lsl #2
 4804 0054 02EB8303 		add	r3, r2, r3, lsl #2
 4805 0058 5B68     		ldr	r3, [r3, #4]
 4806              	.LVL356:
4202:./FreeRTOS/tasks.c **** 
 4807              		.loc 1 4202 21 view .LVU1355
4202:./FreeRTOS/tasks.c **** 
 4808              		.loc 1 4202 21 view .LVU1356
4202:./FreeRTOS/tasks.c **** 
 4809              		.loc 1 4202 21 view .LVU1357
 4810 005a A360     		str	r3, [r4, #8]
4202:./FreeRTOS/tasks.c **** 
 4811              		.loc 1 4202 21 view .LVU1358
 4812 005c 9968     		ldr	r1, [r3, #8]
 4813 005e E160     		str	r1, [r4, #12]
4202:./FreeRTOS/tasks.c **** 
 4814              		.loc 1 4202 21 view .LVU1359
 4815 0060 4D60     		str	r5, [r1, #4]
4202:./FreeRTOS/tasks.c **** 
 4816              		.loc 1 4202 21 view .LVU1360
 4817 0062 9D60     		str	r5, [r3, #8]
4202:./FreeRTOS/tasks.c **** 
 4818              		.loc 1 4202 21 view .LVU1361
 4819 0064 E36A     		ldr	r3, [r4, #44]
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 206


 4820              	.LVL357:
4202:./FreeRTOS/tasks.c **** 
 4821              		.loc 1 4202 21 is_stmt 0 view .LVU1362
 4822 0066 03EB8301 		add	r1, r3, r3, lsl #2
 4823 006a 8D00     		lsls	r5, r1, #2
 4824 006c 02EB8101 		add	r1, r2, r1, lsl #2
 4825 0070 6161     		str	r1, [r4, #20]
4202:./FreeRTOS/tasks.c **** 
 4826              		.loc 1 4202 21 is_stmt 1 view .LVU1363
 4827 0072 5159     		ldr	r1, [r2, r5]
 4828 0074 0144     		add	r1, r1, r0
 4829 0076 5151     		str	r1, [r2, r5]
 4830              	.LBE98:
4202:./FreeRTOS/tasks.c **** 
 4831              		.loc 1 4202 21 view .LVU1364
4202:./FreeRTOS/tasks.c **** 
 4832              		.loc 1 4202 51 view .LVU1365
4212:./FreeRTOS/tasks.c ****                 }
 4833              		.loc 1 4212 21 view .LVU1366
 4834              	.LVL358:
4212:./FreeRTOS/tasks.c ****                 }
 4835              		.loc 1 4212 21 is_stmt 0 view .LVU1367
 4836 0078 CFE7     		b	.L327
 4837              	.LVL359:
 4838              	.L330:
 4839              	.LCFI42:
 4840              		.cfi_def_cfa_offset 0
 4841              		.cfi_restore 4
 4842              		.cfi_restore 5
 4843              		.cfi_restore 6
 4844              		.cfi_restore 14
4160:./FreeRTOS/tasks.c **** 
 4845              		.loc 1 4160 20 view .LVU1368
 4846 007a 0020     		movs	r0, #0
 4847              	.LVL360:
4230:./FreeRTOS/tasks.c **** 
 4848              		.loc 1 4230 5 view .LVU1369
 4849 007c 7047     		bx	lr
 4850              	.LVL361:
 4851              	.L331:
 4852              	.LCFI43:
 4853              		.cfi_def_cfa_offset 16
 4854              		.cfi_offset 4, -16
 4855              		.cfi_offset 5, -12
 4856              		.cfi_offset 6, -8
 4857              		.cfi_offset 14, -4
4160:./FreeRTOS/tasks.c **** 
 4858              		.loc 1 4160 20 view .LVU1370
 4859 007e 0020     		movs	r0, #0
 4860              	.LVL362:
4160:./FreeRTOS/tasks.c **** 
 4861              		.loc 1 4160 20 view .LVU1371
 4862 0080 CBE7     		b	.L327
 4863              	.L339:
 4864 0082 00BF     		.align	2
 4865              	.L338:
 4866 0084 00000000 		.word	uxTopReadyPriority
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 207


 4867 0088 00000000 		.word	pxReadyTasksLists
 4868              		.cfi_endproc
 4869              	.LFE75:
 4871              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4872              		.align	1
 4873              		.global	vTaskPriorityDisinheritAfterTimeout
 4874              		.syntax unified
 4875              		.thumb
 4876              		.thumb_func
 4878              	vTaskPriorityDisinheritAfterTimeout:
 4879              	.LVL363:
 4880              	.LFB76:
4239:./FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 4881              		.loc 1 4239 5 is_stmt 1 view -0
 4882              		.cfi_startproc
 4883              		@ args = 0, pretend = 0, frame = 0
 4884              		@ frame_needed = 0, uses_anonymous_args = 0
4240:./FreeRTOS/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
 4885              		.loc 1 4240 9 view .LVU1373
4241:./FreeRTOS/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 4886              		.loc 1 4241 9 view .LVU1374
4242:./FreeRTOS/tasks.c **** 
 4887              		.loc 1 4242 9 view .LVU1375
4244:./FreeRTOS/tasks.c ****         {
 4888              		.loc 1 4244 9 view .LVU1376
4244:./FreeRTOS/tasks.c ****         {
 4889              		.loc 1 4244 11 is_stmt 0 view .LVU1377
 4890 0000 0028     		cmp	r0, #0
 4891 0002 45D0     		beq	.L346
4239:./FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 4892              		.loc 1 4239 5 view .LVU1378
 4893 0004 38B5     		push	{r3, r4, r5, lr}
 4894              	.LCFI44:
 4895              		.cfi_def_cfa_offset 16
 4896              		.cfi_offset 3, -16
 4897              		.cfi_offset 4, -12
 4898              		.cfi_offset 5, -8
 4899              		.cfi_offset 14, -4
 4900 0006 0446     		mov	r4, r0
4248:./FreeRTOS/tasks.c **** 
 4901              		.loc 1 4248 49 is_stmt 1 view .LVU1379
4254:./FreeRTOS/tasks.c ****             {
 4902              		.loc 1 4254 13 view .LVU1380
4254:./FreeRTOS/tasks.c ****             {
 4903              		.loc 1 4254 22 is_stmt 0 view .LVU1381
 4904 0008 436C     		ldr	r3, [r0, #68]
4254:./FreeRTOS/tasks.c ****             {
 4905              		.loc 1 4254 15 view .LVU1382
 4906 000a 8B42     		cmp	r3, r1
 4907 000c 00D2     		bcs	.L342
4256:./FreeRTOS/tasks.c ****             }
 4908              		.loc 1 4256 33 view .LVU1383
 4909 000e 0B46     		mov	r3, r1
 4910              	.L342:
 4911              	.LVL364:
4264:./FreeRTOS/tasks.c ****             {
 4912              		.loc 1 4264 13 is_stmt 1 view .LVU1384
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 208


4264:./FreeRTOS/tasks.c ****             {
 4913              		.loc 1 4264 22 is_stmt 0 view .LVU1385
 4914 0010 E26A     		ldr	r2, [r4, #44]
4264:./FreeRTOS/tasks.c ****             {
 4915              		.loc 1 4264 15 view .LVU1386
 4916 0012 9A42     		cmp	r2, r3
 4917 0014 02D0     		beq	.L340
4270:./FreeRTOS/tasks.c ****                 {
 4918              		.loc 1 4270 17 is_stmt 1 view .LVU1387
4270:./FreeRTOS/tasks.c ****                 {
 4919              		.loc 1 4270 26 is_stmt 0 view .LVU1388
 4920 0016 A16C     		ldr	r1, [r4, #72]
 4921              	.LVL365:
4270:./FreeRTOS/tasks.c ****                 {
 4922              		.loc 1 4270 19 view .LVU1389
 4923 0018 0129     		cmp	r1, #1
 4924 001a 00D0     		beq	.L349
 4925              	.LVL366:
 4926              	.L340:
4336:./FreeRTOS/tasks.c **** 
 4927              		.loc 1 4336 5 view .LVU1390
 4928 001c 38BD     		pop	{r3, r4, r5, pc}
 4929              	.LVL367:
 4930              	.L349:
4275:./FreeRTOS/tasks.c **** 
 4931              		.loc 1 4275 58 is_stmt 1 view .LVU1391
4280:./FreeRTOS/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
 4932              		.loc 1 4280 76 view .LVU1392
4281:./FreeRTOS/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
 4933              		.loc 1 4281 21 view .LVU1393
4282:./FreeRTOS/tasks.c **** 
 4934              		.loc 1 4282 21 view .LVU1394
4282:./FreeRTOS/tasks.c **** 
 4935              		.loc 1 4282 39 is_stmt 0 view .LVU1395
 4936 001e E362     		str	r3, [r4, #44]
4286:./FreeRTOS/tasks.c ****                     {
 4937              		.loc 1 4286 21 is_stmt 1 view .LVU1396
4286:./FreeRTOS/tasks.c ****                     {
 4938              		.loc 1 4286 27 is_stmt 0 view .LVU1397
 4939 0020 A169     		ldr	r1, [r4, #24]
4286:./FreeRTOS/tasks.c ****                     {
 4940              		.loc 1 4286 23 view .LVU1398
 4941 0022 0029     		cmp	r1, #0
 4942 0024 02DB     		blt	.L343
4288:./FreeRTOS/tasks.c ****                     }
 4943              		.loc 1 4288 25 is_stmt 1 view .LVU1399
 4944 0026 C3F12003 		rsb	r3, r3, #32
 4945              	.LVL368:
4288:./FreeRTOS/tasks.c ****                     }
 4946              		.loc 1 4288 25 is_stmt 0 view .LVU1400
 4947 002a A361     		str	r3, [r4, #24]
 4948              	.L343:
4292:./FreeRTOS/tasks.c ****                     }
 4949              		.loc 1 4292 49 is_stmt 1 view .LVU1401
4301:./FreeRTOS/tasks.c ****                     {
 4950              		.loc 1 4301 21 view .LVU1402
4301:./FreeRTOS/tasks.c ****                     {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 209


 4951              		.loc 1 4301 25 is_stmt 0 view .LVU1403
 4952 002c 6169     		ldr	r1, [r4, #20]
 4953 002e 02EB8202 		add	r2, r2, r2, lsl #2
 4954              	.LVL369:
4301:./FreeRTOS/tasks.c ****                     {
 4955              		.loc 1 4301 25 view .LVU1404
 4956 0032 184B     		ldr	r3, .L350
 4957 0034 03EB8203 		add	r3, r3, r2, lsl #2
4301:./FreeRTOS/tasks.c ****                     {
 4958              		.loc 1 4301 23 view .LVU1405
 4959 0038 9942     		cmp	r1, r3
 4960 003a EFD1     		bne	.L340
4303:./FreeRTOS/tasks.c ****                         {
 4961              		.loc 1 4303 25 is_stmt 1 view .LVU1406
4303:./FreeRTOS/tasks.c ****                         {
 4962              		.loc 1 4303 29 is_stmt 0 view .LVU1407
 4963 003c 251D     		adds	r5, r4, #4
 4964 003e 2846     		mov	r0, r5
 4965              	.LVL370:
4303:./FreeRTOS/tasks.c ****                         {
 4966              		.loc 1 4303 29 view .LVU1408
 4967 0040 FFF7FEFF 		bl	uxListRemove
 4968              	.LVL371:
4303:./FreeRTOS/tasks.c ****                         {
 4969              		.loc 1 4303 27 view .LVU1409
 4970 0044 38B9     		cbnz	r0, .L344
4308:./FreeRTOS/tasks.c ****                         }
 4971              		.loc 1 4308 29 is_stmt 1 view .LVU1410
 4972 0046 E36A     		ldr	r3, [r4, #44]
 4973 0048 0122     		movs	r2, #1
 4974 004a 9A40     		lsls	r2, r2, r3
 4975 004c 1249     		ldr	r1, .L350+4
 4976 004e 0B68     		ldr	r3, [r1]
 4977 0050 23EA0203 		bic	r3, r3, r2
 4978 0054 0B60     		str	r3, [r1]
 4979              	.L344:
4312:./FreeRTOS/tasks.c ****                         }
 4980              		.loc 1 4312 53 view .LVU1411
4315:./FreeRTOS/tasks.c ****                     }
 4981              		.loc 1 4315 25 view .LVU1412
4315:./FreeRTOS/tasks.c ****                     }
 4982              		.loc 1 4315 25 view .LVU1413
 4983 0056 E36A     		ldr	r3, [r4, #44]
 4984 0058 0122     		movs	r2, #1
 4985 005a 9A40     		lsls	r2, r2, r3
 4986 005c 0E49     		ldr	r1, .L350+4
 4987 005e 0868     		ldr	r0, [r1]
 4988 0060 0243     		orrs	r2, r2, r0
 4989 0062 0A60     		str	r2, [r1]
 4990              	.LBB99:
4315:./FreeRTOS/tasks.c ****                     }
 4991              		.loc 1 4315 25 view .LVU1414
 4992 0064 0B4A     		ldr	r2, .L350
 4993 0066 03EB8303 		add	r3, r3, r3, lsl #2
 4994 006a 02EB8303 		add	r3, r2, r3, lsl #2
 4995 006e 5B68     		ldr	r3, [r3, #4]
 4996              	.LVL372:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 210


4315:./FreeRTOS/tasks.c ****                     }
 4997              		.loc 1 4315 25 view .LVU1415
4315:./FreeRTOS/tasks.c ****                     }
 4998              		.loc 1 4315 25 view .LVU1416
4315:./FreeRTOS/tasks.c ****                     }
 4999              		.loc 1 4315 25 view .LVU1417
 5000 0070 A360     		str	r3, [r4, #8]
4315:./FreeRTOS/tasks.c ****                     }
 5001              		.loc 1 4315 25 view .LVU1418
 5002 0072 9968     		ldr	r1, [r3, #8]
 5003 0074 E160     		str	r1, [r4, #12]
4315:./FreeRTOS/tasks.c ****                     }
 5004              		.loc 1 4315 25 view .LVU1419
 5005 0076 4D60     		str	r5, [r1, #4]
4315:./FreeRTOS/tasks.c ****                     }
 5006              		.loc 1 4315 25 view .LVU1420
 5007 0078 9D60     		str	r5, [r3, #8]
4315:./FreeRTOS/tasks.c ****                     }
 5008              		.loc 1 4315 25 view .LVU1421
 5009 007a E36A     		ldr	r3, [r4, #44]
 5010              	.LVL373:
4315:./FreeRTOS/tasks.c ****                     }
 5011              		.loc 1 4315 25 is_stmt 0 view .LVU1422
 5012 007c 03EB8301 		add	r1, r3, r3, lsl #2
 5013 0080 8800     		lsls	r0, r1, #2
 5014 0082 02EB8101 		add	r1, r2, r1, lsl #2
 5015 0086 6161     		str	r1, [r4, #20]
4315:./FreeRTOS/tasks.c ****                     }
 5016              		.loc 1 4315 25 is_stmt 1 view .LVU1423
 5017 0088 1158     		ldr	r1, [r2, r0]
 5018 008a 0131     		adds	r1, r1, #1
 5019 008c 1150     		str	r1, [r2, r0]
 5020              	.LBE99:
4315:./FreeRTOS/tasks.c ****                     }
 5021              		.loc 1 4315 25 view .LVU1424
4315:./FreeRTOS/tasks.c ****                     }
 5022              		.loc 1 4315 55 view .LVU1425
4334:./FreeRTOS/tasks.c ****         }
 5023              		.loc 1 4334 37 view .LVU1426
4336:./FreeRTOS/tasks.c **** 
 5024              		.loc 1 4336 5 is_stmt 0 view .LVU1427
 5025 008e C5E7     		b	.L340
 5026              	.LVL374:
 5027              	.L346:
 5028              	.LCFI45:
 5029              		.cfi_def_cfa_offset 0
 5030              		.cfi_restore 3
 5031              		.cfi_restore 4
 5032              		.cfi_restore 5
 5033              		.cfi_restore 14
4336:./FreeRTOS/tasks.c **** 
 5034              		.loc 1 4336 5 view .LVU1428
 5035 0090 7047     		bx	lr
 5036              	.L351:
 5037 0092 00BF     		.align	2
 5038              	.L350:
 5039 0094 00000000 		.word	pxReadyTasksLists
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 211


 5040 0098 00000000 		.word	uxTopReadyPriority
 5041              		.cfi_endproc
 5042              	.LFE76:
 5044              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5045              		.align	1
 5046              		.global	uxTaskResetEventItemValue
 5047              		.syntax unified
 5048              		.thumb
 5049              		.thumb_func
 5051              	uxTaskResetEventItemValue:
 5052              	.LFB77:
4659:./FreeRTOS/tasks.c ****     TickType_t uxReturn;
 5053              		.loc 1 4659 1 is_stmt 1 view -0
 5054              		.cfi_startproc
 5055              		@ args = 0, pretend = 0, frame = 0
 5056              		@ frame_needed = 0, uses_anonymous_args = 0
 5057              		@ link register save eliminated.
4660:./FreeRTOS/tasks.c **** 
 5058              		.loc 1 4660 5 view .LVU1430
4662:./FreeRTOS/tasks.c **** 
 5059              		.loc 1 4662 5 view .LVU1431
4662:./FreeRTOS/tasks.c **** 
 5060              		.loc 1 4662 16 is_stmt 0 view .LVU1432
 5061 0000 044A     		ldr	r2, .L353
 5062 0002 1368     		ldr	r3, [r2]
4662:./FreeRTOS/tasks.c **** 
 5063              		.loc 1 4662 14 view .LVU1433
 5064 0004 9869     		ldr	r0, [r3, #24]
 5065              	.LVL375:
4666:./FreeRTOS/tasks.c **** 
 5066              		.loc 1 4666 5 is_stmt 1 view .LVU1434
 5067 0006 1368     		ldr	r3, [r2]
 5068 0008 DB6A     		ldr	r3, [r3, #44]
 5069 000a 1268     		ldr	r2, [r2]
 5070 000c C3F12003 		rsb	r3, r3, #32
 5071 0010 9361     		str	r3, [r2, #24]
4668:./FreeRTOS/tasks.c **** }
 5072              		.loc 1 4668 5 view .LVU1435
4669:./FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 5073              		.loc 1 4669 1 is_stmt 0 view .LVU1436
 5074 0012 7047     		bx	lr
 5075              	.L354:
 5076              		.align	2
 5077              	.L353:
 5078 0014 00000000 		.word	pxCurrentTCB
 5079              		.cfi_endproc
 5080              	.LFE77:
 5082              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5083              		.align	1
 5084              		.global	pvTaskIncrementMutexHeldCount
 5085              		.syntax unified
 5086              		.thumb
 5087              		.thumb_func
 5089              	pvTaskIncrementMutexHeldCount:
 5090              	.LFB78:
4675:./FreeRTOS/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
 5091              		.loc 1 4675 5 is_stmt 1 view -0
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 212


 5092              		.cfi_startproc
 5093              		@ args = 0, pretend = 0, frame = 0
 5094              		@ frame_needed = 0, uses_anonymous_args = 0
 5095              		@ link register save eliminated.
4678:./FreeRTOS/tasks.c ****         {
 5096              		.loc 1 4678 9 view .LVU1438
4678:./FreeRTOS/tasks.c ****         {
 5097              		.loc 1 4678 26 is_stmt 0 view .LVU1439
 5098 0000 054B     		ldr	r3, .L357
 5099 0002 1B68     		ldr	r3, [r3]
4678:./FreeRTOS/tasks.c ****         {
 5100              		.loc 1 4678 11 view .LVU1440
 5101 0004 23B1     		cbz	r3, .L356
4680:./FreeRTOS/tasks.c ****         }
 5102              		.loc 1 4680 13 is_stmt 1 view .LVU1441
4680:./FreeRTOS/tasks.c ****         }
 5103              		.loc 1 4680 27 is_stmt 0 view .LVU1442
 5104 0006 044B     		ldr	r3, .L357
 5105 0008 1A68     		ldr	r2, [r3]
 5106 000a 936C     		ldr	r3, [r2, #72]
4680:./FreeRTOS/tasks.c ****         }
 5107              		.loc 1 4680 44 view .LVU1443
 5108 000c 0133     		adds	r3, r3, #1
 5109 000e 9364     		str	r3, [r2, #72]
 5110              	.L356:
4683:./FreeRTOS/tasks.c ****     }
 5111              		.loc 1 4683 9 is_stmt 1 view .LVU1444
4683:./FreeRTOS/tasks.c ****     }
 5112              		.loc 1 4683 16 is_stmt 0 view .LVU1445
 5113 0010 014B     		ldr	r3, .L357
 5114 0012 1868     		ldr	r0, [r3]
4684:./FreeRTOS/tasks.c **** 
 5115              		.loc 1 4684 5 view .LVU1446
 5116 0014 7047     		bx	lr
 5117              	.L358:
 5118 0016 00BF     		.align	2
 5119              	.L357:
 5120 0018 00000000 		.word	pxCurrentTCB
 5121              		.cfi_endproc
 5122              	.LFE78:
 5124              		.section	.text.ulTaskGenericNotifyTake,"ax",%progbits
 5125              		.align	1
 5126              		.global	ulTaskGenericNotifyTake
 5127              		.syntax unified
 5128              		.thumb
 5129              		.thumb_func
 5131              	ulTaskGenericNotifyTake:
 5132              	.LVL376:
 5133              	.LFB79:
4694:./FreeRTOS/tasks.c ****         uint32_t ulReturn;
 5134              		.loc 1 4694 5 is_stmt 1 view -0
 5135              		.cfi_startproc
 5136              		@ args = 0, pretend = 0, frame = 0
 5137              		@ frame_needed = 0, uses_anonymous_args = 0
4694:./FreeRTOS/tasks.c ****         uint32_t ulReturn;
 5138              		.loc 1 4694 5 is_stmt 0 view .LVU1448
 5139 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 213


 5140              	.LCFI46:
 5141              		.cfi_def_cfa_offset 16
 5142              		.cfi_offset 4, -16
 5143              		.cfi_offset 5, -12
 5144              		.cfi_offset 6, -8
 5145              		.cfi_offset 14, -4
 5146 0002 0446     		mov	r4, r0
 5147 0004 0E46     		mov	r6, r1
 5148 0006 1546     		mov	r5, r2
4695:./FreeRTOS/tasks.c **** 
 5149              		.loc 1 4695 9 is_stmt 1 view .LVU1449
4697:./FreeRTOS/tasks.c **** 
 5150              		.loc 1 4697 78 view .LVU1450
4699:./FreeRTOS/tasks.c ****         {
 5151              		.loc 1 4699 9 view .LVU1451
 5152 0008 FFF7FEFF 		bl	vPortEnterCritical
 5153              	.LVL377:
4702:./FreeRTOS/tasks.c ****             {
 5154              		.loc 1 4702 13 view .LVU1452
4702:./FreeRTOS/tasks.c ****             {
 5155              		.loc 1 4702 29 is_stmt 0 view .LVU1453
 5156 000c 214B     		ldr	r3, .L365
 5157 000e 1B68     		ldr	r3, [r3]
4702:./FreeRTOS/tasks.c ****             {
 5158              		.loc 1 4702 46 view .LVU1454
 5159 0010 04F11202 		add	r2, r4, #18
 5160 0014 03EB8203 		add	r3, r3, r2, lsl #2
 5161 0018 5B68     		ldr	r3, [r3, #4]
4702:./FreeRTOS/tasks.c ****             {
 5162              		.loc 1 4702 15 view .LVU1455
 5163 001a 33B9     		cbnz	r3, .L360
4705:./FreeRTOS/tasks.c **** 
 5164              		.loc 1 4705 17 is_stmt 1 view .LVU1456
4705:./FreeRTOS/tasks.c **** 
 5165              		.loc 1 4705 29 is_stmt 0 view .LVU1457
 5166 001c 1D4B     		ldr	r3, .L365
 5167 001e 1B68     		ldr	r3, [r3]
4705:./FreeRTOS/tasks.c **** 
 5168              		.loc 1 4705 62 view .LVU1458
 5169 0020 2344     		add	r3, r3, r4
 5170 0022 0122     		movs	r2, #1
 5171 0024 83F85020 		strb	r2, [r3, #80]
4707:./FreeRTOS/tasks.c ****                 {
 5172              		.loc 1 4707 17 is_stmt 1 view .LVU1459
4707:./FreeRTOS/tasks.c ****                 {
 5173              		.loc 1 4707 19 is_stmt 0 view .LVU1460
 5174 0028 E5B9     		cbnz	r5, .L364
 5175              	.L360:
4725:./FreeRTOS/tasks.c ****             }
 5176              		.loc 1 4725 41 is_stmt 1 view .LVU1461
4728:./FreeRTOS/tasks.c **** 
 5177              		.loc 1 4728 9 view .LVU1462
 5178 002a FFF7FEFF 		bl	vPortExitCritical
 5179              	.LVL378:
4730:./FreeRTOS/tasks.c ****         {
 5180              		.loc 1 4730 9 view .LVU1463
 5181 002e FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 214


 5182              	.LVL379:
4732:./FreeRTOS/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 5183              		.loc 1 4732 51 view .LVU1464
4733:./FreeRTOS/tasks.c **** 
 5184              		.loc 1 4733 13 view .LVU1465
4733:./FreeRTOS/tasks.c **** 
 5185              		.loc 1 4733 36 is_stmt 0 view .LVU1466
 5186 0032 184B     		ldr	r3, .L365
 5187 0034 1B68     		ldr	r3, [r3]
4733:./FreeRTOS/tasks.c **** 
 5188              		.loc 1 4733 22 view .LVU1467
 5189 0036 04F11202 		add	r2, r4, #18
 5190 003a 03EB8203 		add	r3, r3, r2, lsl #2
 5191 003e 5D68     		ldr	r5, [r3, #4]
 5192              	.LVL380:
4735:./FreeRTOS/tasks.c ****             {
 5193              		.loc 1 4735 13 is_stmt 1 view .LVU1468
4735:./FreeRTOS/tasks.c ****             {
 5194              		.loc 1 4735 15 is_stmt 0 view .LVU1469
 5195 0040 35B1     		cbz	r5, .L361
4737:./FreeRTOS/tasks.c ****                 {
 5196              		.loc 1 4737 17 is_stmt 1 view .LVU1470
4737:./FreeRTOS/tasks.c ****                 {
 5197              		.loc 1 4737 19 is_stmt 0 view .LVU1471
 5198 0042 F6B1     		cbz	r6, .L362
4739:./FreeRTOS/tasks.c ****                 }
 5199              		.loc 1 4739 21 is_stmt 1 view .LVU1472
4739:./FreeRTOS/tasks.c ****                 }
 5200              		.loc 1 4739 33 is_stmt 0 view .LVU1473
 5201 0044 134B     		ldr	r3, .L365
 5202 0046 1B68     		ldr	r3, [r3]
4739:./FreeRTOS/tasks.c ****                 }
 5203              		.loc 1 4739 68 view .LVU1474
 5204 0048 03EB8203 		add	r3, r3, r2, lsl #2
 5205 004c 0022     		movs	r2, #0
 5206 004e 5A60     		str	r2, [r3, #4]
 5207              	.L361:
4748:./FreeRTOS/tasks.c ****             }
 5208              		.loc 1 4748 41 is_stmt 1 view .LVU1475
4751:./FreeRTOS/tasks.c ****         }
 5209              		.loc 1 4751 13 view .LVU1476
4751:./FreeRTOS/tasks.c ****         }
 5210              		.loc 1 4751 25 is_stmt 0 view .LVU1477
 5211 0050 104B     		ldr	r3, .L365
 5212 0052 1B68     		ldr	r3, [r3]
4751:./FreeRTOS/tasks.c ****         }
 5213              		.loc 1 4751 58 view .LVU1478
 5214 0054 2344     		add	r3, r3, r4
 5215 0056 0022     		movs	r2, #0
 5216 0058 83F85020 		strb	r2, [r3, #80]
4753:./FreeRTOS/tasks.c **** 
 5217              		.loc 1 4753 9 is_stmt 1 view .LVU1479
 5218 005c FFF7FEFF 		bl	vPortExitCritical
 5219              	.LVL381:
4755:./FreeRTOS/tasks.c ****     }
 5220              		.loc 1 4755 9 view .LVU1480
4756:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 215


 5221              		.loc 1 4756 5 is_stmt 0 view .LVU1481
 5222 0060 2846     		mov	r0, r5
 5223 0062 70BD     		pop	{r4, r5, r6, pc}
 5224              	.LVL382:
 5225              	.L364:
4709:./FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
 5226              		.loc 1 4709 21 is_stmt 1 view .LVU1482
 5227 0064 1146     		mov	r1, r2
 5228 0066 2846     		mov	r0, r5
 5229 0068 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5230              	.LVL383:
4710:./FreeRTOS/tasks.c **** 
 5231              		.loc 1 4710 65 view .LVU1483
4716:./FreeRTOS/tasks.c ****                 }
 5232              		.loc 1 4716 21 view .LVU1484
 5233 006c 4FF0E023 		mov	r3, #-536813568
 5234 0070 4FF08052 		mov	r2, #268435456
 5235 0074 C3F8042D 		str	r2, [r3, #3332]
4716:./FreeRTOS/tasks.c ****                 }
 5236              		.loc 1 4716 21 view .LVU1485
 5237              		.syntax unified
 5238              	@ 4716 "./FreeRTOS/tasks.c" 1
 5239 0078 BFF34F8F 		dsb
 5240              	@ 0 "" 2
4716:./FreeRTOS/tasks.c ****                 }
 5241              		.loc 1 4716 21 view .LVU1486
 5242              	@ 4716 "./FreeRTOS/tasks.c" 1
 5243 007c BFF36F8F 		isb
 5244              	@ 0 "" 2
4716:./FreeRTOS/tasks.c ****                 }
 5245              		.loc 1 4716 43 view .LVU1487
 5246              		.thumb
 5247              		.syntax unified
 5248 0080 D3E7     		b	.L360
 5249              	.LVL384:
 5250              	.L362:
4743:./FreeRTOS/tasks.c ****                 }
 5251              		.loc 1 4743 21 view .LVU1488
4743:./FreeRTOS/tasks.c ****                 }
 5252              		.loc 1 4743 33 is_stmt 0 view .LVU1489
 5253 0082 044B     		ldr	r3, .L365
 5254 0084 1B68     		ldr	r3, [r3]
4743:./FreeRTOS/tasks.c ****                 }
 5255              		.loc 1 4743 79 view .LVU1490
 5256 0086 6A1E     		subs	r2, r5, #1
4743:./FreeRTOS/tasks.c ****                 }
 5257              		.loc 1 4743 68 view .LVU1491
 5258 0088 04F11201 		add	r1, r4, #18
 5259 008c 03EB8103 		add	r3, r3, r1, lsl #2
 5260 0090 5A60     		str	r2, [r3, #4]
 5261 0092 DDE7     		b	.L361
 5262              	.L366:
 5263              		.align	2
 5264              	.L365:
 5265 0094 00000000 		.word	pxCurrentTCB
 5266              		.cfi_endproc
 5267              	.LFE79:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 216


 5269              		.section	.text.xTaskGenericNotifyWait,"ax",%progbits
 5270              		.align	1
 5271              		.global	xTaskGenericNotifyWait
 5272              		.syntax unified
 5273              		.thumb
 5274              		.thumb_func
 5276              	xTaskGenericNotifyWait:
 5277              	.LVL385:
 5278              	.LFB80:
4768:./FreeRTOS/tasks.c ****         BaseType_t xReturn;
 5279              		.loc 1 4768 5 is_stmt 1 view -0
 5280              		.cfi_startproc
 5281              		@ args = 4, pretend = 0, frame = 0
 5282              		@ frame_needed = 0, uses_anonymous_args = 0
4768:./FreeRTOS/tasks.c ****         BaseType_t xReturn;
 5283              		.loc 1 4768 5 is_stmt 0 view .LVU1493
 5284 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5285              	.LCFI47:
 5286              		.cfi_def_cfa_offset 24
 5287              		.cfi_offset 3, -24
 5288              		.cfi_offset 4, -20
 5289              		.cfi_offset 5, -16
 5290              		.cfi_offset 6, -12
 5291              		.cfi_offset 7, -8
 5292              		.cfi_offset 14, -4
 5293 0002 0446     		mov	r4, r0
 5294 0004 0F46     		mov	r7, r1
 5295 0006 1646     		mov	r6, r2
 5296 0008 1D46     		mov	r5, r3
4769:./FreeRTOS/tasks.c **** 
 5297              		.loc 1 4769 9 is_stmt 1 view .LVU1494
4771:./FreeRTOS/tasks.c **** 
 5298              		.loc 1 4771 78 view .LVU1495
4773:./FreeRTOS/tasks.c ****         {
 5299              		.loc 1 4773 9 view .LVU1496
 5300 000a FFF7FEFF 		bl	vPortEnterCritical
 5301              	.LVL386:
4776:./FreeRTOS/tasks.c ****             {
 5302              		.loc 1 4776 13 view .LVU1497
4776:./FreeRTOS/tasks.c ****             {
 5303              		.loc 1 4776 29 is_stmt 0 view .LVU1498
 5304 000e 2A4B     		ldr	r3, .L375
 5305 0010 1B68     		ldr	r3, [r3]
4776:./FreeRTOS/tasks.c ****             {
 5306              		.loc 1 4776 44 view .LVU1499
 5307 0012 2344     		add	r3, r3, r4
 5308 0014 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 5309 0018 DBB2     		uxtb	r3, r3
4776:./FreeRTOS/tasks.c ****             {
 5310              		.loc 1 4776 15 view .LVU1500
 5311 001a 022B     		cmp	r3, #2
 5312 001c 10D0     		beq	.L368
4781:./FreeRTOS/tasks.c **** 
 5313              		.loc 1 4781 17 is_stmt 1 view .LVU1501
4781:./FreeRTOS/tasks.c **** 
 5314              		.loc 1 4781 29 is_stmt 0 view .LVU1502
 5315 001e 2649     		ldr	r1, .L375
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 217


 5316 0020 0B68     		ldr	r3, [r1]
4781:./FreeRTOS/tasks.c **** 
 5317              		.loc 1 4781 46 view .LVU1503
 5318 0022 04F11202 		add	r2, r4, #18
 5319 0026 03EB8203 		add	r3, r3, r2, lsl #2
 5320 002a 5A68     		ldr	r2, [r3, #4]
4781:./FreeRTOS/tasks.c **** 
 5321              		.loc 1 4781 64 view .LVU1504
 5322 002c 22EA0702 		bic	r2, r2, r7
 5323 0030 5A60     		str	r2, [r3, #4]
4784:./FreeRTOS/tasks.c **** 
 5324              		.loc 1 4784 17 is_stmt 1 view .LVU1505
4784:./FreeRTOS/tasks.c **** 
 5325              		.loc 1 4784 29 is_stmt 0 view .LVU1506
 5326 0032 0B68     		ldr	r3, [r1]
4784:./FreeRTOS/tasks.c **** 
 5327              		.loc 1 4784 62 view .LVU1507
 5328 0034 2344     		add	r3, r3, r4
 5329 0036 0122     		movs	r2, #1
 5330 0038 83F85020 		strb	r2, [r3, #80]
4786:./FreeRTOS/tasks.c ****                 {
 5331              		.loc 1 4786 17 is_stmt 1 view .LVU1508
4786:./FreeRTOS/tasks.c ****                 {
 5332              		.loc 1 4786 19 is_stmt 0 view .LVU1509
 5333 003c 069B     		ldr	r3, [sp, #24]
 5334 003e FBB9     		cbnz	r3, .L373
 5335              	.LVL387:
 5336              	.L368:
4804:./FreeRTOS/tasks.c ****             }
 5337              		.loc 1 4804 41 is_stmt 1 view .LVU1510
4807:./FreeRTOS/tasks.c **** 
 5338              		.loc 1 4807 9 view .LVU1511
 5339 0040 FFF7FEFF 		bl	vPortExitCritical
 5340              	.LVL388:
4809:./FreeRTOS/tasks.c ****         {
 5341              		.loc 1 4809 9 view .LVU1512
 5342 0044 FFF7FEFF 		bl	vPortEnterCritical
 5343              	.LVL389:
4811:./FreeRTOS/tasks.c **** 
 5344              		.loc 1 4811 51 view .LVU1513
4813:./FreeRTOS/tasks.c ****             {
 5345              		.loc 1 4813 13 view .LVU1514
4813:./FreeRTOS/tasks.c ****             {
 5346              		.loc 1 4813 15 is_stmt 0 view .LVU1515
 5347 0048 3DB1     		cbz	r5, .L369
4817:./FreeRTOS/tasks.c ****             }
 5348              		.loc 1 4817 17 is_stmt 1 view .LVU1516
4817:./FreeRTOS/tasks.c ****             }
 5349              		.loc 1 4817 53 is_stmt 0 view .LVU1517
 5350 004a 1B4B     		ldr	r3, .L375
 5351 004c 1B68     		ldr	r3, [r3]
4817:./FreeRTOS/tasks.c ****             }
 5352              		.loc 1 4817 70 view .LVU1518
 5353 004e 04F11202 		add	r2, r4, #18
 5354 0052 03EB8203 		add	r3, r3, r2, lsl #2
 5355 0056 5B68     		ldr	r3, [r3, #4]
4817:./FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 218


 5356              		.loc 1 4817 39 view .LVU1519
 5357 0058 2B60     		str	r3, [r5]
 5358              	.L369:
4824:./FreeRTOS/tasks.c ****             {
 5359              		.loc 1 4824 13 is_stmt 1 view .LVU1520
4824:./FreeRTOS/tasks.c ****             {
 5360              		.loc 1 4824 29 is_stmt 0 view .LVU1521
 5361 005a 174B     		ldr	r3, .L375
 5362 005c 1B68     		ldr	r3, [r3]
4824:./FreeRTOS/tasks.c ****             {
 5363              		.loc 1 4824 44 view .LVU1522
 5364 005e 2344     		add	r3, r3, r4
 5365 0060 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 5366 0064 DBB2     		uxtb	r3, r3
4824:./FreeRTOS/tasks.c ****             {
 5367              		.loc 1 4824 15 view .LVU1523
 5368 0066 022B     		cmp	r3, #2
 5369 0068 19D0     		beq	.L374
4827:./FreeRTOS/tasks.c ****             }
 5370              		.loc 1 4827 25 view .LVU1524
 5371 006a 0025     		movs	r5, #0
 5372              	.LVL390:
 5373              	.L370:
4837:./FreeRTOS/tasks.c ****         }
 5374              		.loc 1 4837 13 is_stmt 1 view .LVU1525
4837:./FreeRTOS/tasks.c ****         }
 5375              		.loc 1 4837 25 is_stmt 0 view .LVU1526
 5376 006c 124B     		ldr	r3, .L375
 5377 006e 1B68     		ldr	r3, [r3]
4837:./FreeRTOS/tasks.c ****         }
 5378              		.loc 1 4837 58 view .LVU1527
 5379 0070 2344     		add	r3, r3, r4
 5380 0072 0022     		movs	r2, #0
 5381 0074 83F85020 		strb	r2, [r3, #80]
4839:./FreeRTOS/tasks.c **** 
 5382              		.loc 1 4839 9 is_stmt 1 view .LVU1528
 5383 0078 FFF7FEFF 		bl	vPortExitCritical
 5384              	.LVL391:
4841:./FreeRTOS/tasks.c ****     }
 5385              		.loc 1 4841 9 view .LVU1529
4842:./FreeRTOS/tasks.c **** 
 5386              		.loc 1 4842 5 is_stmt 0 view .LVU1530
 5387 007c 2846     		mov	r0, r5
 5388 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5389              	.LVL392:
 5390              	.L373:
4788:./FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
 5391              		.loc 1 4788 21 is_stmt 1 view .LVU1531
 5392 0080 1146     		mov	r1, r2
 5393 0082 1846     		mov	r0, r3
 5394 0084 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5395              	.LVL393:
4789:./FreeRTOS/tasks.c **** 
 5396              		.loc 1 4789 65 view .LVU1532
4795:./FreeRTOS/tasks.c ****                 }
 5397              		.loc 1 4795 21 view .LVU1533
 5398 0088 4FF0E023 		mov	r3, #-536813568
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 219


 5399 008c 4FF08052 		mov	r2, #268435456
 5400 0090 C3F8042D 		str	r2, [r3, #3332]
 5401              	.LVL394:
4795:./FreeRTOS/tasks.c ****                 }
 5402              		.loc 1 4795 21 view .LVU1534
 5403              		.syntax unified
 5404              	@ 4795 "./FreeRTOS/tasks.c" 1
 5405 0094 BFF34F8F 		dsb
 5406              	@ 0 "" 2
4795:./FreeRTOS/tasks.c ****                 }
 5407              		.loc 1 4795 21 view .LVU1535
 5408              	@ 4795 "./FreeRTOS/tasks.c" 1
 5409 0098 BFF36F8F 		isb
 5410              	@ 0 "" 2
4795:./FreeRTOS/tasks.c ****                 }
 5411              		.loc 1 4795 43 view .LVU1536
 5412              		.thumb
 5413              		.syntax unified
 5414 009c D0E7     		b	.L368
 5415              	.L374:
4833:./FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 5416              		.loc 1 4833 17 view .LVU1537
4833:./FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 5417              		.loc 1 4833 29 is_stmt 0 view .LVU1538
 5418 009e 064B     		ldr	r3, .L375
 5419 00a0 1B68     		ldr	r3, [r3]
4833:./FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 5420              		.loc 1 4833 46 view .LVU1539
 5421 00a2 04F11202 		add	r2, r4, #18
 5422 00a6 03EB8203 		add	r3, r3, r2, lsl #2
 5423 00aa 5A68     		ldr	r2, [r3, #4]
4833:./FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 5424              		.loc 1 4833 64 view .LVU1540
 5425 00ac 22EA0602 		bic	r2, r2, r6
 5426 00b0 5A60     		str	r2, [r3, #4]
4834:./FreeRTOS/tasks.c ****             }
 5427              		.loc 1 4834 17 is_stmt 1 view .LVU1541
 5428              	.LVL395:
4834:./FreeRTOS/tasks.c ****             }
 5429              		.loc 1 4834 25 is_stmt 0 view .LVU1542
 5430 00b2 0125     		movs	r5, #1
 5431              	.LVL396:
4834:./FreeRTOS/tasks.c ****             }
 5432              		.loc 1 4834 25 view .LVU1543
 5433 00b4 DAE7     		b	.L370
 5434              	.L376:
 5435 00b6 00BF     		.align	2
 5436              	.L375:
 5437 00b8 00000000 		.word	pxCurrentTCB
 5438              		.cfi_endproc
 5439              	.LFE80:
 5441              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5442              		.align	1
 5443              		.global	xTaskGenericNotify
 5444              		.syntax unified
 5445              		.thumb
 5446              		.thumb_func
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 220


 5448              	xTaskGenericNotify:
 5449              	.LVL397:
 5450              	.LFB81:
4854:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 5451              		.loc 1 4854 5 is_stmt 1 view -0
 5452              		.cfi_startproc
 5453              		@ args = 4, pretend = 0, frame = 0
 5454              		@ frame_needed = 0, uses_anonymous_args = 0
4854:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 5455              		.loc 1 4854 5 is_stmt 0 view .LVU1545
 5456 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 5457              	.LCFI48:
 5458              		.cfi_def_cfa_offset 24
 5459              		.cfi_offset 4, -24
 5460              		.cfi_offset 5, -20
 5461              		.cfi_offset 6, -16
 5462              		.cfi_offset 7, -12
 5463              		.cfi_offset 8, -8
 5464              		.cfi_offset 14, -4
 5465 0004 0446     		mov	r4, r0
 5466 0006 0D46     		mov	r5, r1
 5467 0008 1746     		mov	r7, r2
 5468 000a 1E46     		mov	r6, r3
 5469 000c DDF81880 		ldr	r8, [sp, #24]
4855:./FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 5470              		.loc 1 4855 9 is_stmt 1 view .LVU1546
4856:./FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 5471              		.loc 1 4856 9 view .LVU1547
 5472              	.LVL398:
4857:./FreeRTOS/tasks.c **** 
 5473              		.loc 1 4857 9 view .LVU1548
4859:./FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 5474              		.loc 1 4859 80 view .LVU1549
4860:./FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 5475              		.loc 1 4860 38 view .LVU1550
4861:./FreeRTOS/tasks.c **** 
 5476              		.loc 1 4861 9 view .LVU1551
4863:./FreeRTOS/tasks.c ****         {
 5477              		.loc 1 4863 9 view .LVU1552
 5478 0010 FFF7FEFF 		bl	vPortEnterCritical
 5479              	.LVL399:
4865:./FreeRTOS/tasks.c ****             {
 5480              		.loc 1 4865 13 view .LVU1553
4865:./FreeRTOS/tasks.c ****             {
 5481              		.loc 1 4865 15 is_stmt 0 view .LVU1554
 5482 0014 B8F1000F 		cmp	r8, #0
 5483 0018 06D0     		beq	.L378
4867:./FreeRTOS/tasks.c ****             }
 5484              		.loc 1 4867 17 is_stmt 1 view .LVU1555
4867:./FreeRTOS/tasks.c ****             }
 5485              		.loc 1 4867 71 is_stmt 0 view .LVU1556
 5486 001a 05F11203 		add	r3, r5, #18
 5487 001e 04EB8303 		add	r3, r4, r3, lsl #2
 5488 0022 5B68     		ldr	r3, [r3, #4]
4867:./FreeRTOS/tasks.c ****             }
 5489              		.loc 1 4867 47 view .LVU1557
 5490 0024 C8F80030 		str	r3, [r8]
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 221


 5491              	.L378:
4870:./FreeRTOS/tasks.c **** 
 5492              		.loc 1 4870 13 is_stmt 1 view .LVU1558
4870:./FreeRTOS/tasks.c **** 
 5493              		.loc 1 4870 35 is_stmt 0 view .LVU1559
 5494 0028 6319     		adds	r3, r4, r5
 5495 002a 93F85010 		ldrb	r1, [r3, #80]	@ zero_extendqisi2
 5496 002e C9B2     		uxtb	r1, r1
 5497              	.LVL400:
4872:./FreeRTOS/tasks.c **** 
 5498              		.loc 1 4872 13 is_stmt 1 view .LVU1560
4872:./FreeRTOS/tasks.c **** 
 5499              		.loc 1 4872 53 is_stmt 0 view .LVU1561
 5500 0030 0222     		movs	r2, #2
 5501 0032 83F85020 		strb	r2, [r3, #80]
4874:./FreeRTOS/tasks.c ****             {
 5502              		.loc 1 4874 13 is_stmt 1 view .LVU1562
 5503 0036 731E     		subs	r3, r6, #1
 5504 0038 032B     		cmp	r3, #3
 5505 003a 09D8     		bhi	.L379
 5506 003c DFE803F0 		tbb	[pc, r3]
 5507              	.L381:
 5508 0040 02       		.byte	(.L384-.L381)/2
 5509 0041 10       		.byte	(.L383-.L381)/2
 5510 0042 17       		.byte	(.L382-.L381)/2
 5511 0043 1C       		.byte	(.L380-.L381)/2
 5512              		.p2align 1
 5513              	.L384:
4877:./FreeRTOS/tasks.c ****                     break;
 5514              		.loc 1 4877 21 view .LVU1563
4877:./FreeRTOS/tasks.c ****                     break;
 5515              		.loc 1 4877 43 is_stmt 0 view .LVU1564
 5516 0044 1235     		adds	r5, r5, #18
 5517              	.LVL401:
4877:./FreeRTOS/tasks.c ****                     break;
 5518              		.loc 1 4877 43 view .LVU1565
 5519 0046 04EB8505 		add	r5, r4, r5, lsl #2
 5520              	.LVL402:
4877:./FreeRTOS/tasks.c ****                     break;
 5521              		.loc 1 4877 43 view .LVU1566
 5522 004a 6B68     		ldr	r3, [r5, #4]
4877:./FreeRTOS/tasks.c ****                     break;
 5523              		.loc 1 4877 63 view .LVU1567
 5524 004c 3B43     		orrs	r3, r3, r7
 5525 004e 6B60     		str	r3, [r5, #4]
4878:./FreeRTOS/tasks.c **** 
 5526              		.loc 1 4878 21 is_stmt 1 view .LVU1568
 5527              	.L379:
4918:./FreeRTOS/tasks.c **** 
 5528              		.loc 1 4918 48 view .LVU1569
4922:./FreeRTOS/tasks.c ****             {
 5529              		.loc 1 4922 13 view .LVU1570
4922:./FreeRTOS/tasks.c ****             {
 5530              		.loc 1 4922 15 is_stmt 0 view .LVU1571
 5531 0050 0129     		cmp	r1, #1
 5532 0052 18D0     		beq	.L392
 5533 0054 0124     		movs	r4, #1
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 222


 5534              	.LVL403:
 5535              	.L385:
4959:./FreeRTOS/tasks.c ****             }
 5536              		.loc 1 4959 41 is_stmt 1 view .LVU1572
4962:./FreeRTOS/tasks.c **** 
 5537              		.loc 1 4962 9 view .LVU1573
 5538 0056 FFF7FEFF 		bl	vPortExitCritical
 5539              	.LVL404:
4964:./FreeRTOS/tasks.c ****     }
 5540              		.loc 1 4964 9 view .LVU1574
4965:./FreeRTOS/tasks.c **** 
 5541              		.loc 1 4965 5 is_stmt 0 view .LVU1575
 5542 005a 2046     		mov	r0, r4
 5543 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 5544              	.LVL405:
 5545              	.L383:
4881:./FreeRTOS/tasks.c ****                     break;
 5546              		.loc 1 4881 21 is_stmt 1 view .LVU1576
4881:./FreeRTOS/tasks.c ****                     break;
 5547              		.loc 1 4881 45 is_stmt 0 view .LVU1577
 5548 0060 1235     		adds	r5, r5, #18
 5549              	.LVL406:
4881:./FreeRTOS/tasks.c ****                     break;
 5550              		.loc 1 4881 45 view .LVU1578
 5551 0062 04EB8505 		add	r5, r4, r5, lsl #2
 5552              	.LVL407:
4881:./FreeRTOS/tasks.c ****                     break;
 5553              		.loc 1 4881 45 view .LVU1579
 5554 0066 6B68     		ldr	r3, [r5, #4]
4881:./FreeRTOS/tasks.c ****                     break;
 5555              		.loc 1 4881 66 view .LVU1580
 5556 0068 0133     		adds	r3, r3, #1
 5557 006a 6B60     		str	r3, [r5, #4]
4882:./FreeRTOS/tasks.c **** 
 5558              		.loc 1 4882 21 is_stmt 1 view .LVU1581
 5559 006c F0E7     		b	.L379
 5560              	.LVL408:
 5561              	.L382:
4885:./FreeRTOS/tasks.c ****                     break;
 5562              		.loc 1 4885 21 view .LVU1582
4885:./FreeRTOS/tasks.c ****                     break;
 5563              		.loc 1 4885 63 is_stmt 0 view .LVU1583
 5564 006e 1235     		adds	r5, r5, #18
 5565              	.LVL409:
4885:./FreeRTOS/tasks.c ****                     break;
 5566              		.loc 1 4885 63 view .LVU1584
 5567 0070 04EB8505 		add	r5, r4, r5, lsl #2
 5568              	.LVL410:
4885:./FreeRTOS/tasks.c ****                     break;
 5569              		.loc 1 4885 63 view .LVU1585
 5570 0074 6F60     		str	r7, [r5, #4]
4886:./FreeRTOS/tasks.c **** 
 5571              		.loc 1 4886 21 is_stmt 1 view .LVU1586
 5572 0076 EBE7     		b	.L379
 5573              	.LVL411:
 5574              	.L380:
4890:./FreeRTOS/tasks.c ****                     {
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 223


 5575              		.loc 1 4890 21 view .LVU1587
4890:./FreeRTOS/tasks.c ****                     {
 5576              		.loc 1 4890 23 is_stmt 0 view .LVU1588
 5577 0078 0229     		cmp	r1, #2
 5578 007a 44D0     		beq	.L387
4892:./FreeRTOS/tasks.c ****                     }
 5579              		.loc 1 4892 25 is_stmt 1 view .LVU1589
4892:./FreeRTOS/tasks.c ****                     }
 5580              		.loc 1 4892 67 is_stmt 0 view .LVU1590
 5581 007c 1235     		adds	r5, r5, #18
 5582              	.LVL412:
4892:./FreeRTOS/tasks.c ****                     }
 5583              		.loc 1 4892 67 view .LVU1591
 5584 007e 04EB8505 		add	r5, r4, r5, lsl #2
 5585              	.LVL413:
4892:./FreeRTOS/tasks.c ****                     }
 5586              		.loc 1 4892 67 view .LVU1592
 5587 0082 6F60     		str	r7, [r5, #4]
 5588 0084 E4E7     		b	.L379
 5589              	.L392:
 5590              	.LBB100:
4924:./FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5591              		.loc 1 4924 17 is_stmt 1 view .LVU1593
 5592 0086 6369     		ldr	r3, [r4, #20]
 5593              	.LVL414:
4924:./FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5594              		.loc 1 4924 17 view .LVU1594
 5595 0088 A168     		ldr	r1, [r4, #8]
 5596              	.LVL415:
4924:./FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5597              		.loc 1 4924 17 is_stmt 0 view .LVU1595
 5598 008a E268     		ldr	r2, [r4, #12]
 5599 008c 8A60     		str	r2, [r1, #8]
4924:./FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5600              		.loc 1 4924 17 is_stmt 1 view .LVU1596
 5601 008e A168     		ldr	r1, [r4, #8]
 5602 0090 5160     		str	r1, [r2, #4]
4924:./FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5603              		.loc 1 4924 17 view .LVU1597
 5604 0092 5A68     		ldr	r2, [r3, #4]
 5605 0094 211D     		adds	r1, r4, #4
 5606 0096 8A42     		cmp	r2, r1
 5607 0098 32D0     		beq	.L393
 5608              	.L386:
4924:./FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5609              		.loc 1 4924 17 discriminator 3 view .LVU1598
 5610 009a 0022     		movs	r2, #0
 5611 009c 6261     		str	r2, [r4, #20]
4924:./FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5612              		.loc 1 4924 17 discriminator 3 view .LVU1599
 5613 009e 1A68     		ldr	r2, [r3]
 5614 00a0 013A     		subs	r2, r2, #1
 5615 00a2 1A60     		str	r2, [r3]
 5616              	.LBE100:
4924:./FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5617              		.loc 1 4924 62 discriminator 3 view .LVU1600
4925:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 224


 5618              		.loc 1 4925 17 discriminator 3 view .LVU1601
4925:./FreeRTOS/tasks.c **** 
 5619              		.loc 1 4925 17 discriminator 3 view .LVU1602
 5620 00a4 E36A     		ldr	r3, [r4, #44]
 5621              	.LVL416:
4925:./FreeRTOS/tasks.c **** 
 5622              		.loc 1 4925 17 is_stmt 0 discriminator 3 view .LVU1603
 5623 00a6 0122     		movs	r2, #1
 5624 00a8 9A40     		lsls	r2, r2, r3
 5625 00aa 1948     		ldr	r0, .L394
 5626 00ac 0568     		ldr	r5, [r0]
 5627 00ae 2A43     		orrs	r2, r2, r5
 5628 00b0 0260     		str	r2, [r0]
 5629              	.LBB101:
4925:./FreeRTOS/tasks.c **** 
 5630              		.loc 1 4925 17 is_stmt 1 discriminator 3 view .LVU1604
 5631 00b2 184A     		ldr	r2, .L394+4
 5632 00b4 03EB8303 		add	r3, r3, r3, lsl #2
 5633 00b8 02EB8303 		add	r3, r2, r3, lsl #2
 5634 00bc 5B68     		ldr	r3, [r3, #4]
 5635              	.LVL417:
4925:./FreeRTOS/tasks.c **** 
 5636              		.loc 1 4925 17 discriminator 3 view .LVU1605
4925:./FreeRTOS/tasks.c **** 
 5637              		.loc 1 4925 17 discriminator 3 view .LVU1606
4925:./FreeRTOS/tasks.c **** 
 5638              		.loc 1 4925 17 discriminator 3 view .LVU1607
 5639 00be A360     		str	r3, [r4, #8]
4925:./FreeRTOS/tasks.c **** 
 5640              		.loc 1 4925 17 discriminator 3 view .LVU1608
 5641 00c0 9868     		ldr	r0, [r3, #8]
 5642 00c2 E060     		str	r0, [r4, #12]
4925:./FreeRTOS/tasks.c **** 
 5643              		.loc 1 4925 17 discriminator 3 view .LVU1609
 5644 00c4 4160     		str	r1, [r0, #4]
4925:./FreeRTOS/tasks.c **** 
 5645              		.loc 1 4925 17 discriminator 3 view .LVU1610
 5646 00c6 9960     		str	r1, [r3, #8]
4925:./FreeRTOS/tasks.c **** 
 5647              		.loc 1 4925 17 discriminator 3 view .LVU1611
 5648 00c8 E36A     		ldr	r3, [r4, #44]
 5649              	.LVL418:
4925:./FreeRTOS/tasks.c **** 
 5650              		.loc 1 4925 17 is_stmt 0 discriminator 3 view .LVU1612
 5651 00ca 03EB8301 		add	r1, r3, r3, lsl #2
 5652 00ce 8800     		lsls	r0, r1, #2
 5653 00d0 02EB8101 		add	r1, r2, r1, lsl #2
 5654 00d4 6161     		str	r1, [r4, #20]
4925:./FreeRTOS/tasks.c **** 
 5655              		.loc 1 4925 17 is_stmt 1 discriminator 3 view .LVU1613
 5656 00d6 1158     		ldr	r1, [r2, r0]
 5657 00d8 0131     		adds	r1, r1, #1
 5658 00da 1150     		str	r1, [r2, r0]
 5659              	.LBE101:
4925:./FreeRTOS/tasks.c **** 
 5660              		.loc 1 4925 17 discriminator 3 view .LVU1614
4925:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 225


 5661              		.loc 1 4925 47 discriminator 3 view .LVU1615
4928:./FreeRTOS/tasks.c **** 
 5662              		.loc 1 4928 94 discriminator 3 view .LVU1616
4946:./FreeRTOS/tasks.c ****                 {
 5663              		.loc 1 4946 17 discriminator 3 view .LVU1617
4946:./FreeRTOS/tasks.c ****                 {
 5664              		.loc 1 4946 26 is_stmt 0 discriminator 3 view .LVU1618
 5665 00dc E26A     		ldr	r2, [r4, #44]
4946:./FreeRTOS/tasks.c ****                 {
 5666              		.loc 1 4946 53 discriminator 3 view .LVU1619
 5667 00de 0E4B     		ldr	r3, .L394+8
 5668 00e0 1B68     		ldr	r3, [r3]
 5669 00e2 DB6A     		ldr	r3, [r3, #44]
4946:./FreeRTOS/tasks.c ****                 {
 5670              		.loc 1 4946 19 discriminator 3 view .LVU1620
 5671 00e4 9A42     		cmp	r2, r3
 5672 00e6 10D9     		bls	.L389
4950:./FreeRTOS/tasks.c ****                 }
 5673              		.loc 1 4950 21 is_stmt 1 view .LVU1621
 5674 00e8 4FF0E023 		mov	r3, #-536813568
 5675 00ec 4FF08052 		mov	r2, #268435456
 5676 00f0 C3F8042D 		str	r2, [r3, #3332]
 5677              	.LVL419:
4950:./FreeRTOS/tasks.c ****                 }
 5678              		.loc 1 4950 21 view .LVU1622
 5679              		.syntax unified
 5680              	@ 4950 "./FreeRTOS/tasks.c" 1
 5681 00f4 BFF34F8F 		dsb
 5682              	@ 0 "" 2
4950:./FreeRTOS/tasks.c ****                 }
 5683              		.loc 1 4950 21 view .LVU1623
 5684              	@ 4950 "./FreeRTOS/tasks.c" 1
 5685 00f8 BFF36F8F 		isb
 5686              	@ 0 "" 2
4950:./FreeRTOS/tasks.c ****                 }
 5687              		.loc 1 4950 52 view .LVU1624
 5688              		.thumb
 5689              		.syntax unified
 5690 00fc 0124     		movs	r4, #1
 5691              	.LVL420:
4950:./FreeRTOS/tasks.c ****                 }
 5692              		.loc 1 4950 52 is_stmt 0 view .LVU1625
 5693 00fe AAE7     		b	.L385
 5694              	.LVL421:
 5695              	.L393:
 5696              	.LBB102:
4924:./FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5697              		.loc 1 4924 17 is_stmt 1 discriminator 1 view .LVU1626
 5698 0100 E268     		ldr	r2, [r4, #12]
 5699 0102 5A60     		str	r2, [r3, #4]
 5700 0104 C9E7     		b	.L386
 5701              	.LVL422:
 5702              	.L387:
4924:./FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5703              		.loc 1 4924 17 is_stmt 0 discriminator 1 view .LVU1627
 5704              	.LBE102:
4897:./FreeRTOS/tasks.c ****                     }
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 226


 5705              		.loc 1 4897 33 view .LVU1628
 5706 0106 0024     		movs	r4, #0
 5707              	.LVL423:
4897:./FreeRTOS/tasks.c ****                     }
 5708              		.loc 1 4897 33 view .LVU1629
 5709 0108 A5E7     		b	.L385
 5710              	.LVL424:
 5711              	.L389:
4897:./FreeRTOS/tasks.c ****                     }
 5712              		.loc 1 4897 33 view .LVU1630
 5713 010a 0124     		movs	r4, #1
 5714              	.LVL425:
4897:./FreeRTOS/tasks.c ****                     }
 5715              		.loc 1 4897 33 view .LVU1631
 5716 010c A3E7     		b	.L385
 5717              	.L395:
 5718 010e 00BF     		.align	2
 5719              	.L394:
 5720 0110 00000000 		.word	uxTopReadyPriority
 5721 0114 00000000 		.word	pxReadyTasksLists
 5722 0118 00000000 		.word	pxCurrentTCB
 5723              		.cfi_endproc
 5724              	.LFE81:
 5726              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5727              		.align	1
 5728              		.global	xTaskGenericNotifyFromISR
 5729              		.syntax unified
 5730              		.thumb
 5731              		.thumb_func
 5733              	xTaskGenericNotifyFromISR:
 5734              	.LVL426:
 5735              	.LFB82:
4978:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 5736              		.loc 1 4978 5 is_stmt 1 view -0
 5737              		.cfi_startproc
 5738              		@ args = 8, pretend = 0, frame = 0
 5739              		@ frame_needed = 0, uses_anonymous_args = 0
4978:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 5740              		.loc 1 4978 5 is_stmt 0 view .LVU1633
 5741 0000 30B5     		push	{r4, r5, lr}
 5742              	.LCFI49:
 5743              		.cfi_def_cfa_offset 12
 5744              		.cfi_offset 4, -12
 5745              		.cfi_offset 5, -8
 5746              		.cfi_offset 14, -4
 5747 0002 039C     		ldr	r4, [sp, #12]
4979:./FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 5748              		.loc 1 4979 9 is_stmt 1 view .LVU1634
4980:./FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 5749              		.loc 1 4980 9 view .LVU1635
4981:./FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 5750              		.loc 1 4981 9 view .LVU1636
 5751              	.LVL427:
4982:./FreeRTOS/tasks.c **** 
 5752              		.loc 1 4982 9 view .LVU1637
4984:./FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 5753              		.loc 1 4984 38 view .LVU1638
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 227


4985:./FreeRTOS/tasks.c **** 
 5754              		.loc 1 4985 80 view .LVU1639
5003:./FreeRTOS/tasks.c **** 
 5755              		.loc 1 5003 51 view .LVU1640
5005:./FreeRTOS/tasks.c **** 
 5756              		.loc 1 5005 9 view .LVU1641
5007:./FreeRTOS/tasks.c ****         {
 5757              		.loc 1 5007 9 view .LVU1642
 5758              	.LBB103:
 5759              	.LBI103:
 216:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 5760              		.loc 2 216 38 view .LVU1643
 5761              	.LBB104:
 218:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 5762              		.loc 2 218 9 view .LVU1644
 220:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 5763              		.loc 2 220 9 view .LVU1645
 5764              		.syntax unified
 5765              	@ 220 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 5766 0004 EFF3118C 			mrs ip, basepri											
 5767 0008 4FF0BF05 		mov r5, #191												
 5768 000c 85F31188 		msr basepri, r5											
 5769 0010 BFF36F8F 		isb														
 5770 0014 BFF34F8F 		dsb														
 5771              	
 5772              	@ 0 "" 2
 5773              	.LVL428:
 232:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 5774              		.loc 2 232 9 view .LVU1646
 232:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 5775              		.loc 2 232 9 is_stmt 0 view .LVU1647
 5776              		.thumb
 5777              		.syntax unified
 5778              	.LBE104:
 5779              	.LBE103:
5009:./FreeRTOS/tasks.c ****             {
 5780              		.loc 1 5009 13 is_stmt 1 view .LVU1648
5009:./FreeRTOS/tasks.c ****             {
 5781              		.loc 1 5009 15 is_stmt 0 view .LVU1649
 5782 0018 34B1     		cbz	r4, .L397
5011:./FreeRTOS/tasks.c ****             }
 5783              		.loc 1 5011 17 is_stmt 1 view .LVU1650
5011:./FreeRTOS/tasks.c ****             }
 5784              		.loc 1 5011 71 is_stmt 0 view .LVU1651
 5785 001a 01F1120E 		add	lr, r1, #18
 5786 001e 00EB8E0E 		add	lr, r0, lr, lsl #2
 5787 0022 DEF80450 		ldr	r5, [lr, #4]
5011:./FreeRTOS/tasks.c ****             }
 5788              		.loc 1 5011 47 view .LVU1652
 5789 0026 2560     		str	r5, [r4]
 5790              	.L397:
5014:./FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 5791              		.loc 1 5014 13 is_stmt 1 view .LVU1653
5014:./FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 5792              		.loc 1 5014 35 is_stmt 0 view .LVU1654
 5793 0028 00EB010E 		add	lr, r0, r1
 5794 002c 9EF85040 		ldrb	r4, [lr, #80]	@ zero_extendqisi2
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 228


 5795 0030 E5B2     		uxtb	r5, r4
 5796              	.LVL429:
5015:./FreeRTOS/tasks.c **** 
 5797              		.loc 1 5015 13 is_stmt 1 view .LVU1655
5015:./FreeRTOS/tasks.c **** 
 5798              		.loc 1 5015 53 is_stmt 0 view .LVU1656
 5799 0032 0224     		movs	r4, #2
 5800 0034 8EF85040 		strb	r4, [lr, #80]
5017:./FreeRTOS/tasks.c ****             {
 5801              		.loc 1 5017 13 is_stmt 1 view .LVU1657
 5802 0038 013B     		subs	r3, r3, #1
 5803              	.LVL430:
5017:./FreeRTOS/tasks.c ****             {
 5804              		.loc 1 5017 13 is_stmt 0 view .LVU1658
 5805 003a 032B     		cmp	r3, #3
 5806 003c 09D8     		bhi	.L398
 5807 003e DFE803F0 		tbb	[pc, r3]
 5808              	.L400:
 5809 0042 02       		.byte	(.L403-.L400)/2
 5810 0043 0E       		.byte	(.L402-.L400)/2
 5811 0044 15       		.byte	(.L401-.L400)/2
 5812 0045 1A       		.byte	(.L399-.L400)/2
 5813              		.p2align 1
 5814              	.L403:
5020:./FreeRTOS/tasks.c ****                     break;
 5815              		.loc 1 5020 21 is_stmt 1 view .LVU1659
5020:./FreeRTOS/tasks.c ****                     break;
 5816              		.loc 1 5020 43 is_stmt 0 view .LVU1660
 5817 0046 1231     		adds	r1, r1, #18
 5818              	.LVL431:
5020:./FreeRTOS/tasks.c ****                     break;
 5819              		.loc 1 5020 43 view .LVU1661
 5820 0048 00EB8101 		add	r1, r0, r1, lsl #2
 5821              	.LVL432:
5020:./FreeRTOS/tasks.c ****                     break;
 5822              		.loc 1 5020 43 view .LVU1662
 5823 004c 4B68     		ldr	r3, [r1, #4]
5020:./FreeRTOS/tasks.c ****                     break;
 5824              		.loc 1 5020 63 view .LVU1663
 5825 004e 1343     		orrs	r3, r3, r2
 5826 0050 4B60     		str	r3, [r1, #4]
5021:./FreeRTOS/tasks.c **** 
 5827              		.loc 1 5021 21 is_stmt 1 view .LVU1664
 5828              	.L398:
5060:./FreeRTOS/tasks.c **** 
 5829              		.loc 1 5060 57 view .LVU1665
5064:./FreeRTOS/tasks.c ****             {
 5830              		.loc 1 5064 13 view .LVU1666
5064:./FreeRTOS/tasks.c ****             {
 5831              		.loc 1 5064 15 is_stmt 0 view .LVU1667
 5832 0052 012D     		cmp	r5, #1
 5833 0054 16D0     		beq	.L414
 5834 0056 0120     		movs	r0, #1
 5835              	.LVL433:
 5836              	.L404:
5097:./FreeRTOS/tasks.c ****                 }
 5837              		.loc 1 5097 45 is_stmt 1 view .LVU1668
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 229


5101:./FreeRTOS/tasks.c **** 
 5838              		.loc 1 5101 9 view .LVU1669
 5839              	.LBB105:
 5840              	.LBI105:
 236:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 5841              		.loc 2 236 34 view .LVU1670
 5842              	.LBB106:
 5843              		.loc 2 238 9 view .LVU1671
 5844              		.syntax unified
 5845              	@ 238 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 5846 0058 8CF31188 			msr basepri, ip	
 5847              	@ 0 "" 2
 5848              		.thumb
 5849              		.syntax unified
 5850              	.LBE106:
 5851              	.LBE105:
5103:./FreeRTOS/tasks.c ****     }
 5852              		.loc 1 5103 9 view .LVU1672
5104:./FreeRTOS/tasks.c **** 
 5853              		.loc 1 5104 5 is_stmt 0 view .LVU1673
 5854 005c 30BD     		pop	{r4, r5, pc}
 5855              	.LVL434:
 5856              	.L402:
5024:./FreeRTOS/tasks.c ****                     break;
 5857              		.loc 1 5024 21 is_stmt 1 view .LVU1674
5024:./FreeRTOS/tasks.c ****                     break;
 5858              		.loc 1 5024 45 is_stmt 0 view .LVU1675
 5859 005e 1231     		adds	r1, r1, #18
 5860              	.LVL435:
5024:./FreeRTOS/tasks.c ****                     break;
 5861              		.loc 1 5024 45 view .LVU1676
 5862 0060 00EB8101 		add	r1, r0, r1, lsl #2
 5863              	.LVL436:
5024:./FreeRTOS/tasks.c ****                     break;
 5864              		.loc 1 5024 45 view .LVU1677
 5865 0064 4B68     		ldr	r3, [r1, #4]
5024:./FreeRTOS/tasks.c ****                     break;
 5866              		.loc 1 5024 66 view .LVU1678
 5867 0066 0133     		adds	r3, r3, #1
 5868 0068 4B60     		str	r3, [r1, #4]
5025:./FreeRTOS/tasks.c **** 
 5869              		.loc 1 5025 21 is_stmt 1 view .LVU1679
 5870 006a F2E7     		b	.L398
 5871              	.LVL437:
 5872              	.L401:
5028:./FreeRTOS/tasks.c ****                     break;
 5873              		.loc 1 5028 21 view .LVU1680
5028:./FreeRTOS/tasks.c ****                     break;
 5874              		.loc 1 5028 63 is_stmt 0 view .LVU1681
 5875 006c 1231     		adds	r1, r1, #18
 5876              	.LVL438:
5028:./FreeRTOS/tasks.c ****                     break;
 5877              		.loc 1 5028 63 view .LVU1682
 5878 006e 00EB8101 		add	r1, r0, r1, lsl #2
 5879              	.LVL439:
5028:./FreeRTOS/tasks.c ****                     break;
 5880              		.loc 1 5028 63 view .LVU1683
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 230


 5881 0072 4A60     		str	r2, [r1, #4]
5029:./FreeRTOS/tasks.c **** 
 5882              		.loc 1 5029 21 is_stmt 1 view .LVU1684
 5883 0074 EDE7     		b	.L398
 5884              	.LVL440:
 5885              	.L399:
5033:./FreeRTOS/tasks.c ****                     {
 5886              		.loc 1 5033 21 view .LVU1685
5033:./FreeRTOS/tasks.c ****                     {
 5887              		.loc 1 5033 23 is_stmt 0 view .LVU1686
 5888 0076 022D     		cmp	r5, #2
 5889 0078 53D0     		beq	.L409
5035:./FreeRTOS/tasks.c ****                     }
 5890              		.loc 1 5035 25 is_stmt 1 view .LVU1687
5035:./FreeRTOS/tasks.c ****                     }
 5891              		.loc 1 5035 67 is_stmt 0 view .LVU1688
 5892 007a 1231     		adds	r1, r1, #18
 5893              	.LVL441:
5035:./FreeRTOS/tasks.c ****                     }
 5894              		.loc 1 5035 67 view .LVU1689
 5895 007c 00EB8101 		add	r1, r0, r1, lsl #2
 5896              	.LVL442:
5035:./FreeRTOS/tasks.c ****                     }
 5897              		.loc 1 5035 67 view .LVU1690
 5898 0080 4A60     		str	r2, [r1, #4]
 5899 0082 E6E7     		b	.L398
 5900              	.L414:
5067:./FreeRTOS/tasks.c **** 
 5901              		.loc 1 5067 94 is_stmt 1 view .LVU1691
5069:./FreeRTOS/tasks.c ****                 {
 5902              		.loc 1 5069 17 view .LVU1692
5069:./FreeRTOS/tasks.c ****                 {
 5903              		.loc 1 5069 42 is_stmt 0 view .LVU1693
 5904 0084 294B     		ldr	r3, .L416
 5905 0086 1B68     		ldr	r3, [r3]
5069:./FreeRTOS/tasks.c ****                 {
 5906              		.loc 1 5069 19 view .LVU1694
 5907 0088 002B     		cmp	r3, #0
 5908 008a 3CD1     		bne	.L405
 5909              	.LBB107:
5071:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 5910              		.loc 1 5071 21 is_stmt 1 view .LVU1695
 5911 008c 4369     		ldr	r3, [r0, #20]
 5912              	.LVL443:
5071:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 5913              		.loc 1 5071 21 view .LVU1696
 5914 008e 8168     		ldr	r1, [r0, #8]
 5915 0090 C268     		ldr	r2, [r0, #12]
 5916              	.LVL444:
5071:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 5917              		.loc 1 5071 21 is_stmt 0 view .LVU1697
 5918 0092 8A60     		str	r2, [r1, #8]
5071:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 5919              		.loc 1 5071 21 is_stmt 1 view .LVU1698
 5920 0094 8168     		ldr	r1, [r0, #8]
 5921 0096 5160     		str	r1, [r2, #4]
5071:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 231


 5922              		.loc 1 5071 21 view .LVU1699
 5923 0098 5A68     		ldr	r2, [r3, #4]
 5924 009a 011D     		adds	r1, r0, #4
 5925 009c 8A42     		cmp	r2, r1
 5926 009e 2FD0     		beq	.L415
 5927              	.L406:
5071:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 5928              		.loc 1 5071 21 discriminator 3 view .LVU1700
 5929 00a0 0022     		movs	r2, #0
 5930 00a2 4261     		str	r2, [r0, #20]
5071:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 5931              		.loc 1 5071 21 discriminator 3 view .LVU1701
 5932 00a4 1A68     		ldr	r2, [r3]
 5933 00a6 013A     		subs	r2, r2, #1
 5934 00a8 1A60     		str	r2, [r3]
 5935              	.LBE107:
5071:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 5936              		.loc 1 5071 66 discriminator 3 view .LVU1702
5072:./FreeRTOS/tasks.c ****                 }
 5937              		.loc 1 5072 21 discriminator 3 view .LVU1703
5072:./FreeRTOS/tasks.c ****                 }
 5938              		.loc 1 5072 21 discriminator 3 view .LVU1704
 5939 00aa C36A     		ldr	r3, [r0, #44]
 5940              	.LVL445:
5072:./FreeRTOS/tasks.c ****                 }
 5941              		.loc 1 5072 21 is_stmt 0 discriminator 3 view .LVU1705
 5942 00ac 0122     		movs	r2, #1
 5943 00ae 9A40     		lsls	r2, r2, r3
 5944 00b0 1F4C     		ldr	r4, .L416+4
 5945 00b2 2568     		ldr	r5, [r4]
 5946              	.LVL446:
5072:./FreeRTOS/tasks.c ****                 }
 5947              		.loc 1 5072 21 discriminator 3 view .LVU1706
 5948 00b4 2A43     		orrs	r2, r2, r5
 5949 00b6 2260     		str	r2, [r4]
 5950              	.LBB108:
5072:./FreeRTOS/tasks.c ****                 }
 5951              		.loc 1 5072 21 is_stmt 1 discriminator 3 view .LVU1707
 5952 00b8 1E4A     		ldr	r2, .L416+8
 5953 00ba 03EB8303 		add	r3, r3, r3, lsl #2
 5954 00be 02EB8303 		add	r3, r2, r3, lsl #2
 5955 00c2 5B68     		ldr	r3, [r3, #4]
 5956              	.LVL447:
5072:./FreeRTOS/tasks.c ****                 }
 5957              		.loc 1 5072 21 discriminator 3 view .LVU1708
5072:./FreeRTOS/tasks.c ****                 }
 5958              		.loc 1 5072 21 discriminator 3 view .LVU1709
5072:./FreeRTOS/tasks.c ****                 }
 5959              		.loc 1 5072 21 discriminator 3 view .LVU1710
 5960 00c4 8360     		str	r3, [r0, #8]
5072:./FreeRTOS/tasks.c ****                 }
 5961              		.loc 1 5072 21 discriminator 3 view .LVU1711
 5962 00c6 9C68     		ldr	r4, [r3, #8]
 5963 00c8 C460     		str	r4, [r0, #12]
5072:./FreeRTOS/tasks.c ****                 }
 5964              		.loc 1 5072 21 discriminator 3 view .LVU1712
 5965 00ca 6160     		str	r1, [r4, #4]
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 232


5072:./FreeRTOS/tasks.c ****                 }
 5966              		.loc 1 5072 21 discriminator 3 view .LVU1713
 5967 00cc 9960     		str	r1, [r3, #8]
5072:./FreeRTOS/tasks.c ****                 }
 5968              		.loc 1 5072 21 discriminator 3 view .LVU1714
 5969 00ce C36A     		ldr	r3, [r0, #44]
 5970              	.LVL448:
5072:./FreeRTOS/tasks.c ****                 }
 5971              		.loc 1 5072 21 is_stmt 0 discriminator 3 view .LVU1715
 5972 00d0 03EB8301 		add	r1, r3, r3, lsl #2
 5973 00d4 8C00     		lsls	r4, r1, #2
 5974 00d6 02EB8101 		add	r1, r2, r1, lsl #2
 5975 00da 4161     		str	r1, [r0, #20]
5072:./FreeRTOS/tasks.c ****                 }
 5976              		.loc 1 5072 21 is_stmt 1 discriminator 3 view .LVU1716
 5977 00dc 1159     		ldr	r1, [r2, r4]
 5978 00de 0131     		adds	r1, r1, #1
 5979 00e0 1151     		str	r1, [r2, r4]
 5980              	.LBE108:
5072:./FreeRTOS/tasks.c ****                 }
 5981              		.loc 1 5072 21 discriminator 3 view .LVU1717
5072:./FreeRTOS/tasks.c ****                 }
 5982              		.loc 1 5072 51 discriminator 3 view .LVU1718
 5983              	.LVL449:
 5984              	.L407:
5078:./FreeRTOS/tasks.c ****                 }
 5985              		.loc 1 5078 89 discriminator 1 view .LVU1719
5081:./FreeRTOS/tasks.c ****                 {
 5986              		.loc 1 5081 17 discriminator 1 view .LVU1720
5081:./FreeRTOS/tasks.c ****                 {
 5987              		.loc 1 5081 26 is_stmt 0 discriminator 1 view .LVU1721
 5988 00e2 C26A     		ldr	r2, [r0, #44]
5081:./FreeRTOS/tasks.c ****                 {
 5989              		.loc 1 5081 53 discriminator 1 view .LVU1722
 5990 00e4 144B     		ldr	r3, .L416+12
 5991 00e6 1B68     		ldr	r3, [r3]
 5992 00e8 DB6A     		ldr	r3, [r3, #44]
5081:./FreeRTOS/tasks.c ****                 {
 5993              		.loc 1 5081 19 discriminator 1 view .LVU1723
 5994 00ea 9A42     		cmp	r2, r3
 5995 00ec 1BD9     		bls	.L411
5085:./FreeRTOS/tasks.c ****                     {
 5996              		.loc 1 5085 21 is_stmt 1 view .LVU1724
5085:./FreeRTOS/tasks.c ****                     {
 5997              		.loc 1 5085 23 is_stmt 0 view .LVU1725
 5998 00ee 049B     		ldr	r3, [sp, #16]
 5999 00f0 13B1     		cbz	r3, .L408
5087:./FreeRTOS/tasks.c ****                     }
 6000              		.loc 1 5087 25 is_stmt 1 view .LVU1726
5087:./FreeRTOS/tasks.c ****                     }
 6001              		.loc 1 5087 52 is_stmt 0 view .LVU1727
 6002 00f2 0123     		movs	r3, #1
 6003 00f4 049A     		ldr	r2, [sp, #16]
 6004 00f6 1360     		str	r3, [r2]
 6005              	.L408:
5093:./FreeRTOS/tasks.c ****                 }
 6006              		.loc 1 5093 21 is_stmt 1 view .LVU1728
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 233


5093:./FreeRTOS/tasks.c ****                 }
 6007              		.loc 1 5093 35 is_stmt 0 view .LVU1729
 6008 00f8 0120     		movs	r0, #1
 6009              	.LVL450:
5093:./FreeRTOS/tasks.c ****                 }
 6010              		.loc 1 5093 35 view .LVU1730
 6011 00fa 104B     		ldr	r3, .L416+16
 6012 00fc 1860     		str	r0, [r3]
 6013 00fe ABE7     		b	.L404
 6014              	.LVL451:
 6015              	.L415:
 6016              	.LBB109:
5071:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6017              		.loc 1 5071 21 is_stmt 1 discriminator 1 view .LVU1731
 6018 0100 C268     		ldr	r2, [r0, #12]
 6019 0102 5A60     		str	r2, [r3, #4]
 6020 0104 CCE7     		b	.L406
 6021              	.LVL452:
 6022              	.L405:
5071:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6023              		.loc 1 5071 21 is_stmt 0 discriminator 1 view .LVU1732
 6024              	.LBE109:
 6025              	.LBB110:
5078:./FreeRTOS/tasks.c ****                 }
 6026              		.loc 1 5078 21 is_stmt 1 view .LVU1733
 6027 0106 0E4B     		ldr	r3, .L416+20
 6028 0108 5A68     		ldr	r2, [r3, #4]
 6029              	.LVL453:
5078:./FreeRTOS/tasks.c ****                 }
 6030              		.loc 1 5078 21 view .LVU1734
5078:./FreeRTOS/tasks.c ****                 }
 6031              		.loc 1 5078 21 view .LVU1735
5078:./FreeRTOS/tasks.c ****                 }
 6032              		.loc 1 5078 21 view .LVU1736
 6033 010a C261     		str	r2, [r0, #28]
5078:./FreeRTOS/tasks.c ****                 }
 6034              		.loc 1 5078 21 view .LVU1737
 6035 010c 9468     		ldr	r4, [r2, #8]
 6036 010e 0462     		str	r4, [r0, #32]
5078:./FreeRTOS/tasks.c ****                 }
 6037              		.loc 1 5078 21 view .LVU1738
 6038 0110 00F11801 		add	r1, r0, #24
 6039 0114 6160     		str	r1, [r4, #4]
5078:./FreeRTOS/tasks.c ****                 }
 6040              		.loc 1 5078 21 view .LVU1739
 6041 0116 9160     		str	r1, [r2, #8]
5078:./FreeRTOS/tasks.c ****                 }
 6042              		.loc 1 5078 21 view .LVU1740
 6043 0118 8362     		str	r3, [r0, #40]
5078:./FreeRTOS/tasks.c ****                 }
 6044              		.loc 1 5078 21 view .LVU1741
 6045 011a 1A68     		ldr	r2, [r3]
 6046              	.LVL454:
5078:./FreeRTOS/tasks.c ****                 }
 6047              		.loc 1 5078 21 is_stmt 0 view .LVU1742
 6048 011c 0132     		adds	r2, r2, #1
 6049 011e 1A60     		str	r2, [r3]
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 234


 6050 0120 DFE7     		b	.L407
 6051              	.LVL455:
 6052              	.L409:
5078:./FreeRTOS/tasks.c ****                 }
 6053              		.loc 1 5078 21 view .LVU1743
 6054              	.LBE110:
5040:./FreeRTOS/tasks.c ****                     }
 6055              		.loc 1 5040 33 view .LVU1744
 6056 0122 0020     		movs	r0, #0
 6057              	.LVL456:
5040:./FreeRTOS/tasks.c ****                     }
 6058              		.loc 1 5040 33 view .LVU1745
 6059 0124 98E7     		b	.L404
 6060              	.LVL457:
 6061              	.L411:
5040:./FreeRTOS/tasks.c ****                     }
 6062              		.loc 1 5040 33 view .LVU1746
 6063 0126 0120     		movs	r0, #1
 6064              	.LVL458:
5040:./FreeRTOS/tasks.c ****                     }
 6065              		.loc 1 5040 33 view .LVU1747
 6066 0128 96E7     		b	.L404
 6067              	.L417:
 6068 012a 00BF     		.align	2
 6069              	.L416:
 6070 012c 00000000 		.word	uxSchedulerSuspended
 6071 0130 00000000 		.word	uxTopReadyPriority
 6072 0134 00000000 		.word	pxReadyTasksLists
 6073 0138 00000000 		.word	pxCurrentTCB
 6074 013c 00000000 		.word	xYieldPending
 6075 0140 00000000 		.word	xPendingReadyList
 6076              		.cfi_endproc
 6077              	.LFE82:
 6079              		.section	.text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 6080              		.align	1
 6081              		.global	vTaskGenericNotifyGiveFromISR
 6082              		.syntax unified
 6083              		.thumb
 6084              		.thumb_func
 6086              	vTaskGenericNotifyGiveFromISR:
 6087              	.LVL459:
 6088              	.LFB83:
5114:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6089              		.loc 1 5114 5 is_stmt 1 view -0
 6090              		.cfi_startproc
 6091              		@ args = 0, pretend = 0, frame = 0
 6092              		@ frame_needed = 0, uses_anonymous_args = 0
5114:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6093              		.loc 1 5114 5 is_stmt 0 view .LVU1749
 6094 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6095              	.LCFI50:
 6096              		.cfi_def_cfa_offset 20
 6097              		.cfi_offset 4, -20
 6098              		.cfi_offset 5, -16
 6099              		.cfi_offset 6, -12
 6100              		.cfi_offset 7, -8
 6101              		.cfi_offset 14, -4
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 235


5115:./FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 6102              		.loc 1 5115 9 is_stmt 1 view .LVU1750
5116:./FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 6103              		.loc 1 5116 9 view .LVU1751
5117:./FreeRTOS/tasks.c **** 
 6104              		.loc 1 5117 9 view .LVU1752
5119:./FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6105              		.loc 1 5119 38 view .LVU1753
5120:./FreeRTOS/tasks.c **** 
 6106              		.loc 1 5120 80 view .LVU1754
5138:./FreeRTOS/tasks.c **** 
 6107              		.loc 1 5138 51 view .LVU1755
5140:./FreeRTOS/tasks.c **** 
 6108              		.loc 1 5140 9 view .LVU1756
 6109              	.LVL460:
5142:./FreeRTOS/tasks.c ****         {
 6110              		.loc 1 5142 9 view .LVU1757
 6111              	.LBB111:
 6112              	.LBI111:
 216:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 6113              		.loc 2 216 38 view .LVU1758
 6114              	.LBB112:
 218:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 6115              		.loc 2 218 9 view .LVU1759
 220:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 6116              		.loc 2 220 9 view .LVU1760
 6117              		.syntax unified
 6118              	@ 220 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 6119 0002 EFF31183 			mrs r3, basepri											
 6120 0006 4FF0BF04 		mov r4, #191												
 6121 000a 84F31188 		msr basepri, r4											
 6122 000e BFF36F8F 		isb														
 6123 0012 BFF34F8F 		dsb														
 6124              	
 6125              	@ 0 "" 2
 6126              	.LVL461:
 232:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 6127              		.loc 2 232 9 view .LVU1761
 232:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 6128              		.loc 2 232 9 is_stmt 0 view .LVU1762
 6129              		.thumb
 6130              		.syntax unified
 6131              	.LBE112:
 6132              	.LBE111:
5144:./FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6133              		.loc 1 5144 13 is_stmt 1 view .LVU1763
5144:./FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6134              		.loc 1 5144 35 is_stmt 0 view .LVU1764
 6135 0016 4418     		adds	r4, r0, r1
 6136 0018 94F850C0 		ldrb	ip, [r4, #80]	@ zero_extendqisi2
 6137 001c 5FFA8CFC 		uxtb	ip, ip
 6138              	.LVL462:
5145:./FreeRTOS/tasks.c **** 
 6139              		.loc 1 5145 13 is_stmt 1 view .LVU1765
5145:./FreeRTOS/tasks.c **** 
 6140              		.loc 1 5145 53 is_stmt 0 view .LVU1766
 6141 0020 4FF0020E 		mov	lr, #2
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 236


 6142 0024 84F850E0 		strb	lr, [r4, #80]
5149:./FreeRTOS/tasks.c **** 
 6143              		.loc 1 5149 13 is_stmt 1 view .LVU1767
5149:./FreeRTOS/tasks.c **** 
 6144              		.loc 1 5149 37 is_stmt 0 view .LVU1768
 6145 0028 1231     		adds	r1, r1, #18
 6146              	.LVL463:
5149:./FreeRTOS/tasks.c **** 
 6147              		.loc 1 5149 37 view .LVU1769
 6148 002a 00EB8101 		add	r1, r0, r1, lsl #2
 6149              	.LVL464:
5149:./FreeRTOS/tasks.c **** 
 6150              		.loc 1 5149 37 view .LVU1770
 6151 002e 4C68     		ldr	r4, [r1, #4]
5149:./FreeRTOS/tasks.c **** 
 6152              		.loc 1 5149 58 view .LVU1771
 6153 0030 0134     		adds	r4, r4, #1
 6154 0032 4C60     		str	r4, [r1, #4]
5151:./FreeRTOS/tasks.c **** 
 6155              		.loc 1 5151 62 is_stmt 1 view .LVU1772
5155:./FreeRTOS/tasks.c ****             {
 6156              		.loc 1 5155 13 view .LVU1773
5155:./FreeRTOS/tasks.c ****             {
 6157              		.loc 1 5155 15 is_stmt 0 view .LVU1774
 6158 0034 BCF1010F 		cmp	ip, #1
 6159 0038 02D0     		beq	.L425
 6160              	.LVL465:
 6161              	.L419:
5188:./FreeRTOS/tasks.c ****                 }
 6162              		.loc 1 5188 45 is_stmt 1 view .LVU1775
5192:./FreeRTOS/tasks.c ****     }
 6163              		.loc 1 5192 9 view .LVU1776
 6164              	.LBB113:
 6165              	.LBI113:
 236:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 6166              		.loc 2 236 34 view .LVU1777
 6167              	.LBB114:
 6168              		.loc 2 238 9 view .LVU1778
 6169              		.syntax unified
 6170              	@ 238 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 6171 003a 83F31188 			msr basepri, r3	
 6172              	@ 0 "" 2
 6173              		.thumb
 6174              		.syntax unified
 6175              	.LBE114:
 6176              	.LBE113:
5193:./FreeRTOS/tasks.c **** 
 6177              		.loc 1 5193 5 is_stmt 0 view .LVU1779
 6178 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 6179              	.LVL466:
 6180              	.L425:
5158:./FreeRTOS/tasks.c **** 
 6181              		.loc 1 5158 94 is_stmt 1 view .LVU1780
5160:./FreeRTOS/tasks.c ****                 {
 6182              		.loc 1 5160 17 view .LVU1781
5160:./FreeRTOS/tasks.c ****                 {
 6183              		.loc 1 5160 42 is_stmt 0 view .LVU1782
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 237


 6184 0040 2649     		ldr	r1, .L427
 6185 0042 0968     		ldr	r1, [r1]
5160:./FreeRTOS/tasks.c ****                 {
 6186              		.loc 1 5160 19 view .LVU1783
 6187 0044 0029     		cmp	r1, #0
 6188 0046 3BD1     		bne	.L420
 6189              	.LBB115:
5162:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6190              		.loc 1 5162 21 is_stmt 1 view .LVU1784
 6191 0048 4169     		ldr	r1, [r0, #20]
 6192              	.LVL467:
5162:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6193              		.loc 1 5162 21 view .LVU1785
 6194 004a 8568     		ldr	r5, [r0, #8]
 6195 004c C468     		ldr	r4, [r0, #12]
 6196 004e AC60     		str	r4, [r5, #8]
5162:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6197              		.loc 1 5162 21 view .LVU1786
 6198 0050 8568     		ldr	r5, [r0, #8]
 6199 0052 6560     		str	r5, [r4, #4]
5162:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6200              		.loc 1 5162 21 view .LVU1787
 6201 0054 4C68     		ldr	r4, [r1, #4]
 6202 0056 051D     		adds	r5, r0, #4
 6203 0058 AC42     		cmp	r4, r5
 6204 005a 2ED0     		beq	.L426
 6205              	.L421:
5162:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6206              		.loc 1 5162 21 discriminator 3 view .LVU1788
 6207 005c 0024     		movs	r4, #0
 6208 005e 4461     		str	r4, [r0, #20]
5162:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6209              		.loc 1 5162 21 discriminator 3 view .LVU1789
 6210 0060 0C68     		ldr	r4, [r1]
 6211 0062 013C     		subs	r4, r4, #1
 6212 0064 0C60     		str	r4, [r1]
 6213              	.LBE115:
5162:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6214              		.loc 1 5162 66 discriminator 3 view .LVU1790
5163:./FreeRTOS/tasks.c ****                 }
 6215              		.loc 1 5163 21 discriminator 3 view .LVU1791
5163:./FreeRTOS/tasks.c ****                 }
 6216              		.loc 1 5163 21 discriminator 3 view .LVU1792
 6217 0066 C16A     		ldr	r1, [r0, #44]
 6218              	.LVL468:
5163:./FreeRTOS/tasks.c ****                 }
 6219              		.loc 1 5163 21 is_stmt 0 discriminator 3 view .LVU1793
 6220 0068 0124     		movs	r4, #1
 6221 006a 8C40     		lsls	r4, r4, r1
 6222 006c 1C4E     		ldr	r6, .L427+4
 6223 006e 3768     		ldr	r7, [r6]
 6224 0070 3C43     		orrs	r4, r4, r7
 6225 0072 3460     		str	r4, [r6]
 6226              	.LBB116:
5163:./FreeRTOS/tasks.c ****                 }
 6227              		.loc 1 5163 21 is_stmt 1 discriminator 3 view .LVU1794
 6228 0074 1B4C     		ldr	r4, .L427+8
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 238


 6229 0076 01EB8101 		add	r1, r1, r1, lsl #2
 6230 007a 04EB8101 		add	r1, r4, r1, lsl #2
 6231 007e 4968     		ldr	r1, [r1, #4]
 6232              	.LVL469:
5163:./FreeRTOS/tasks.c ****                 }
 6233              		.loc 1 5163 21 discriminator 3 view .LVU1795
5163:./FreeRTOS/tasks.c ****                 }
 6234              		.loc 1 5163 21 discriminator 3 view .LVU1796
5163:./FreeRTOS/tasks.c ****                 }
 6235              		.loc 1 5163 21 discriminator 3 view .LVU1797
 6236 0080 8160     		str	r1, [r0, #8]
5163:./FreeRTOS/tasks.c ****                 }
 6237              		.loc 1 5163 21 discriminator 3 view .LVU1798
 6238 0082 8E68     		ldr	r6, [r1, #8]
 6239 0084 C660     		str	r6, [r0, #12]
5163:./FreeRTOS/tasks.c ****                 }
 6240              		.loc 1 5163 21 discriminator 3 view .LVU1799
 6241 0086 7560     		str	r5, [r6, #4]
5163:./FreeRTOS/tasks.c ****                 }
 6242              		.loc 1 5163 21 discriminator 3 view .LVU1800
 6243 0088 8D60     		str	r5, [r1, #8]
5163:./FreeRTOS/tasks.c ****                 }
 6244              		.loc 1 5163 21 discriminator 3 view .LVU1801
 6245 008a C16A     		ldr	r1, [r0, #44]
 6246              	.LVL470:
5163:./FreeRTOS/tasks.c ****                 }
 6247              		.loc 1 5163 21 is_stmt 0 discriminator 3 view .LVU1802
 6248 008c 01EB810C 		add	ip, r1, r1, lsl #2
 6249              	.LVL471:
5163:./FreeRTOS/tasks.c ****                 }
 6250              		.loc 1 5163 21 discriminator 3 view .LVU1803
 6251 0090 4FEA8C06 		lsl	r6, ip, #2
 6252 0094 04EB8C05 		add	r5, r4, ip, lsl #2
 6253 0098 4561     		str	r5, [r0, #20]
5163:./FreeRTOS/tasks.c ****                 }
 6254              		.loc 1 5163 21 is_stmt 1 discriminator 3 view .LVU1804
 6255 009a A559     		ldr	r5, [r4, r6]
 6256 009c 0135     		adds	r5, r5, #1
 6257 009e A551     		str	r5, [r4, r6]
 6258              	.LBE116:
5163:./FreeRTOS/tasks.c ****                 }
 6259              		.loc 1 5163 21 discriminator 3 view .LVU1805
5163:./FreeRTOS/tasks.c ****                 }
 6260              		.loc 1 5163 51 discriminator 3 view .LVU1806
 6261              	.LVL472:
 6262              	.L422:
5169:./FreeRTOS/tasks.c ****                 }
 6263              		.loc 1 5169 89 discriminator 1 view .LVU1807
5172:./FreeRTOS/tasks.c ****                 {
 6264              		.loc 1 5172 17 discriminator 1 view .LVU1808
5172:./FreeRTOS/tasks.c ****                 {
 6265              		.loc 1 5172 26 is_stmt 0 discriminator 1 view .LVU1809
 6266 00a0 C06A     		ldr	r0, [r0, #44]
 6267              	.LVL473:
5172:./FreeRTOS/tasks.c ****                 {
 6268              		.loc 1 5172 53 discriminator 1 view .LVU1810
 6269 00a2 1149     		ldr	r1, .L427+12
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 239


 6270 00a4 0968     		ldr	r1, [r1]
 6271 00a6 C96A     		ldr	r1, [r1, #44]
5172:./FreeRTOS/tasks.c ****                 {
 6272              		.loc 1 5172 19 discriminator 1 view .LVU1811
 6273 00a8 8842     		cmp	r0, r1
 6274 00aa C6D9     		bls	.L419
5176:./FreeRTOS/tasks.c ****                     {
 6275              		.loc 1 5176 21 is_stmt 1 view .LVU1812
5176:./FreeRTOS/tasks.c ****                     {
 6276              		.loc 1 5176 23 is_stmt 0 view .LVU1813
 6277 00ac 0AB1     		cbz	r2, .L423
5178:./FreeRTOS/tasks.c ****                     }
 6278              		.loc 1 5178 25 is_stmt 1 view .LVU1814
5178:./FreeRTOS/tasks.c ****                     }
 6279              		.loc 1 5178 52 is_stmt 0 view .LVU1815
 6280 00ae 0121     		movs	r1, #1
 6281 00b0 1160     		str	r1, [r2]
 6282              	.L423:
5184:./FreeRTOS/tasks.c ****                 }
 6283              		.loc 1 5184 21 is_stmt 1 view .LVU1816
5184:./FreeRTOS/tasks.c ****                 }
 6284              		.loc 1 5184 35 is_stmt 0 view .LVU1817
 6285 00b2 0E4A     		ldr	r2, .L427+16
 6286              	.LVL474:
5184:./FreeRTOS/tasks.c ****                 }
 6287              		.loc 1 5184 35 view .LVU1818
 6288 00b4 0121     		movs	r1, #1
 6289 00b6 1160     		str	r1, [r2]
 6290 00b8 BFE7     		b	.L419
 6291              	.LVL475:
 6292              	.L426:
 6293              	.LBB117:
5162:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6294              		.loc 1 5162 21 is_stmt 1 discriminator 1 view .LVU1819
 6295 00ba C468     		ldr	r4, [r0, #12]
 6296 00bc 4C60     		str	r4, [r1, #4]
 6297 00be CDE7     		b	.L421
 6298              	.LVL476:
 6299              	.L420:
5162:./FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6300              		.loc 1 5162 21 is_stmt 0 discriminator 1 view .LVU1820
 6301              	.LBE117:
 6302              	.LBB118:
5169:./FreeRTOS/tasks.c ****                 }
 6303              		.loc 1 5169 21 is_stmt 1 view .LVU1821
 6304 00c0 0B49     		ldr	r1, .L427+20
 6305 00c2 4C68     		ldr	r4, [r1, #4]
 6306              	.LVL477:
5169:./FreeRTOS/tasks.c ****                 }
 6307              		.loc 1 5169 21 view .LVU1822
5169:./FreeRTOS/tasks.c ****                 }
 6308              		.loc 1 5169 21 view .LVU1823
5169:./FreeRTOS/tasks.c ****                 }
 6309              		.loc 1 5169 21 view .LVU1824
 6310 00c4 C461     		str	r4, [r0, #28]
5169:./FreeRTOS/tasks.c ****                 }
 6311              		.loc 1 5169 21 view .LVU1825
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 240


 6312 00c6 A668     		ldr	r6, [r4, #8]
 6313 00c8 0662     		str	r6, [r0, #32]
5169:./FreeRTOS/tasks.c ****                 }
 6314              		.loc 1 5169 21 view .LVU1826
 6315 00ca 00F11805 		add	r5, r0, #24
 6316 00ce 7560     		str	r5, [r6, #4]
5169:./FreeRTOS/tasks.c ****                 }
 6317              		.loc 1 5169 21 view .LVU1827
 6318 00d0 A560     		str	r5, [r4, #8]
5169:./FreeRTOS/tasks.c ****                 }
 6319              		.loc 1 5169 21 view .LVU1828
 6320 00d2 8162     		str	r1, [r0, #40]
5169:./FreeRTOS/tasks.c ****                 }
 6321              		.loc 1 5169 21 view .LVU1829
 6322 00d4 0C68     		ldr	r4, [r1]
 6323              	.LVL478:
5169:./FreeRTOS/tasks.c ****                 }
 6324              		.loc 1 5169 21 is_stmt 0 view .LVU1830
 6325 00d6 0134     		adds	r4, r4, #1
 6326 00d8 0C60     		str	r4, [r1]
 6327 00da E1E7     		b	.L422
 6328              	.L428:
 6329              		.align	2
 6330              	.L427:
 6331 00dc 00000000 		.word	uxSchedulerSuspended
 6332 00e0 00000000 		.word	uxTopReadyPriority
 6333 00e4 00000000 		.word	pxReadyTasksLists
 6334 00e8 00000000 		.word	pxCurrentTCB
 6335 00ec 00000000 		.word	xYieldPending
 6336 00f0 00000000 		.word	xPendingReadyList
 6337              	.LBE118:
 6338              		.cfi_endproc
 6339              	.LFE83:
 6341              		.section	.text.xTaskGenericNotifyStateClear,"ax",%progbits
 6342              		.align	1
 6343              		.global	xTaskGenericNotifyStateClear
 6344              		.syntax unified
 6345              		.thumb
 6346              		.thumb_func
 6348              	xTaskGenericNotifyStateClear:
 6349              	.LVL479:
 6350              	.LFB84:
5202:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6351              		.loc 1 5202 5 is_stmt 1 view -0
 6352              		.cfi_startproc
 6353              		@ args = 0, pretend = 0, frame = 0
 6354              		@ frame_needed = 0, uses_anonymous_args = 0
5202:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6355              		.loc 1 5202 5 is_stmt 0 view .LVU1832
 6356 0000 38B5     		push	{r3, r4, r5, lr}
 6357              	.LCFI51:
 6358              		.cfi_def_cfa_offset 16
 6359              		.cfi_offset 3, -16
 6360              		.cfi_offset 4, -12
 6361              		.cfi_offset 5, -8
 6362              		.cfi_offset 14, -4
 6363 0002 0C46     		mov	r4, r1
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 241


5203:./FreeRTOS/tasks.c ****         BaseType_t xReturn;
 6364              		.loc 1 5203 9 is_stmt 1 view .LVU1833
5204:./FreeRTOS/tasks.c **** 
 6365              		.loc 1 5204 9 view .LVU1834
5206:./FreeRTOS/tasks.c **** 
 6366              		.loc 1 5206 79 view .LVU1835
5210:./FreeRTOS/tasks.c **** 
 6367              		.loc 1 5210 9 view .LVU1836
5210:./FreeRTOS/tasks.c **** 
 6368              		.loc 1 5210 17 is_stmt 0 view .LVU1837
 6369 0004 0546     		mov	r5, r0
 6370 0006 60B1     		cbz	r0, .L434
 6371              	.LVL480:
 6372              	.L430:
5212:./FreeRTOS/tasks.c ****         {
 6373              		.loc 1 5212 9 is_stmt 1 discriminator 4 view .LVU1838
 6374 0008 FFF7FEFF 		bl	vPortEnterCritical
 6375              	.LVL481:
5214:./FreeRTOS/tasks.c ****             {
 6376              		.loc 1 5214 13 discriminator 4 view .LVU1839
5214:./FreeRTOS/tasks.c ****             {
 6377              		.loc 1 5214 37 is_stmt 0 discriminator 4 view .LVU1840
 6378 000c 2B19     		adds	r3, r5, r4
 6379 000e 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 6380 0012 DBB2     		uxtb	r3, r3
5214:./FreeRTOS/tasks.c ****             {
 6381              		.loc 1 5214 15 discriminator 4 view .LVU1841
 6382 0014 022B     		cmp	r3, #2
 6383 0016 07D0     		beq	.L435
5221:./FreeRTOS/tasks.c ****             }
 6384              		.loc 1 5221 25 view .LVU1842
 6385 0018 0024     		movs	r4, #0
 6386              	.LVL482:
 6387              	.L431:
5224:./FreeRTOS/tasks.c **** 
 6388              		.loc 1 5224 9 is_stmt 1 view .LVU1843
 6389 001a FFF7FEFF 		bl	vPortExitCritical
 6390              	.LVL483:
5226:./FreeRTOS/tasks.c ****     }
 6391              		.loc 1 5226 9 view .LVU1844
5227:./FreeRTOS/tasks.c **** 
 6392              		.loc 1 5227 5 is_stmt 0 view .LVU1845
 6393 001e 2046     		mov	r0, r4
 6394 0020 38BD     		pop	{r3, r4, r5, pc}
 6395              	.LVL484:
 6396              	.L434:
5210:./FreeRTOS/tasks.c **** 
 6397              		.loc 1 5210 17 discriminator 1 view .LVU1846
 6398 0022 044B     		ldr	r3, .L436
 6399 0024 1D68     		ldr	r5, [r3]
 6400              	.LVL485:
5210:./FreeRTOS/tasks.c **** 
 6401              		.loc 1 5210 17 discriminator 1 view .LVU1847
 6402 0026 EFE7     		b	.L430
 6403              	.LVL486:
 6404              	.L435:
5216:./FreeRTOS/tasks.c ****                 xReturn = pdPASS;
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 242


 6405              		.loc 1 5216 17 is_stmt 1 view .LVU1848
5216:./FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 6406              		.loc 1 5216 56 is_stmt 0 view .LVU1849
 6407 0028 2544     		add	r5, r5, r4
 6408              	.LVL487:
5216:./FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 6409              		.loc 1 5216 56 view .LVU1850
 6410 002a 0023     		movs	r3, #0
 6411 002c 85F85030 		strb	r3, [r5, #80]
5217:./FreeRTOS/tasks.c ****             }
 6412              		.loc 1 5217 17 is_stmt 1 view .LVU1851
 6413              	.LVL488:
5217:./FreeRTOS/tasks.c ****             }
 6414              		.loc 1 5217 25 is_stmt 0 view .LVU1852
 6415 0030 0124     		movs	r4, #1
 6416              	.LVL489:
5217:./FreeRTOS/tasks.c ****             }
 6417              		.loc 1 5217 25 view .LVU1853
 6418 0032 F2E7     		b	.L431
 6419              	.L437:
 6420              		.align	2
 6421              	.L436:
 6422 0034 00000000 		.word	pxCurrentTCB
 6423              		.cfi_endproc
 6424              	.LFE84:
 6426              		.section	.text.ulTaskGenericNotifyValueClear,"ax",%progbits
 6427              		.align	1
 6428              		.global	ulTaskGenericNotifyValueClear
 6429              		.syntax unified
 6430              		.thumb
 6431              		.thumb_func
 6433              	ulTaskGenericNotifyValueClear:
 6434              	.LVL490:
 6435              	.LFB85:
5237:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6436              		.loc 1 5237 5 is_stmt 1 view -0
 6437              		.cfi_startproc
 6438              		@ args = 0, pretend = 0, frame = 0
 6439              		@ frame_needed = 0, uses_anonymous_args = 0
5237:./FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6440              		.loc 1 5237 5 is_stmt 0 view .LVU1855
 6441 0000 70B5     		push	{r4, r5, r6, lr}
 6442              	.LCFI52:
 6443              		.cfi_def_cfa_offset 16
 6444              		.cfi_offset 4, -16
 6445              		.cfi_offset 5, -12
 6446              		.cfi_offset 6, -8
 6447              		.cfi_offset 14, -4
 6448 0002 0D46     		mov	r5, r1
 6449 0004 1646     		mov	r6, r2
5238:./FreeRTOS/tasks.c ****         uint32_t ulReturn;
 6450              		.loc 1 5238 9 is_stmt 1 view .LVU1856
5239:./FreeRTOS/tasks.c **** 
 6451              		.loc 1 5239 9 view .LVU1857
5243:./FreeRTOS/tasks.c **** 
 6452              		.loc 1 5243 9 view .LVU1858
5243:./FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 243


 6453              		.loc 1 5243 17 is_stmt 0 view .LVU1859
 6454 0006 0446     		mov	r4, r0
 6455 0008 68B1     		cbz	r0, .L441
 6456              	.LVL491:
 6457              	.L439:
5245:./FreeRTOS/tasks.c ****         {
 6458              		.loc 1 5245 9 is_stmt 1 discriminator 4 view .LVU1860
 6459 000a FFF7FEFF 		bl	vPortEnterCritical
 6460              	.LVL492:
5249:./FreeRTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 6461              		.loc 1 5249 13 discriminator 4 view .LVU1861
5249:./FreeRTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 6462              		.loc 1 5249 22 is_stmt 0 discriminator 4 view .LVU1862
 6463 000e 1235     		adds	r5, r5, #18
 6464              	.LVL493:
5249:./FreeRTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 6465              		.loc 1 5249 22 discriminator 4 view .LVU1863
 6466 0010 04EB8503 		add	r3, r4, r5, lsl #2
 6467 0014 5C68     		ldr	r4, [r3, #4]
 6468              	.LVL494:
5250:./FreeRTOS/tasks.c ****         }
 6469              		.loc 1 5250 13 is_stmt 1 discriminator 4 view .LVU1864
5250:./FreeRTOS/tasks.c ****         }
 6470              		.loc 1 5250 35 is_stmt 0 discriminator 4 view .LVU1865
 6471 0016 5968     		ldr	r1, [r3, #4]
5250:./FreeRTOS/tasks.c ****         }
 6472              		.loc 1 5250 54 discriminator 4 view .LVU1866
 6473 0018 21EA0601 		bic	r1, r1, r6
 6474 001c 5960     		str	r1, [r3, #4]
5252:./FreeRTOS/tasks.c **** 
 6475              		.loc 1 5252 9 is_stmt 1 discriminator 4 view .LVU1867
 6476 001e FFF7FEFF 		bl	vPortExitCritical
 6477              	.LVL495:
5254:./FreeRTOS/tasks.c ****     }
 6478              		.loc 1 5254 9 discriminator 4 view .LVU1868
5255:./FreeRTOS/tasks.c **** 
 6479              		.loc 1 5255 5 is_stmt 0 discriminator 4 view .LVU1869
 6480 0022 2046     		mov	r0, r4
 6481 0024 70BD     		pop	{r4, r5, r6, pc}
 6482              	.LVL496:
 6483              	.L441:
5243:./FreeRTOS/tasks.c **** 
 6484              		.loc 1 5243 17 discriminator 1 view .LVU1870
 6485 0026 014B     		ldr	r3, .L442
 6486 0028 1C68     		ldr	r4, [r3]
 6487              	.LVL497:
5243:./FreeRTOS/tasks.c **** 
 6488              		.loc 1 5243 17 discriminator 1 view .LVU1871
 6489 002a EEE7     		b	.L439
 6490              	.L443:
 6491              		.align	2
 6492              	.L442:
 6493 002c 00000000 		.word	pxCurrentTCB
 6494              		.cfi_endproc
 6495              	.LFE85:
 6497              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 6498              		.align	2
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 244


 6501              	uxSchedulerSuspended:
 6502 0000 00000000 		.space	4
 6503              		.global	uxTopUsedPriority
 6504              		.section	.data.uxTopUsedPriority,"aw"
 6505              		.align	2
 6508              	uxTopUsedPriority:
 6509 0000 1F000000 		.word	31
 6510              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 6511              		.align	2
 6514              	xIdleTaskHandle:
 6515 0000 00000000 		.space	4
 6516              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 6517              		.align	2
 6520              	xNextTaskUnblockTime:
 6521 0000 00000000 		.space	4
 6522              		.section	.bss.uxTaskNumber,"aw",%nobits
 6523              		.align	2
 6526              	uxTaskNumber:
 6527 0000 00000000 		.space	4
 6528              		.section	.bss.xNumOfOverflows,"aw",%nobits
 6529              		.align	2
 6532              	xNumOfOverflows:
 6533 0000 00000000 		.space	4
 6534              		.section	.bss.xYieldPending,"aw",%nobits
 6535              		.align	2
 6538              	xYieldPending:
 6539 0000 00000000 		.space	4
 6540              		.section	.bss.xPendedTicks,"aw",%nobits
 6541              		.align	2
 6544              	xPendedTicks:
 6545 0000 00000000 		.space	4
 6546              		.section	.bss.xSchedulerRunning,"aw",%nobits
 6547              		.align	2
 6550              	xSchedulerRunning:
 6551 0000 00000000 		.space	4
 6552              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 6553              		.align	2
 6556              	uxTopReadyPriority:
 6557 0000 00000000 		.space	4
 6558              		.section	.bss.xTickCount,"aw",%nobits
 6559              		.align	2
 6562              	xTickCount:
 6563 0000 00000000 		.space	4
 6564              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 6565              		.align	2
 6568              	uxCurrentNumberOfTasks:
 6569 0000 00000000 		.space	4
 6570              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 6571              		.align	2
 6574              	xSuspendedTaskList:
 6575 0000 00000000 		.space	20
 6575      00000000 
 6575      00000000 
 6575      00000000 
 6575      00000000 
 6576              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 6577              		.align	2
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 245


 6580              	uxDeletedTasksWaitingCleanUp:
 6581 0000 00000000 		.space	4
 6582              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 6583              		.align	2
 6586              	xTasksWaitingTermination:
 6587 0000 00000000 		.space	20
 6587      00000000 
 6587      00000000 
 6587      00000000 
 6587      00000000 
 6588              		.section	.bss.xPendingReadyList,"aw",%nobits
 6589              		.align	2
 6592              	xPendingReadyList:
 6593 0000 00000000 		.space	20
 6593      00000000 
 6593      00000000 
 6593      00000000 
 6593      00000000 
 6594              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 6595              		.align	2
 6598              	pxOverflowDelayedTaskList:
 6599 0000 00000000 		.space	4
 6600              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 6601              		.align	2
 6604              	pxDelayedTaskList:
 6605 0000 00000000 		.space	4
 6606              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 6607              		.align	2
 6610              	xDelayedTaskList2:
 6611 0000 00000000 		.space	20
 6611      00000000 
 6611      00000000 
 6611      00000000 
 6611      00000000 
 6612              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 6613              		.align	2
 6616              	xDelayedTaskList1:
 6617 0000 00000000 		.space	20
 6617      00000000 
 6617      00000000 
 6617      00000000 
 6617      00000000 
 6618              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 6619              		.align	2
 6622              	pxReadyTasksLists:
 6623 0000 00000000 		.space	640
 6623      00000000 
 6623      00000000 
 6623      00000000 
 6623      00000000 
 6624              		.global	pxCurrentTCB
 6625              		.section	.bss.pxCurrentTCB,"aw",%nobits
 6626              		.align	2
 6629              	pxCurrentTCB:
 6630 0000 00000000 		.space	4
 6631              		.text
 6632              	.Letext0:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 246


 6633              		.file 3 "c:\\vscode_tool_chain\\gcc\\12.2 mpacbti-rel1\\lib\\gcc\\arm-none-eabi\\12.2.1\\include\\
 6634              		.file 4 "c:\\vscode_tool_chain\\gcc\\12.2 mpacbti-rel1\\arm-none-eabi\\include\\machine\\_default_
 6635              		.file 5 "c:\\vscode_tool_chain\\gcc\\12.2 mpacbti-rel1\\arm-none-eabi\\include\\sys\\_stdint.h"
 6636              		.file 6 "FreeRTOS/include/projdefs.h"
 6637              		.file 7 "FreeRTOS/include/list.h"
 6638              		.file 8 "FreeRTOS/include/task.h"
 6639              		.file 9 "FreeRTOS/include/portable.h"
 6640              		.file 10 "FreeRTOS/include/timers.h"
 6641              		.file 11 "c:\\vscode_tool_chain\\gcc\\12.2 mpacbti-rel1\\arm-none-eabi\\include\\string.h"
 6642              		.file 12 "<built-in>"
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 247


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:19     .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:24     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:83     .text.prvTaskIsTaskSuspended:00000024 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6574   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6592   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:89     .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:94     .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:129    .text.prvResetNextTaskUnblockTime:00000020 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6604   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6520   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:135    .text.prvDeleteTCB:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:140    .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:172    .text.prvInitialiseNewTask:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:177    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:315    .text.prvInitialiseTaskLists:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:320    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:393    .text.prvInitialiseTaskLists:00000048 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6622   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6616   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6610   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6586   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6598   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:405    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:410    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:572    .text.prvAddNewTaskToReadyList:000000ac $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6568   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6629   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6550   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6526   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6556   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:582    .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:587    .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:660    .text.prvCheckTasksWaitingTermination:00000040 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6580   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:667    .text.prvIdleTask:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:672    .text.prvIdleTask:00000000 prvIdleTask
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:721    .text.prvIdleTask:00000024 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:726    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:731    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:877    .text.prvAddCurrentTaskToDelayedList:00000094 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6562   .bss.xTickCount:00000000 xTickCount
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:888    .text.xTaskCreate:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:894    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1011   .text.vTaskDelete:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1017   .text.vTaskDelete:00000000 vTaskDelete
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1180   .text.vTaskDelete:000000ac $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1192   .text.uxTaskPriorityGet:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1198   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1244   .text.uxTaskPriorityGet:0000001c $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1249   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1255   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1327   .text.uxTaskPriorityGetFromISR:00000024 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1332   .text.vTaskPrioritySet:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1338   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1582   .text.vTaskPrioritySet:000000e4 $d
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 248


C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1589   .text.vTaskResume:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1595   .text.vTaskResume:00000000 vTaskResume
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1723   .text.vTaskResume:00000084 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1730   .text.xTaskResumeFromISR:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1736   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1905   .text.xTaskResumeFromISR:00000098 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6501   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6538   .bss.xYieldPending:00000000 xYieldPending
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1915   .rodata.vTaskStartScheduler.str1.4:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1919   .text.vTaskStartScheduler:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:1925   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2025   .text.vTaskStartScheduler:00000058 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6514   .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6508   .data.uxTopUsedPriority:00000000 uxTopUsedPriority
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2036   .text.vTaskEndScheduler:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2042   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2085   .text.vTaskEndScheduler:00000020 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2090   .text.vTaskSuspendAll:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2096   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2115   .text.vTaskSuspendAll:0000000c $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2120   .text.xTaskGetTickCount:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2126   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2147   .text.xTaskGetTickCount:00000008 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2152   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2158   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2182   .text.xTaskGetTickCountFromISR:00000008 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2187   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2193   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2209   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2214   .text.pcTaskGetName:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2220   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2251   .text.pcTaskGetName:00000010 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2256   .text.xTaskIncrementTick:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2262   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2587   .text.xTaskIncrementTick:00000134 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6532   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6544   .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2602   .text.xTaskResumeAll:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2608   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2904   .text.xTaskResumeAll:00000114 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2916   .text.xTaskDelayUntil:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:2922   .text.xTaskDelayUntil:00000000 xTaskDelayUntil
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3080   .text.xTaskDelayUntil:00000068 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3085   .text.vTaskDelay:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3091   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3160   .text.xTaskCatchUpTicks:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3166   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3209   .text.xTaskCatchUpTicks:00000020 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3214   .text.vTaskSwitchContext:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3220   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3328   .text.vTaskSwitchContext:00000064 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3339   .text.vTaskSuspend:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3345   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3542   .text.vTaskSuspend:000000c4 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3552   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3558   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3594   .text.vTaskPlaceOnEventList:00000018 $d
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 249


C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3599   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3605   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3674   .text.vTaskPlaceOnUnorderedEventList:0000003c $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3679   .text.vTaskPlaceOnEventListRestricted:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3685   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3754   .text.vTaskPlaceOnEventListRestricted:00000038 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3759   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3765   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3987   .text.xTaskRemoveFromEventList:000000c4 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:3997   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4003   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4173   .text.vTaskRemoveFromUnorderedEventList:000000a0 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4182   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4188   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4226   .text.vTaskSetTimeOutState:0000001c $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4232   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4238   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4261   .text.vTaskInternalSetTimeOutState:00000010 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4267   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4273   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4392   .text.xTaskCheckForTimeOut:00000058 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4398   .text.vTaskMissedYield:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4404   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4421   .text.vTaskMissedYield:00000008 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4426   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4432   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4451   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4456   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4462   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4500   .text.xTaskGetSchedulerState:00000018 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4506   .text.xTaskPriorityInherit:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4512   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4699   .text.xTaskPriorityInherit:000000b8 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4706   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4712   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4866   .text.xTaskPriorityDisinherit:00000084 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4872   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:4878   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5039   .text.vTaskPriorityDisinheritAfterTimeout:00000094 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5045   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5051   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5078   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5083   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5089   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5120   .text.pvTaskIncrementMutexHeldCount:00000018 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5125   .text.ulTaskGenericNotifyTake:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5131   .text.ulTaskGenericNotifyTake:00000000 ulTaskGenericNotifyTake
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5265   .text.ulTaskGenericNotifyTake:00000094 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5270   .text.xTaskGenericNotifyWait:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5276   .text.xTaskGenericNotifyWait:00000000 xTaskGenericNotifyWait
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5437   .text.xTaskGenericNotifyWait:000000b8 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5442   .text.xTaskGenericNotify:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5448   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5508   .text.xTaskGenericNotify:00000040 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5512   .text.xTaskGenericNotify:00000044 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5720   .text.xTaskGenericNotify:00000110 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5727   .text.xTaskGenericNotifyFromISR:00000000 $t
ARM GAS  C:\Users\24105\AppData\Local\Temp\cc6ucug9.s 			page 250


C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5733   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5809   .text.xTaskGenericNotifyFromISR:00000042 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:5813   .text.xTaskGenericNotifyFromISR:00000046 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6070   .text.xTaskGenericNotifyFromISR:0000012c $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6080   .text.vTaskGenericNotifyGiveFromISR:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6086   .text.vTaskGenericNotifyGiveFromISR:00000000 vTaskGenericNotifyGiveFromISR
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6331   .text.vTaskGenericNotifyGiveFromISR:000000dc $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6342   .text.xTaskGenericNotifyStateClear:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6348   .text.xTaskGenericNotifyStateClear:00000000 xTaskGenericNotifyStateClear
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6422   .text.xTaskGenericNotifyStateClear:00000034 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6427   .text.ulTaskGenericNotifyValueClear:00000000 $t
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6433   .text.ulTaskGenericNotifyValueClear:00000000 ulTaskGenericNotifyValueClear
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6493   .text.ulTaskGenericNotifyValueClear:0000002c $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6498   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6505   .data.uxTopUsedPriority:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6511   .bss.xIdleTaskHandle:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6517   .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6523   .bss.uxTaskNumber:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6529   .bss.xNumOfOverflows:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6535   .bss.xYieldPending:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6541   .bss.xPendedTicks:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6547   .bss.xSchedulerRunning:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6553   .bss.uxTopReadyPriority:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6559   .bss.xTickCount:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6565   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6571   .bss.xSuspendedTaskList:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6577   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6583   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6589   .bss.xPendingReadyList:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6595   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6601   .bss.pxDelayedTaskList:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6607   .bss.xDelayedTaskList2:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6613   .bss.xDelayedTaskList1:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6619   .bss.pxReadyTasksLists:00000000 $d
C:\Users\24105\AppData\Local\Temp\cc6ucug9.s:6626   .bss.pxCurrentTCB:00000000 $d

UNDEFINED SYMBOLS
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vPortExitCritical
uxListRemove
vListInsert
pvPortMalloc
memset
vListInsertEnd
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
