ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"port.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "./FreeRTOS/portable/GCC/ARM_CM3/port.c"
  18              		.section	.text.prvTaskExitError,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	prvTaskExitError:
  25              	.LFB35:
   1:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
   2:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * FreeRTOS Kernel V10.5.1
   3:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  *
   5:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * SPDX-License-Identifier: MIT
   6:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  *
   7:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * the Software without restriction, including without limitation the rights to
  10:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * subject to the following conditions:
  13:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  *
  14:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * The above copyright notice and this permission notice shall be included in all
  15:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * copies or substantial portions of the Software.
  16:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  *
  17:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  *
  24:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * https://www.FreeRTOS.org
  25:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * https://github.com/FreeRTOS
  26:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  *
  27:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  */
  28:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  29:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------
  30:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** * Implementation of functions defined in portable.h for the ARM CM3 port.
  31:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** *----------------------------------------------------------*/
  32:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  33:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* Scheduler includes. */
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 2


  34:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #include "FreeRTOS.h"
  35:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #include "task.h"
  36:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  37:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  38:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * defined.  The value should also ensure backward compatibility.
  39:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  40:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  41:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     #define configKERNEL_INTERRUPT_PRIORITY    255
  42:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #endif
  43:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  44:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* Constants required to manipulate the core.  Registers first... */
  45:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CTRL_REG             ( *( ( volatile uint32_t * ) 0xe000e010 ) )
  46:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_LOAD_REG             ( *( ( volatile uint32_t * ) 0xe000e014 ) )
  47:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG    ( *( ( volatile uint32_t * ) 0xe000e018 ) )
  48:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SHPR3_REG                    ( *( ( volatile uint32_t * ) 0xe000ed20 ) )
  49:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* ...then bits in the registers. */
  50:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CLK_BIT              ( 1UL << 2UL )
  51:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_INT_BIT              ( 1UL << 1UL )
  52:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT           ( 1UL << 0UL )
  53:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT       ( 1UL << 16UL )
  54:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_PENDSVCLEAR_BIT              ( 1UL << 27UL )
  55:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_PEND_SYSTICK_SET_BIT         ( 1UL << 26UL )
  56:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT       ( 1UL << 25UL )
  57:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  58:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_PENDSV_PRI                   ( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) <<
  59:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_SYSTICK_PRI                  ( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) <<
  60:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  61:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* Constants required to check the validity of an interrupt priority. */
  62:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER       ( 16 )
  63:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16       ( 0xE000E3F0 )
  64:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portAIRCR_REG                         ( *( ( volatile uint32_t * ) 0xE000ED0C ) )
  65:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portMAX_8_BIT_VALUE                   ( ( uint8_t ) 0xff )
  66:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portTOP_BIT_OF_BYTE                   ( ( uint8_t ) 0x80 )
  67:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portMAX_PRIGROUP_BITS                 ( ( uint8_t ) 7 )
  68:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portPRIORITY_GROUP_MASK               ( 0x07UL << 8UL )
  69:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portPRIGROUP_SHIFT                    ( 8UL )
  70:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  71:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  72:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portVECTACTIVE_MASK                   ( 0xFFUL )
  73:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  74:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* Constants required to set up the initial stack. */
  75:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portINITIAL_XPSR                      ( 0x01000000UL )
  76:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  77:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* The systick is a 24-bit counter. */
  78:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portMAX_24_BIT_NUMBER                 ( 0xffffffUL )
  79:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  80:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
  81:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * occurred while the SysTick counter is stopped during tickless idle
  82:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * calculations. */
  83:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portMISSED_COUNTS_FACTOR              ( 94UL )
  84:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  85:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  86:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  87:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #define portSTART_ADDRESS_MASK                ( ( StackType_t ) 0xfffffffeUL )
  88:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
  89:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* Let the user override the default SysTick clock rate.  If defined by the
  90:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * user, this symbol must equal the SysTick clock rate when the CLK bit is 0 in the
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 3


  91:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * configuration register. */
  92:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  93:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     #define configSYSTICK_CLOCK_HZ             ( configCPU_CLOCK_HZ )
  94:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* Ensure the SysTick is clocked at the same frequency as the core. */
  95:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     #define portNVIC_SYSTICK_CLK_BIT_CONFIG    ( portNVIC_SYSTICK_CLK_BIT )
  96:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #else
  97:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* Select the option to clock SysTick not at the same frequency as the core. */
  98:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     #define portNVIC_SYSTICK_CLK_BIT_CONFIG    ( 0 )
  99:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #endif
 100:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 101:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 102:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * prvTaskExitError() in case it messes up unwinding of the stack in the
 103:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * debugger. */
 104:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #ifdef configTASK_RETURN_ADDRESS
 105:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     #define portTASK_RETURN_ADDRESS    configTASK_RETURN_ADDRESS
 106:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #else
 107:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     #define portTASK_RETURN_ADDRESS    prvTaskExitError
 108:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #endif
 109:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 110:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
 111:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 112:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * file is weak to allow application writers to change the timer used to
 113:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * generate the tick interrupt.
 114:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  */
 115:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** void vPortSetupTimerInterrupt( void );
 116:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 117:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
 118:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * Exception handlers.
 119:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  */
 120:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** void xPortPendSVHandler( void ) __attribute__( ( naked ) );
 121:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** void xPortSysTickHandler( void );
 122:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** void vPortSVCHandler( void ) __attribute__( ( naked ) );
 123:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 124:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
 125:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 126:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  */
 127:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** static void prvPortStartFirstTask( void ) __attribute__( ( naked ) );
 128:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 129:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
 130:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 131:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  */
 132:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** static void prvTaskExitError( void );
 133:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 134:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 135:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 136:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 137:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * variable. */
 138:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 139:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 140:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
 141:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * The number of SysTick increments that make up one tick period.
 142:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  */
 143:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 144:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     static uint32_t ulTimerCountsForOneTick = 0;
 145:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 146:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 147:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 4


 148:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 149:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * 24 bit resolution of the SysTick timer.
 150:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  */
 151:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 152:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     static uint32_t xMaximumPossibleSuppressedTicks = 0;
 153:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 154:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 155:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
 156:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 157:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * power functionality only.
 158:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  */
 159:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 160:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     static uint32_t ulStoppedTimerCompensation = 0;
 161:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 162:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 163:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
 164:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 165:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 166:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 167:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  */
 168:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #if ( configASSERT_DEFINED == 1 )
 169:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     static uint8_t ucMaxSysCallPriority = 0;
 170:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     static uint32_t ulMaxPRIGROUPValue = 0;
 171:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t *
 172:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #endif /* configASSERT_DEFINED */
 173:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 174:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 175:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 176:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
 177:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * See header file for description.
 178:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  */
 179:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
 180:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                                      TaskFunction_t pxCode,
 181:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                                      void * pvParameters )
 182:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 183:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* Simulate the stack frame as it would be created by a context switch
 184:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * interrupt. */
 185:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     pxTopOfStack--;                                                      /* Offset added to account
 186:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 187:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     pxTopOfStack--;
 188:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 189:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     pxTopOfStack--;
 190:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 191:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 192:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 193:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R
 194:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 195:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     return pxTopOfStack;
 196:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 197:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 198:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 199:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** static void prvTaskExitError( void )
 200:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
  26              		.loc 1 200 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 5


  30              		@ link register save eliminated.
  31 0000 82B0     		sub	sp, sp, #8
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
 201:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     volatile uint32_t ulDummy = 0UL;
  34              		.loc 1 201 5 view .LVU1
  35              		.loc 1 201 23 is_stmt 0 view .LVU2
  36 0002 0023     		movs	r3, #0
  37 0004 0193     		str	r3, [sp, #4]
 202:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 203:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* A function that implements a task must not exit or attempt to return to
 204:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * its caller as there is nothing to return to.  If a task wants to exit it
 205:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * should instead call vTaskDelete( NULL ).
 206:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      *
 207:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * Artificially force an assert() to be triggered if configASSERT() is
 208:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * defined, then stop here so application writers can catch the error. */
 209:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     configASSERT( uxCriticalNesting == ~0UL );
  38              		.loc 1 209 46 is_stmt 1 view .LVU3
 210:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     portDISABLE_INTERRUPTS();
  39              		.loc 1 210 5 view .LVU4
  40              	.LBB12:
  41              	.LBI12:
  42              		.file 2 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h"
   1:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.5.1
   3:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
   7:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  14:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  17:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  24:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  27:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  */
  28:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #include <stdlib.h>
  29:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #include <string.h>
  30:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #include <stdint.h>
  31:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #include <FreeRTOSConfig.h>
  32:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #include <projdefs.h>
  33:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  34:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 6


  35:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define PORTMACRO_H
  36:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  37:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifdef __cplusplus
  38:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         extern "C" {
  39:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
  40:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  41:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  42:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  43:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  44:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  45:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  46:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  47:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  48:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  49:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  */
  50:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  51:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  52:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portCHAR          char
  53:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portFLOAT         float
  54:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portDOUBLE        double
  55:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portLONG          long
  56:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portSHORT         short
  57:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  58:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portBASE_TYPE     long
  59:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  60:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  61:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     typedef long             BaseType_t;
  62:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     typedef unsigned long    UBaseType_t;
  63:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  64:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  65:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         typedef uint16_t     TickType_t;
  66:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  67:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #else
  68:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         typedef uint32_t     TickType_t;
  69:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  70:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  71:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  72:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * not need to be guarded with a critical section. */
  73:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  74:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
  75:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  76:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  77:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  78:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  79:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  80:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  81:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  82:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  83:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  84:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  85:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portYIELD()                                 \
  86:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {                                                   \
  87:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  88:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  89:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****                                                         \
  90:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  91:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****          * within the specified behaviour for the architecture. */ \
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 7


  92:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  93:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile ( "isb" );                                  \
  94:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
  95:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  96:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  97:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  98:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  99:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
 100:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 101:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 102:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
 103:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     extern void vPortEnterCritical( void );
 104:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     extern void vPortExitCritical( void );
 105:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 106:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 107:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 108:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 109:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 110:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 111:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 112:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 114:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 115:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 116:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * (which build with all the ports) will build. */
 117:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 118:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 119:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 120:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 121:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 122:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 123:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 124:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 125:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
 126:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 127:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 128:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 129:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 130:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 131:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
 132:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 133:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 134:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 135:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Generic helper function. */
 136:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 137:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         {
 138:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             uint8_t ucReturn;
 139:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 140:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 141:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 142:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             return ucReturn;
 143:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         }
 144:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 145:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Check the configuration. */
 146:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 147:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 148:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #endif
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 8


 149:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 150:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 151:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 152:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 153:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 154:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 155:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 156:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 157:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 158:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 160:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 161:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 162:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifdef configASSERT
 163:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         void vPortValidateInterruptPriority( void );
 164:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 165:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
 166:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 167:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 168:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portNOP()
 169:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 170:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portINLINE              __inline
 171:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 172:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifndef portFORCE_INLINE
 173:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 174:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
 175:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 176:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 177:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 178:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 179:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 180:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         uint32_t ulCurrentInterrupt;
 181:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         BaseType_t xReturn;
 182:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 183:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 184:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 185:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 186:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 187:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         {
 188:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             xReturn = pdFALSE;
 189:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         }
 190:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         else
 191:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         {
 192:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             xReturn = pdTRUE;
 193:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         }
 194:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 195:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         return xReturn;
 196:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 197:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 198:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 199:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 200:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
  43              		.loc 2 200 34 view .LVU5
  44              	.LBB13:
 201:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 202:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         uint32_t ulNewBASEPRI;
  45              		.loc 2 202 9 view .LVU6
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 9


 203:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 204:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile
  46              		.loc 2 204 9 view .LVU7
  47              		.syntax unified
  48              	@ 204 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
  49 0006 4FF0BF03 			mov r3, #191												
  50 000a 83F31188 		msr basepri, r3											
  51 000e BFF36F8F 		isb														
  52 0012 BFF34F8F 		dsb														
  53              	
  54              	@ 0 "" 2
  55              	.LVL0:
  56              		.thumb
  57              		.syntax unified
  58              	.L2:
  59              		.loc 2 204 9 is_stmt 0 view .LVU8
  60              	.LBE13:
  61              	.LBE12:
 211:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 212:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     while( ulDummy == 0 )
 213:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     {
 214:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         /* This file calls prvTaskExitError() after the scheduler has been
 215:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****          * started to remove a compiler warning about the function being defined
 216:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****          * but never called.  ulDummy is used purely to quieten other warnings
 217:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****          * about code appearing after this function is called - making ulDummy
 218:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****          * volatile makes the compiler think the function could return and
 219:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****          * therefore not output an 'unreachable code' warning for code that appears
 220:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****          * after it. */
 221:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     }
  62              		.loc 1 221 5 is_stmt 1 discriminator 1 view .LVU9
 212:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     {
  63              		.loc 1 212 20 discriminator 1 view .LVU10
  64 0016 019B     		ldr	r3, [sp, #4]
  65 0018 002B     		cmp	r3, #0
  66 001a FCD0     		beq	.L2
 222:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
  67              		.loc 1 222 1 is_stmt 0 view .LVU11
  68 001c 02B0     		add	sp, sp, #8
  69              	.LCFI1:
  70              		.cfi_def_cfa_offset 0
  71              		@ sp needed
  72 001e 7047     		bx	lr
  73              		.cfi_endproc
  74              	.LFE35:
  76              		.section	.text.prvPortStartFirstTask,"ax",%progbits
  77              		.align	1
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  82              	prvPortStartFirstTask:
  83              	.LFB37:
 223:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 224:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 225:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** void vPortSVCHandler( void )
 226:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 227:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     __asm volatile (
 228:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	ldr	r3, pxCurrentTCBConst2		\n"/* Restore the context. */
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 10


 229:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	ldr r1, [r3]					\n"/* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 230:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	ldr r0, [r1]					\n"/* The first item in pxCurrentTCB is the task top of stack. */
 231:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	ldmia r0!, {r4-r11}				\n"/* Pop the registers that are not automatically saved on except
 232:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	msr psp, r0						\n"/* Restore the task stack pointer. */
 233:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	isb								\n"
 234:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	mov r0, #0 						\n"
 235:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	msr	basepri, r0					\n"
 236:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	orr r14, #0xd					\n"
 237:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	bx r14							\n"
 238:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "									\n"
 239:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	.align 4						\n"
 240:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 241:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         );
 242:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 243:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 244:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 245:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** static void prvPortStartFirstTask( void )
 246:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
  84              		.loc 1 246 1 is_stmt 1 view -0
  85              		.cfi_startproc
  86              		@ Naked Function: prologue and epilogue provided by programmer.
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
 247:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     __asm volatile (
  89              		.loc 1 247 5 view .LVU13
  90              		.syntax unified
  91              	@ 247 "./FreeRTOS/portable/GCC/ARM_CM3/port.c" 1
  92 0000 0648     		 ldr r0, =0xE000ED08 	
  93 0002 0068     	 ldr r0, [r0] 			
  94 0004 0068     	 ldr r0, [r0] 			
  95 0006 80F30888 	 msr msp, r0			
  96 000a 62B6     	 cpsie i				
  97 000c 61B6     	 cpsie f				
  98 000e BFF34F8F 	 dsb					
  99 0012 BFF36F8F 	 isb					
 100 0016 00DF     	 svc 0					
 101 0018 00BF     	 nop					
 102 001a 000008ED 	 .ltorg				
 102      00E0
 103              	
 104              	@ 0 "" 2
 248:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         " ldr r0, =0xE000ED08 	\n"/* Use the NVIC offset register to locate the stack. */
 249:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         " ldr r0, [r0] 			\n"
 250:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         " ldr r0, [r0] 			\n"
 251:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         " msr msp, r0			\n"/* Set the msp back to the start of the stack. */
 252:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         " cpsie i				\n"/* Globally enable interrupts. */
 253:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         " cpsie f				\n"
 254:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         " dsb					\n"
 255:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         " isb					\n"
 256:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         " svc 0					\n"/* System call to start first task. */
 257:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         " nop					\n"
 258:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         " .ltorg				\n"
 259:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         );
 260:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 105              		.loc 1 260 1 is_stmt 0 view .LVU14
 106              		.thumb
 107              		.syntax unified
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 11


 108              		.cfi_endproc
 109              	.LFE37:
 111              		.section	.text.pxPortInitialiseStack,"ax",%progbits
 112              		.align	1
 113              		.global	pxPortInitialiseStack
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 118              	pxPortInitialiseStack:
 119              	.LVL1:
 120              	.LFB34:
 182:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* Simulate the stack frame as it would be created by a context switch
 121              		.loc 1 182 1 is_stmt 1 view -0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 185:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 126              		.loc 1 185 5 view .LVU16
 186:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     pxTopOfStack--;
 127              		.loc 1 186 5 view .LVU17
 186:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     pxTopOfStack--;
 128              		.loc 1 186 19 is_stmt 0 view .LVU18
 129 0000 4FF08073 		mov	r3, #16777216
 130 0004 40F8043C 		str	r3, [r0, #-4]
 187:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 131              		.loc 1 187 5 is_stmt 1 view .LVU19
 132              	.LVL2:
 188:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     pxTopOfStack--;
 133              		.loc 1 188 5 view .LVU20
 188:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     pxTopOfStack--;
 134              		.loc 1 188 48 is_stmt 0 view .LVU21
 135 0008 21F00101 		bic	r1, r1, #1
 136              	.LVL3:
 188:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     pxTopOfStack--;
 137              		.loc 1 188 19 view .LVU22
 138 000c 40F8081C 		str	r1, [r0, #-8]
 189:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 139              		.loc 1 189 5 is_stmt 1 view .LVU23
 140              	.LVL4:
 190:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 141              		.loc 1 190 5 view .LVU24
 190:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 142              		.loc 1 190 21 is_stmt 0 view .LVU25
 143 0010 034B     		ldr	r3, .L6
 190:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 144              		.loc 1 190 19 view .LVU26
 145 0012 40F80C3C 		str	r3, [r0, #-12]
 191:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 146              		.loc 1 191 5 is_stmt 1 view .LVU27
 147              	.LVL5:
 192:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R
 148              		.loc 1 192 5 view .LVU28
 192:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R
 149              		.loc 1 192 19 is_stmt 0 view .LVU29
 150 0016 40F8202C 		str	r2, [r0, #-32]
 193:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 12


 151              		.loc 1 193 5 is_stmt 1 view .LVU30
 152              	.LVL6:
 195:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 153              		.loc 1 195 5 view .LVU31
 196:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 154              		.loc 1 196 1 is_stmt 0 view .LVU32
 155 001a 4038     		subs	r0, r0, #64
 156              	.LVL7:
 196:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 157              		.loc 1 196 1 view .LVU33
 158 001c 7047     		bx	lr
 159              	.L7:
 160 001e 00BF     		.align	2
 161              	.L6:
 162 0020 00000000 		.word	prvTaskExitError
 163              		.cfi_endproc
 164              	.LFE34:
 166              		.section	.text.vPortSVCHandler,"ax",%progbits
 167              		.align	1
 168              		.global	vPortSVCHandler
 169              		.syntax unified
 170              		.thumb
 171              		.thumb_func
 173              	vPortSVCHandler:
 174              	.LFB36:
 226:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     __asm volatile (
 175              		.loc 1 226 1 is_stmt 1 view -0
 176              		.cfi_startproc
 177              		@ Naked Function: prologue and epilogue provided by programmer.
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 227:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	ldr	r3, pxCurrentTCBConst2		\n"/* Restore the context. */
 180              		.loc 1 227 5 view .LVU35
 181              		.syntax unified
 182              	@ 227 "./FreeRTOS/portable/GCC/ARM_CM3/port.c" 1
 183 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 184 0002 1968     		ldr r1, [r3]					
 185 0004 0868     		ldr r0, [r1]					
 186 0006 B0E8F00F 		ldmia r0!, {r4-r11}				
 187 000a 80F30988 		msr psp, r0						
 188 000e BFF36F8F 		isb								
 189 0012 4FF00000 		mov r0, #0 						
 190 0016 80F31188 		msr	basepri, r0					
 191 001a 4EF00D0E 		orr r14, #0xd					
 192 001e 7047     		bx r14							
 193              										
 194              		.align 4						
 195 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 196              	
 197              	@ 0 "" 2
 242:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 198              		.loc 1 242 1 is_stmt 0 view .LVU36
 199              		.thumb
 200              		.syntax unified
 201              		.cfi_endproc
 202              	.LFE36:
 204              		.section	.text.vPortEndScheduler,"ax",%progbits
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 13


 205              		.align	1
 206              		.global	vPortEndScheduler
 207              		.syntax unified
 208              		.thumb
 209              		.thumb_func
 211              	vPortEndScheduler:
 212              	.LFB39:
 261:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 262:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 263:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
 264:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * See header file for description.
 265:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  */
 266:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** BaseType_t xPortStartScheduler( void )
 267:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 268:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 269:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 270:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 271:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 272:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     #if ( configASSERT_DEFINED == 1 )
 273:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     {
 274:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         volatile uint32_t ulOriginalPriority;
 275:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( port
 276:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         volatile uint8_t ucMaxPriorityValue;
 277:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 278:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         /* Determine the maximum priority from which ISR safe FreeRTOS API
 279:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****          * functions can be called.  ISR safe functions are those that end in
 280:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****          * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 281:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****          * ensure interrupt entry is as fast and simple as possible.
 282:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****          *
 283:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****          * Save the interrupt priority value that is about to be clobbered. */
 284:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         ulOriginalPriority = *pucFirstUserPriorityRegister;
 285:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 286:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         /* Determine the number of priority bits available.  First write to all
 287:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****          * possible bits. */
 288:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 289:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 290:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         /* Read the value back to see how many bits stuck. */
 291:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 292:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 293:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         /* Use the same mask on the maximum system call priority. */
 294:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 295:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 296:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         /* Calculate the maximum acceptable priority group value for the number
 297:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****          * of bits read back. */
 298:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 299:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 300:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 301:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         {
 302:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             ulMaxPRIGROUPValue--;
 303:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 304:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         }
 305:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 306:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         #ifdef __NVIC_PRIO_BITS
 307:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         {
 308:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             /* Check the CMSIS configuration that defines the number of
 309:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * priority bits matches the number of priority bits actually queried
 310:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * from the hardware. */
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 14


 311:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 312:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         }
 313:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         #endif
 314:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 315:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         #ifdef configPRIO_BITS
 316:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         {
 317:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             /* Check the FreeRTOS configuration that defines the number of
 318:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * priority bits matches the number of priority bits actually queried
 319:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * from the hardware. */
 320:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 321:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         }
 322:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         #endif
 323:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 324:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         /* Shift the priority group value back to its position within the AIRCR
 325:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****          * register. */
 326:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 327:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 328:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 329:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         /* Restore the clobbered interrupt priority register to its original
 330:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****          * value. */
 331:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         *pucFirstUserPriorityRegister = ulOriginalPriority;
 332:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     }
 333:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     #endif /* configASSERT_DEFINED */
 334:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 335:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* Make PendSV and SysTick the lowest priority interrupts. */
 336:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 337:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 338:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 339:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* Start the timer that generates the tick ISR.  Interrupts are disabled
 340:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * here already. */
 341:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     vPortSetupTimerInterrupt();
 342:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 343:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* Initialise the critical nesting count ready for the first task. */
 344:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     uxCriticalNesting = 0;
 345:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 346:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* Start the first task. */
 347:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     prvPortStartFirstTask();
 348:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 349:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* Should never get here as the tasks will now be executing!  Call the task
 350:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * exit error function to prevent compiler warnings about a static function
 351:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * not being called in the case that the application writer overrides this
 352:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * functionality by defining configTASK_RETURN_ADDRESS.  Call
 353:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * vTaskSwitchContext() so link time optimisation does not remove the
 354:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * symbol. */
 355:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     vTaskSwitchContext();
 356:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     prvTaskExitError();
 357:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 358:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* Should not get here! */
 359:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     return 0;
 360:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 361:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 362:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 363:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** void vPortEndScheduler( void )
 364:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 213              		.loc 1 364 1 is_stmt 1 view -0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 15


 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217              		@ link register save eliminated.
 365:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* Not implemented in ports where there is nothing to return to.
 366:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * Artificially force an assert. */
 367:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     configASSERT( uxCriticalNesting == 1000UL );
 218              		.loc 1 367 48 view .LVU38
 368:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 219              		.loc 1 368 1 is_stmt 0 view .LVU39
 220 0000 7047     		bx	lr
 221              		.cfi_endproc
 222              	.LFE39:
 224              		.section	.text.vPortEnterCritical,"ax",%progbits
 225              		.align	1
 226              		.global	vPortEnterCritical
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 231              	vPortEnterCritical:
 232              	.LFB40:
 369:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 370:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 371:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** void vPortEnterCritical( void )
 372:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 233              		.loc 1 372 1 is_stmt 1 view -0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 0, uses_anonymous_args = 0
 237              		@ link register save eliminated.
 373:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     portDISABLE_INTERRUPTS();
 238              		.loc 1 373 5 view .LVU41
 239              	.LBB14:
 240              	.LBI14:
 200:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 241              		.loc 2 200 34 view .LVU42
 242              	.LBB15:
 202:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 243              		.loc 2 202 9 view .LVU43
 244              		.loc 2 204 9 view .LVU44
 245              		.syntax unified
 246              	@ 204 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 247 0000 4FF0BF03 			mov r3, #191												
 248 0004 83F31188 		msr basepri, r3											
 249 0008 BFF36F8F 		isb														
 250 000c BFF34F8F 		dsb														
 251              	
 252              	@ 0 "" 2
 253              		.thumb
 254              		.syntax unified
 255              	.LBE15:
 256              	.LBE14:
 374:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     uxCriticalNesting++;
 257              		.loc 1 374 5 view .LVU45
 258              		.loc 1 374 22 is_stmt 0 view .LVU46
 259 0010 024A     		ldr	r2, .L11
 260 0012 1368     		ldr	r3, [r2]
 261 0014 0133     		adds	r3, r3, #1
 262 0016 1360     		str	r3, [r2]
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 16


 375:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 376:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* This is not the interrupt safe version of the enter critical function so
 377:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * assert() if it is being called from an interrupt context.  Only API
 378:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * functions that end in "FromISR" can be used in an interrupt.  Only assert if
 379:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * the critical nesting count is 1 to protect against recursive calls if the
 380:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * assert function also uses a critical section. */
 381:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     if( uxCriticalNesting == 1 )
 263              		.loc 1 381 5 is_stmt 1 view .LVU47
 382:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     {
 383:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 264              		.loc 1 383 77 view .LVU48
 384:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     }
 385:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 265              		.loc 1 385 1 is_stmt 0 view .LVU49
 266 0018 7047     		bx	lr
 267              	.L12:
 268 001a 00BF     		.align	2
 269              	.L11:
 270 001c 00000000 		.word	uxCriticalNesting
 271              		.cfi_endproc
 272              	.LFE40:
 274              		.section	.text.vPortExitCritical,"ax",%progbits
 275              		.align	1
 276              		.global	vPortExitCritical
 277              		.syntax unified
 278              		.thumb
 279              		.thumb_func
 281              	vPortExitCritical:
 282              	.LFB41:
 386:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 387:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 388:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** void vPortExitCritical( void )
 389:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 283              		.loc 1 389 1 is_stmt 1 view -0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287              		@ link register save eliminated.
 390:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     configASSERT( uxCriticalNesting );
 288              		.loc 1 390 38 view .LVU51
 391:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     uxCriticalNesting--;
 289              		.loc 1 391 5 view .LVU52
 290              		.loc 1 391 22 is_stmt 0 view .LVU53
 291 0000 034A     		ldr	r2, .L15
 292 0002 1368     		ldr	r3, [r2]
 293 0004 013B     		subs	r3, r3, #1
 294 0006 1360     		str	r3, [r2]
 392:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 393:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     if( uxCriticalNesting == 0 )
 295              		.loc 1 393 5 is_stmt 1 view .LVU54
 296              		.loc 1 393 7 is_stmt 0 view .LVU55
 297 0008 0BB9     		cbnz	r3, .L13
 394:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     {
 395:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         portENABLE_INTERRUPTS();
 298              		.loc 1 395 9 is_stmt 1 view .LVU56
 299              	.LVL8:
 300              	.LBB16:
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 17


 301              	.LBI16:
 205:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 206:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	mov %0, %1												\n"\
 207:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	msr basepri, %0											\n"\
 208:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	isb														\n"\
 209:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	dsb														\n"\
 210:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 211:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         );
 212:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 213:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 214:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 215:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 216:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 217:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 218:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 219:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 220:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile
 221:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 222:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	mrs %0, basepri											\n"\
 223:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	mov %1, %2												\n"\
 224:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	msr basepri, %1											\n"\
 225:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	isb														\n"\
 226:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	dsb														\n"\
 227:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 228:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         );
 229:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 230:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 231:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****          * warnings. */
 232:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         return ulOriginalBASEPRI;
 233:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 234:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 235:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 236:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 302              		.loc 2 236 34 view .LVU57
 303              	.LBB17:
 237:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 238:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile
 304              		.loc 2 238 9 view .LVU58
 305              		.syntax unified
 306              	@ 238 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 307 000a 83F31188 			msr basepri, r3	
 308              	@ 0 "" 2
 309              	.LVL9:
 310              		.thumb
 311              		.syntax unified
 312              	.L13:
 313              		.loc 2 238 9 is_stmt 0 view .LVU59
 314              	.LBE17:
 315              	.LBE16:
 396:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     }
 397:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 316              		.loc 1 397 1 view .LVU60
 317 000e 7047     		bx	lr
 318              	.L16:
 319              		.align	2
 320              	.L15:
 321 0010 00000000 		.word	uxCriticalNesting
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 18


 322              		.cfi_endproc
 323              	.LFE41:
 325              		.section	.text.xPortPendSVHandler,"ax",%progbits
 326              		.align	1
 327              		.global	xPortPendSVHandler
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 332              	xPortPendSVHandler:
 333              	.LFB42:
 398:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 399:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 400:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** void xPortPendSVHandler( void )
 401:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 334              		.loc 1 401 1 is_stmt 1 view -0
 335              		.cfi_startproc
 336              		@ Naked Function: prologue and epilogue provided by programmer.
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 402:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* This is a naked function. */
 403:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 404:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     __asm volatile
 339              		.loc 1 404 5 view .LVU62
 340              		.syntax unified
 341              	@ 404 "./FreeRTOS/portable/GCC/ARM_CM3/port.c" 1
 342 0000 EFF30980 			mrs r0, psp							
 343 0004 BFF36F8F 		isb									
 344              											
 345 0008 0D4B     		ldr	r3, pxCurrentTCBConst			
 346 000a 1A68     		ldr	r2, [r3]						
 347              											
 348 000c 20E9F00F 		stmdb r0!, {r4-r11}					
 349 0010 1060     		str r0, [r2]						
 350              											
 351 0012 2DE90840 		stmdb sp!, {r3, r14}				
 352 0016 4FF0BF00 		mov r0, #191							
 353 001a 80F31188 		msr basepri, r0						
 354 001e FFF7FEFF 		bl vTaskSwitchContext				
 355 0022 4FF00000 		mov r0, #0							
 356 0026 80F31188 		msr basepri, r0						
 357 002a BDE80840 		ldmia sp!, {r3, r14}				
 358              											
 359 002e 1968     		ldr r1, [r3]						
 360 0030 0868     		ldr r0, [r1]						
 361 0032 B0E8F00F 		ldmia r0!, {r4-r11}					
 362 0036 80F30988 		msr psp, r0							
 363 003a BFF36F8F 		isb									
 364 003e 7047     		bx r14								
 365              											
 366              		.align 4							
 367 0040 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 368              	
 369              	@ 0 "" 2
 405:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     (
 406:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	mrs r0, psp							\n"
 407:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	isb									\n"
 408:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "										\n"
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 19


 409:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	ldr	r3, pxCurrentTCBConst			\n"/* Get the location of the current TCB. */
 410:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	ldr	r2, [r3]						\n"
 411:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "										\n"
 412:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	stmdb r0!, {r4-r11}					\n"/* Save the remaining registers. */
 413:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	str r0, [r2]						\n"/* Save the new top of stack into the first member of the TCB. */
 414:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "										\n"
 415:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	stmdb sp!, {r3, r14}				\n"
 416:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	mov r0, %0							\n"
 417:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	msr basepri, r0						\n"
 418:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	bl vTaskSwitchContext				\n"
 419:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	mov r0, #0							\n"
 420:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	msr basepri, r0						\n"
 421:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	ldmia sp!, {r3, r14}				\n"
 422:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "										\n"/* Restore the context, including the critical nesting count. */
 423:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	ldr r1, [r3]						\n"
 424:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	ldr r0, [r1]						\n"/* The first item in pxCurrentTCB is the task top of stack. */
 425:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	ldmia r0!, {r4-r11}					\n"/* Pop the registers. */
 426:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	msr psp, r0							\n"
 427:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	isb									\n"
 428:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	bx r14								\n"
 429:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "										\n"
 430:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "	.align 4							\n"
 431:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         "pxCurrentTCBConst: .word pxCurrentTCB	\n"
 432:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 433:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     );
 434:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 370              		.loc 1 434 1 is_stmt 0 view .LVU63
 371              		.thumb
 372              		.syntax unified
 373              		.cfi_endproc
 374              	.LFE42:
 376              		.section	.text.xPortSysTickHandler,"ax",%progbits
 377              		.align	1
 378              		.global	xPortSysTickHandler
 379              		.syntax unified
 380              		.thumb
 381              		.thumb_func
 383              	xPortSysTickHandler:
 384              	.LFB43:
 435:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 436:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 437:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** void xPortSysTickHandler( void )
 438:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 385              		.loc 1 438 1 is_stmt 1 view -0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 0
 388              		@ frame_needed = 0, uses_anonymous_args = 0
 389 0000 08B5     		push	{r3, lr}
 390              	.LCFI2:
 391              		.cfi_def_cfa_offset 8
 392              		.cfi_offset 3, -8
 393              		.cfi_offset 14, -4
 439:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* The SysTick runs at the lowest interrupt priority, so when this interrupt
 440:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * executes all interrupts must be unmasked.  There is therefore no need to
 441:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * save and then restore the interrupt mask value as its value is already
 442:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****      * known. */
 443:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     portDISABLE_INTERRUPTS();
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 20


 394              		.loc 1 443 5 view .LVU65
 395              	.LBB18:
 396              	.LBI18:
 200:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 397              		.loc 2 200 34 view .LVU66
 398              	.LBB19:
 202:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 399              		.loc 2 202 9 view .LVU67
 204:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 400              		.loc 2 204 9 view .LVU68
 401              		.syntax unified
 402              	@ 204 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 403 0002 4FF0BF03 			mov r3, #191												
 404 0006 83F31188 		msr basepri, r3											
 405 000a BFF36F8F 		isb														
 406 000e BFF34F8F 		dsb														
 407              	
 408              	@ 0 "" 2
 409              		.thumb
 410              		.syntax unified
 411              	.LBE19:
 412              	.LBE18:
 444:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     {
 445:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         /* Increment the RTOS tick. */
 446:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         if( xTaskIncrementTick() != pdFALSE )
 413              		.loc 1 446 9 view .LVU69
 414              		.loc 1 446 13 is_stmt 0 view .LVU70
 415 0012 FFF7FEFF 		bl	xTaskIncrementTick
 416              	.LVL10:
 417              		.loc 1 446 11 view .LVU71
 418 0016 28B1     		cbz	r0, .L19
 447:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         {
 448:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             /* A context switch is required.  Context switching is performed in
 449:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * the PendSV interrupt.  Pend the PendSV interrupt. */
 450:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 419              		.loc 1 450 13 is_stmt 1 view .LVU72
 420              		.loc 1 450 35 is_stmt 0 view .LVU73
 421 0018 4FF0E023 		mov	r3, #-536813568
 422 001c 4FF08052 		mov	r2, #268435456
 423 0020 C3F8042D 		str	r2, [r3, #3332]
 424              	.L19:
 451:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         }
 452:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     }
 453:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     portENABLE_INTERRUPTS();
 425              		.loc 1 453 5 is_stmt 1 view .LVU74
 426              	.LVL11:
 427              	.LBB20:
 428              	.LBI20:
 236:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 429              		.loc 2 236 34 view .LVU75
 430              	.LBB21:
 431              		.loc 2 238 9 view .LVU76
 432 0024 0023     		movs	r3, #0
 433              		.syntax unified
 434              	@ 238 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 435 0026 83F31188 			msr basepri, r3	
 436              	@ 0 "" 2
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 21


 437              	.LVL12:
 438              		.loc 2 238 9 is_stmt 0 view .LVU77
 439              		.thumb
 440              		.syntax unified
 441              	.LBE21:
 442              	.LBE20:
 454:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 443              		.loc 1 454 1 view .LVU78
 444 002a 08BD     		pop	{r3, pc}
 445              		.cfi_endproc
 446              	.LFE43:
 448              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 449              		.align	1
 450              		.weak	vPortSetupTimerInterrupt
 451              		.syntax unified
 452              		.thumb
 453              		.thumb_func
 455              	vPortSetupTimerInterrupt:
 456              	.LFB44:
 455:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 456:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 457:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 458:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 459:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 460:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     {
 461:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickDecre
 462:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         TickType_t xModifiableIdleTime;
 463:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 464:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         /* Make sure the SysTick reload value does not overflow the counter. */
 465:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 466:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         {
 467:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 468:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         }
 469:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 470:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         /* Enter a critical section but don't use the taskENTER_CRITICAL()
 471:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****          * method as that will mask interrupts that should exit sleep mode. */
 472:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         __asm volatile ( "cpsid i" ::: "memory" );
 473:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         __asm volatile ( "dsb" );
 474:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         __asm volatile ( "isb" );
 475:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 476:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         /* If a context switch is pending or a task is waiting for the scheduler
 477:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****          * to be unsuspended then abandon the low power entry. */
 478:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 479:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         {
 480:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             /* Re-enable interrupts - see comments above the cpsid instruction
 481:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * above. */
 482:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 483:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         }
 484:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         else
 485:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         {
 486:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             /* Stop the SysTick momentarily.  The time the SysTick is stopped for
 487:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * is accounted for as best it can be, but using the tickless mode will
 488:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * inevitably result in some tiny drift of the time maintained by the
 489:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * kernel with respect to calendar time. */
 490:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BI
 491:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 492:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             /* Use the SysTick current-value register to determine the number of
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 22


 493:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * SysTick decrements remaining until the next tick interrupt.  If the
 494:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * current-value register is zero, then there are actually
 495:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * ulTimerCountsForOneTick decrements remaining, not zero, because the
 496:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * SysTick requests the interrupt when decrementing from 1 to 0. */
 497:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 498:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 499:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             if( ulSysTickDecrementsLeft == 0 )
 500:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             {
 501:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 ulSysTickDecrementsLeft = ulTimerCountsForOneTick;
 502:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             }
 503:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 504:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             /* Calculate the reload value required to wait xExpectedIdleTime
 505:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * tick periods.  -1 is used because this code normally executes part
 506:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * way through the first tick period.  But if the SysTick IRQ is now
 507:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * pending, then clear the IRQ, suppressing the first tick, and correct
 508:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * the reload value to reflect that the second tick period is already
 509:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * underway.  The expected idle time is always at least two ticks. */
 510:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             ulReloadValue = ulSysTickDecrementsLeft + ( ulTimerCountsForOneTick * ( xExpectedIdleTi
 511:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 512:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             if( ( portNVIC_INT_CTRL_REG & portNVIC_PEND_SYSTICK_SET_BIT ) != 0 )
 513:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             {
 514:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 portNVIC_INT_CTRL_REG = portNVIC_PEND_SYSTICK_CLEAR_BIT;
 515:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 ulReloadValue -= ulTimerCountsForOneTick;
 516:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             }
 517:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 518:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             if( ulReloadValue > ulStoppedTimerCompensation )
 519:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             {
 520:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 ulReloadValue -= ulStoppedTimerCompensation;
 521:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             }
 522:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 523:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             /* Set the new reload value. */
 524:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 525:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 526:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             /* Clear the SysTick count flag and set the count value back to
 527:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * zero. */
 528:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 529:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 530:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             /* Restart SysTick. */
 531:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 532:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 533:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             /* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 534:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * set its parameter to 0 to indicate that its implementation contains
 535:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * its own wait for interrupt or wait for event instruction, and so wfi
 536:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * should not be executed again.  However, the original expected idle
 537:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * time variable must remain unmodified, so a copy is taken. */
 538:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             xModifiableIdleTime = xExpectedIdleTime;
 539:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 540:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 541:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             if( xModifiableIdleTime > 0 )
 542:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             {
 543:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 __asm volatile ( "dsb" ::: "memory" );
 544:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 __asm volatile ( "wfi" );
 545:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 __asm volatile ( "isb" );
 546:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             }
 547:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 548:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 549:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 23


 550:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             /* Re-enable interrupts to allow the interrupt that brought the MCU
 551:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * out of sleep mode to execute immediately.  See comments above
 552:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * the cpsid instruction above. */
 553:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 554:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             __asm volatile ( "dsb" );
 555:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             __asm volatile ( "isb" );
 556:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 557:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             /* Disable interrupts again because the clock is about to be stopped
 558:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * and interrupts that execute while the clock is stopped will increase
 559:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * any slippage between the time maintained by the RTOS and calendar
 560:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * time. */
 561:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             __asm volatile ( "cpsid i" ::: "memory" );
 562:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             __asm volatile ( "dsb" );
 563:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             __asm volatile ( "isb" );
 564:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 565:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             /* Disable the SysTick clock without reading the
 566:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * portNVIC_SYSTICK_CTRL_REG register to ensure the
 567:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 568:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * the time the SysTick is stopped for is accounted for as best it can
 569:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * be, but using the tickless mode will inevitably result in some tiny
 570:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * drift of the time maintained by the kernel with respect to calendar
 571:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * time*/
 572:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BI
 573:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 574:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             /* Determine whether the SysTick has already counted to zero. */
 575:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 576:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             {
 577:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 uint32_t ulCalculatedLoadValue;
 578:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 579:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 /* The tick interrupt ended the sleep (or is now pending), and
 580:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                  * a new tick period has started.  Reset portNVIC_SYSTICK_LOAD_REG
 581:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                  * with whatever remains of the new tick period. */
 582:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portN
 583:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 584:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 /* Don't allow a tiny value, or values that have somehow
 585:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                  * underflowed because the post sleep hook did something
 586:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                  * that took too long or because the SysTick current-value register
 587:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                  * is zero. */
 588:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 if( ( ulCalculatedLoadValue <= ulStoppedTimerCompensation ) || ( ulCalculatedLoadVa
 589:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 {
 590:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                     ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 591:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 }
 592:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 593:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 594:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 595:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 /* As the pending tick will be processed as soon as this
 596:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                  * function exits, the tick value maintained by the tick is stepped
 597:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                  * forward by one less than the time spent waiting. */
 598:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 599:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             }
 600:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             else
 601:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             {
 602:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 /* Something other than the tick interrupt ended the sleep. */
 603:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 604:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 /* Use the SysTick current-value register to determine the
 605:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                  * number of SysTick decrements remaining until the expected idle
 606:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                  * time would have ended. */
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 24


 607:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 608:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 #if ( portNVIC_SYSTICK_CLK_BIT_CONFIG != portNVIC_SYSTICK_CLK_BIT )
 609:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 {
 610:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                     /* If the SysTick is not using the core clock, the current-
 611:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                      * value register might still be zero here.  In that case, the
 612:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                      * SysTick didn't load from the reload register, and there are
 613:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                      * ulReloadValue decrements remaining in the expected idle
 614:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                      * time, not zero. */
 615:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                     if( ulSysTickDecrementsLeft == 0 )
 616:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                     {
 617:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                         ulSysTickDecrementsLeft = ulReloadValue;
 618:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                     }
 619:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 }
 620:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 #endif /* portNVIC_SYSTICK_CLK_BIT_CONFIG */
 621:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 622:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 /* Work out how long the sleep lasted rounded to complete tick
 623:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                  * periods (not the ulReload value which accounted for part
 624:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                  * ticks). */
 625:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - ul
 626:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 627:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 /* How many complete tick periods passed while the processor
 628:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                  * was waiting? */
 629:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 630:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 631:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 /* The reload value is set to whatever fraction of a single tick
 632:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                  * period remains. */
 633:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOne
 634:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             }
 635:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 636:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             /* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG again,
 637:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * then set portNVIC_SYSTICK_LOAD_REG back to its standard value.  If
 638:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * the SysTick is not using the core clock, temporarily configure it to
 639:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * use the core clock.  This configuration forces the SysTick to load
 640:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * from portNVIC_SYSTICK_LOAD_REG immediately instead of at the next
 641:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * cycle of the other clock.  Then portNVIC_SYSTICK_LOAD_REG is ready
 642:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****              * to receive the standard value immediately. */
 643:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 644:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portN
 645:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             #if ( portNVIC_SYSTICK_CLK_BIT_CONFIG == portNVIC_SYSTICK_CLK_BIT )
 646:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             {
 647:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 648:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             }
 649:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             #else
 650:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             {
 651:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 /* The temporary usage of the core clock has served its purpose,
 652:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                  * as described above.  Resume usage of the other clock. */
 653:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT;
 654:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 655:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 656:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 {
 657:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                     /* The partial tick period already ended.  Be sure the SysTick
 658:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                      * counts it only once. */
 659:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0;
 660:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 }
 661:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 662:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 663:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****                 portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 25


 664:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             }
 665:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             #endif /* portNVIC_SYSTICK_CLK_BIT_CONFIG */
 666:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 667:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             /* Step the tick to account for any tick periods that elapsed. */
 668:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             vTaskStepTick( ulCompleteTickPeriods );
 669:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 670:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             /* Exit with interrupts enabled. */
 671:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 672:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         }
 673:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     }
 674:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 675:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 676:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 677:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 678:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*
 679:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 680:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  * frequency.
 681:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****  */
 682:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** __attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
 683:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** {
 457              		.loc 1 683 1 is_stmt 1 view -0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              		@ link register save eliminated.
 684:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* Calculate the constants required to configure the tick interrupt. */
 685:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     #if ( configUSE_TICKLESS_IDLE == 1 )
 686:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     {
 687:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 688:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 689:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****         ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTIC
 690:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     }
 691:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     #endif /* configUSE_TICKLESS_IDLE */
 692:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 693:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* Stop and clear the SysTick. */
 694:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     portNVIC_SYSTICK_CTRL_REG = 0UL;
 462              		.loc 1 694 5 view .LVU80
 463              		.loc 1 694 31 is_stmt 0 view .LVU81
 464 0000 4FF0E023 		mov	r3, #-536813568
 465 0004 0022     		movs	r2, #0
 466 0006 1A61     		str	r2, [r3, #16]
 695:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 467              		.loc 1 695 5 is_stmt 1 view .LVU82
 468              		.loc 1 695 40 is_stmt 0 view .LVU83
 469 0008 9A61     		str	r2, [r3, #24]
 696:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 697:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* Configure SysTick to interrupt at the requested rate. */
 698:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 470              		.loc 1 698 5 is_stmt 1 view .LVU84
 471              		.loc 1 698 31 is_stmt 0 view .LVU85
 472 000a 024A     		ldr	r2, .L22
 473 000c 5A61     		str	r2, [r3, #20]
 699:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | port
 474              		.loc 1 699 5 is_stmt 1 view .LVU86
 475              		.loc 1 699 31 is_stmt 0 view .LVU87
 476 000e 0722     		movs	r2, #7
 477 0010 1A61     		str	r2, [r3, #16]
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 26


 700:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 478              		.loc 1 700 1 view .LVU88
 479 0012 7047     		bx	lr
 480              	.L23:
 481              		.align	2
 482              	.L22:
 483 0014 3F190100 		.word	71999
 484              		.cfi_endproc
 485              	.LFE44:
 487              		.section	.text.xPortStartScheduler,"ax",%progbits
 488              		.align	1
 489              		.global	xPortStartScheduler
 490              		.syntax unified
 491              		.thumb
 492              		.thumb_func
 494              	xPortStartScheduler:
 495              	.LFB38:
 267:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     /* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 496              		.loc 1 267 1 is_stmt 1 view -0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 0
 499              		@ frame_needed = 0, uses_anonymous_args = 0
 500 0000 10B5     		push	{r4, lr}
 501              	.LCFI3:
 502              		.cfi_def_cfa_offset 8
 503              		.cfi_offset 4, -8
 504              		.cfi_offset 14, -4
 270:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 505              		.loc 1 270 57 view .LVU90
 336:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 506              		.loc 1 336 5 view .LVU91
 507 0002 4FF0E023 		mov	r3, #-536813568
 508 0006 D3F8202D 		ldr	r2, [r3, #3360]
 336:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 509              		.loc 1 336 24 is_stmt 0 view .LVU92
 510 000a 42F47F02 		orr	r2, r2, #16711680
 511 000e C3F8202D 		str	r2, [r3, #3360]
 337:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 512              		.loc 1 337 5 is_stmt 1 view .LVU93
 513 0012 D3F8202D 		ldr	r2, [r3, #3360]
 337:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 514              		.loc 1 337 24 is_stmt 0 view .LVU94
 515 0016 42F07F42 		orr	r2, r2, #-16777216
 516 001a C3F8202D 		str	r2, [r3, #3360]
 341:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 517              		.loc 1 341 5 is_stmt 1 view .LVU95
 518 001e FFF7FEFF 		bl	vPortSetupTimerInterrupt
 519              	.LVL13:
 344:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 520              		.loc 1 344 5 view .LVU96
 344:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 521              		.loc 1 344 23 is_stmt 0 view .LVU97
 522 0022 0024     		movs	r4, #0
 523 0024 044B     		ldr	r3, .L26
 524 0026 1C60     		str	r4, [r3]
 347:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 525              		.loc 1 347 5 is_stmt 1 view .LVU98
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 27


 526 0028 FFF7FEFF 		bl	prvPortStartFirstTask
 527              	.LVL14:
 355:./FreeRTOS/portable/GCC/ARM_CM3/port.c ****     prvTaskExitError();
 528              		.loc 1 355 5 view .LVU99
 529 002c FFF7FEFF 		bl	vTaskSwitchContext
 530              	.LVL15:
 356:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** 
 531              		.loc 1 356 5 view .LVU100
 532 0030 FFF7FEFF 		bl	prvTaskExitError
 533              	.LVL16:
 359:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** }
 534              		.loc 1 359 5 view .LVU101
 360:./FreeRTOS/portable/GCC/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 535              		.loc 1 360 1 is_stmt 0 view .LVU102
 536 0034 2046     		mov	r0, r4
 537 0036 10BD     		pop	{r4, pc}
 538              	.L27:
 539              		.align	2
 540              	.L26:
 541 0038 00000000 		.word	uxCriticalNesting
 542              		.cfi_endproc
 543              	.LFE38:
 545              		.section	.data.uxCriticalNesting,"aw"
 546              		.align	2
 549              	uxCriticalNesting:
 550 0000 AAAAAAAA 		.word	-1431655766
 551              		.text
 552              	.Letext0:
 553              		.file 3 "c:\\vscode_tool_chain\\gcc\\12.2 mpacbti-rel1\\arm-none-eabi\\include\\machine\\_default_
 554              		.file 4 "c:\\vscode_tool_chain\\gcc\\12.2 mpacbti-rel1\\arm-none-eabi\\include\\sys\\_stdint.h"
 555              		.file 5 "FreeRTOS/include/projdefs.h"
 556              		.file 6 "FreeRTOS/include/task.h"
ARM GAS  C:\Users\24105\AppData\Local\Temp\cccZScJa.s 			page 28


DEFINED SYMBOLS
                            *ABS*:00000000 port.c
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:19     .text.prvTaskExitError:00000000 $t
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:24     .text.prvTaskExitError:00000000 prvTaskExitError
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:77     .text.prvPortStartFirstTask:00000000 $t
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:82     .text.prvPortStartFirstTask:00000000 prvPortStartFirstTask
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:102    .text.prvPortStartFirstTask:0000001a $d
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:102    .text.prvPortStartFirstTask:0000001c $d
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:112    .text.pxPortInitialiseStack:00000000 $t
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:118    .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:162    .text.pxPortInitialiseStack:00000020 $d
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:167    .text.vPortSVCHandler:00000000 $t
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:173    .text.vPortSVCHandler:00000000 vPortSVCHandler
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:195    .text.vPortSVCHandler:00000020 pxCurrentTCBConst2
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:195    .text.vPortSVCHandler:00000020 $d
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:205    .text.vPortEndScheduler:00000000 $t
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:211    .text.vPortEndScheduler:00000000 vPortEndScheduler
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:225    .text.vPortEnterCritical:00000000 $t
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:231    .text.vPortEnterCritical:00000000 vPortEnterCritical
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:270    .text.vPortEnterCritical:0000001c $d
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:549    .data.uxCriticalNesting:00000000 uxCriticalNesting
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:275    .text.vPortExitCritical:00000000 $t
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:281    .text.vPortExitCritical:00000000 vPortExitCritical
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:321    .text.vPortExitCritical:00000010 $d
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:326    .text.xPortPendSVHandler:00000000 $t
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:332    .text.xPortPendSVHandler:00000000 xPortPendSVHandler
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:367    .text.xPortPendSVHandler:00000040 pxCurrentTCBConst
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:367    .text.xPortPendSVHandler:00000040 $d
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:377    .text.xPortSysTickHandler:00000000 $t
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:383    .text.xPortSysTickHandler:00000000 xPortSysTickHandler
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:449    .text.vPortSetupTimerInterrupt:00000000 $t
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:455    .text.vPortSetupTimerInterrupt:00000000 vPortSetupTimerInterrupt
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:483    .text.vPortSetupTimerInterrupt:00000014 $d
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:488    .text.xPortStartScheduler:00000000 $t
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:494    .text.xPortStartScheduler:00000000 xPortStartScheduler
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:541    .text.xPortStartScheduler:00000038 $d
C:\Users\24105\AppData\Local\Temp\cccZScJa.s:546    .data.uxCriticalNesting:00000000 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
