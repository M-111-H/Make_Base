ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"event_groups.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "./FreeRTOS/event_groups.c"
  18              		.section	.text.prvTestWaitCondition,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	prvTestWaitCondition:
  25              	.LVL0:
  26              	.LFB43:
   1:./FreeRTOS/event_groups.c **** /*
   2:./FreeRTOS/event_groups.c ****  * FreeRTOS Kernel V10.5.1
   3:./FreeRTOS/event_groups.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./FreeRTOS/event_groups.c ****  *
   5:./FreeRTOS/event_groups.c ****  * SPDX-License-Identifier: MIT
   6:./FreeRTOS/event_groups.c ****  *
   7:./FreeRTOS/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:./FreeRTOS/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:./FreeRTOS/event_groups.c ****  * the Software without restriction, including without limitation the rights to
  10:./FreeRTOS/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:./FreeRTOS/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:./FreeRTOS/event_groups.c ****  * subject to the following conditions:
  13:./FreeRTOS/event_groups.c ****  *
  14:./FreeRTOS/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  15:./FreeRTOS/event_groups.c ****  * copies or substantial portions of the Software.
  16:./FreeRTOS/event_groups.c ****  *
  17:./FreeRTOS/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:./FreeRTOS/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:./FreeRTOS/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:./FreeRTOS/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:./FreeRTOS/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:./FreeRTOS/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:./FreeRTOS/event_groups.c ****  *
  24:./FreeRTOS/event_groups.c ****  * https://www.FreeRTOS.org
  25:./FreeRTOS/event_groups.c ****  * https://github.com/FreeRTOS
  26:./FreeRTOS/event_groups.c ****  *
  27:./FreeRTOS/event_groups.c ****  */
  28:./FreeRTOS/event_groups.c **** 
  29:./FreeRTOS/event_groups.c **** /* Standard includes. */
  30:./FreeRTOS/event_groups.c **** #include <stdlib.h>
  31:./FreeRTOS/event_groups.c **** 
  32:./FreeRTOS/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 2


  33:./FreeRTOS/event_groups.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:./FreeRTOS/event_groups.c ****  * task.h is included from an application file. */
  35:./FreeRTOS/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:./FreeRTOS/event_groups.c **** 
  37:./FreeRTOS/event_groups.c **** /* FreeRTOS includes. */
  38:./FreeRTOS/event_groups.c **** #include "FreeRTOS.h"
  39:./FreeRTOS/event_groups.c **** #include "task.h"
  40:./FreeRTOS/event_groups.c **** #include "timers.h"
  41:./FreeRTOS/event_groups.c **** #include "event_groups.h"
  42:./FreeRTOS/event_groups.c **** 
  43:./FreeRTOS/event_groups.c **** /* Lint e961, e750 and e9021 are suppressed as a MISRA exception justified
  44:./FreeRTOS/event_groups.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:./FreeRTOS/event_groups.c ****  * for the header files above, but not in this file, in order to generate the
  46:./FreeRTOS/event_groups.c ****  * correct privileged Vs unprivileged linkage and placement. */
  47:./FreeRTOS/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021 See comment above. */
  48:./FreeRTOS/event_groups.c **** 
  49:./FreeRTOS/event_groups.c **** /* The following bit fields convey control information in a task's event list
  50:./FreeRTOS/event_groups.c ****  * item value.  It is important they don't clash with the
  51:./FreeRTOS/event_groups.c ****  * taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  52:./FreeRTOS/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  53:./FreeRTOS/event_groups.c ****     #define eventCLEAR_EVENTS_ON_EXIT_BIT    0x0100U
  54:./FreeRTOS/event_groups.c ****     #define eventUNBLOCKED_DUE_TO_BIT_SET    0x0200U
  55:./FreeRTOS/event_groups.c ****     #define eventWAIT_FOR_ALL_BITS           0x0400U
  56:./FreeRTOS/event_groups.c ****     #define eventEVENT_BITS_CONTROL_BYTES    0xff00U
  57:./FreeRTOS/event_groups.c **** #else
  58:./FreeRTOS/event_groups.c ****     #define eventCLEAR_EVENTS_ON_EXIT_BIT    0x01000000UL
  59:./FreeRTOS/event_groups.c ****     #define eventUNBLOCKED_DUE_TO_BIT_SET    0x02000000UL
  60:./FreeRTOS/event_groups.c ****     #define eventWAIT_FOR_ALL_BITS           0x04000000UL
  61:./FreeRTOS/event_groups.c ****     #define eventEVENT_BITS_CONTROL_BYTES    0xff000000UL
  62:./FreeRTOS/event_groups.c **** #endif
  63:./FreeRTOS/event_groups.c **** 
  64:./FreeRTOS/event_groups.c **** typedef struct EventGroupDef_t
  65:./FreeRTOS/event_groups.c **** {
  66:./FreeRTOS/event_groups.c ****     EventBits_t uxEventBits;
  67:./FreeRTOS/event_groups.c ****     List_t xTasksWaitingForBits; /*< List of tasks waiting for a bit to be set. */
  68:./FreeRTOS/event_groups.c **** 
  69:./FreeRTOS/event_groups.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
  70:./FreeRTOS/event_groups.c ****         UBaseType_t uxEventGroupNumber;
  71:./FreeRTOS/event_groups.c ****     #endif
  72:./FreeRTOS/event_groups.c **** 
  73:./FreeRTOS/event_groups.c ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  74:./FreeRTOS/event_groups.c ****         uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated
  75:./FreeRTOS/event_groups.c ****     #endif
  76:./FreeRTOS/event_groups.c **** } EventGroup_t;
  77:./FreeRTOS/event_groups.c **** 
  78:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
  79:./FreeRTOS/event_groups.c **** 
  80:./FreeRTOS/event_groups.c **** /*
  81:./FreeRTOS/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  82:./FreeRTOS/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  83:./FreeRTOS/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  84:./FreeRTOS/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  85:./FreeRTOS/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  86:./FreeRTOS/event_groups.c ****  * in uxCurrentEventBits.
  87:./FreeRTOS/event_groups.c ****  */
  88:./FreeRTOS/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
  89:./FreeRTOS/event_groups.c ****                                         const EventBits_t uxBitsToWaitFor,
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 3


  90:./FreeRTOS/event_groups.c ****                                         const BaseType_t xWaitForAllBits ) PRIVILEGED_FUNCTION;
  91:./FreeRTOS/event_groups.c **** 
  92:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
  93:./FreeRTOS/event_groups.c **** 
  94:./FreeRTOS/event_groups.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
  95:./FreeRTOS/event_groups.c **** 
  96:./FreeRTOS/event_groups.c ****     EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t * pxEventGroupBuffer )
  97:./FreeRTOS/event_groups.c ****     {
  98:./FreeRTOS/event_groups.c ****         EventGroup_t * pxEventBits;
  99:./FreeRTOS/event_groups.c **** 
 100:./FreeRTOS/event_groups.c ****         /* A StaticEventGroup_t object must be provided. */
 101:./FreeRTOS/event_groups.c ****         configASSERT( pxEventGroupBuffer );
 102:./FreeRTOS/event_groups.c **** 
 103:./FreeRTOS/event_groups.c ****         #if ( configASSERT_DEFINED == 1 )
 104:./FreeRTOS/event_groups.c ****         {
 105:./FreeRTOS/event_groups.c ****             /* Sanity check that the size of the structure used to declare a
 106:./FreeRTOS/event_groups.c ****              * variable of type StaticEventGroup_t equals the size of the real
 107:./FreeRTOS/event_groups.c ****              * event group structure. */
 108:./FreeRTOS/event_groups.c ****             volatile size_t xSize = sizeof( StaticEventGroup_t );
 109:./FreeRTOS/event_groups.c ****             configASSERT( xSize == sizeof( EventGroup_t ) );
 110:./FreeRTOS/event_groups.c ****         } /*lint !e529 xSize is referenced if configASSERT() is defined. */
 111:./FreeRTOS/event_groups.c ****         #endif /* configASSERT_DEFINED */
 112:./FreeRTOS/event_groups.c **** 
 113:./FreeRTOS/event_groups.c ****         /* The user has provided a statically allocated event group - use it. */
 114:./FreeRTOS/event_groups.c ****         pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and S
 115:./FreeRTOS/event_groups.c **** 
 116:./FreeRTOS/event_groups.c ****         if( pxEventBits != NULL )
 117:./FreeRTOS/event_groups.c ****         {
 118:./FreeRTOS/event_groups.c ****             pxEventBits->uxEventBits = 0;
 119:./FreeRTOS/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 120:./FreeRTOS/event_groups.c **** 
 121:./FreeRTOS/event_groups.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 122:./FreeRTOS/event_groups.c ****             {
 123:./FreeRTOS/event_groups.c ****                 /* Both static and dynamic allocation can be used, so note that
 124:./FreeRTOS/event_groups.c ****                  * this event group was created statically in case the event group
 125:./FreeRTOS/event_groups.c ****                  * is later deleted. */
 126:./FreeRTOS/event_groups.c ****                 pxEventBits->ucStaticallyAllocated = pdTRUE;
 127:./FreeRTOS/event_groups.c ****             }
 128:./FreeRTOS/event_groups.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 129:./FreeRTOS/event_groups.c **** 
 130:./FreeRTOS/event_groups.c ****             traceEVENT_GROUP_CREATE( pxEventBits );
 131:./FreeRTOS/event_groups.c ****         }
 132:./FreeRTOS/event_groups.c ****         else
 133:./FreeRTOS/event_groups.c ****         {
 134:./FreeRTOS/event_groups.c ****             /* xEventGroupCreateStatic should only ever be called with
 135:./FreeRTOS/event_groups.c ****              * pxEventGroupBuffer pointing to a pre-allocated (compile time
 136:./FreeRTOS/event_groups.c ****              * allocated) StaticEventGroup_t variable. */
 137:./FreeRTOS/event_groups.c ****             traceEVENT_GROUP_CREATE_FAILED();
 138:./FreeRTOS/event_groups.c ****         }
 139:./FreeRTOS/event_groups.c **** 
 140:./FreeRTOS/event_groups.c ****         return pxEventBits;
 141:./FreeRTOS/event_groups.c ****     }
 142:./FreeRTOS/event_groups.c **** 
 143:./FreeRTOS/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 144:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 145:./FreeRTOS/event_groups.c **** 
 146:./FreeRTOS/event_groups.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 4


 147:./FreeRTOS/event_groups.c **** 
 148:./FreeRTOS/event_groups.c ****     EventGroupHandle_t xEventGroupCreate( void )
 149:./FreeRTOS/event_groups.c ****     {
 150:./FreeRTOS/event_groups.c ****         EventGroup_t * pxEventBits;
 151:./FreeRTOS/event_groups.c **** 
 152:./FreeRTOS/event_groups.c ****         /* Allocate the event group.  Justification for MISRA deviation as
 153:./FreeRTOS/event_groups.c ****          * follows:  pvPortMalloc() always ensures returned memory blocks are
 154:./FreeRTOS/event_groups.c ****          * aligned per the requirements of the MCU stack.  In this case
 155:./FreeRTOS/event_groups.c ****          * pvPortMalloc() must return a pointer that is guaranteed to meet the
 156:./FreeRTOS/event_groups.c ****          * alignment requirements of the EventGroup_t structure - which (if you
 157:./FreeRTOS/event_groups.c ****          * follow it through) is the alignment requirements of the TickType_t type
 158:./FreeRTOS/event_groups.c ****          * (EventBits_t being of TickType_t itself).  Therefore, whenever the
 159:./FreeRTOS/event_groups.c ****          * stack alignment requirements are greater than or equal to the
 160:./FreeRTOS/event_groups.c ****          * TickType_t alignment requirements the cast is safe.  In other cases,
 161:./FreeRTOS/event_groups.c ****          * where the natural word size of the architecture is less than
 162:./FreeRTOS/event_groups.c ****          * sizeof( TickType_t ), the TickType_t variables will be accessed in two
 163:./FreeRTOS/event_groups.c ****          * or more reads operations, and the alignment requirements is only that
 164:./FreeRTOS/event_groups.c ****          * of each individual read. */
 165:./FreeRTOS/event_groups.c ****         pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e90
 166:./FreeRTOS/event_groups.c **** 
 167:./FreeRTOS/event_groups.c ****         if( pxEventBits != NULL )
 168:./FreeRTOS/event_groups.c ****         {
 169:./FreeRTOS/event_groups.c ****             pxEventBits->uxEventBits = 0;
 170:./FreeRTOS/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 171:./FreeRTOS/event_groups.c **** 
 172:./FreeRTOS/event_groups.c ****             #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 173:./FreeRTOS/event_groups.c ****             {
 174:./FreeRTOS/event_groups.c ****                 /* Both static and dynamic allocation can be used, so note this
 175:./FreeRTOS/event_groups.c ****                  * event group was allocated statically in case the event group is
 176:./FreeRTOS/event_groups.c ****                  * later deleted. */
 177:./FreeRTOS/event_groups.c ****                 pxEventBits->ucStaticallyAllocated = pdFALSE;
 178:./FreeRTOS/event_groups.c ****             }
 179:./FreeRTOS/event_groups.c ****             #endif /* configSUPPORT_STATIC_ALLOCATION */
 180:./FreeRTOS/event_groups.c **** 
 181:./FreeRTOS/event_groups.c ****             traceEVENT_GROUP_CREATE( pxEventBits );
 182:./FreeRTOS/event_groups.c ****         }
 183:./FreeRTOS/event_groups.c ****         else
 184:./FreeRTOS/event_groups.c ****         {
 185:./FreeRTOS/event_groups.c ****             traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracin
 186:./FreeRTOS/event_groups.c ****         }
 187:./FreeRTOS/event_groups.c **** 
 188:./FreeRTOS/event_groups.c ****         return pxEventBits;
 189:./FreeRTOS/event_groups.c ****     }
 190:./FreeRTOS/event_groups.c **** 
 191:./FreeRTOS/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 192:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 193:./FreeRTOS/event_groups.c **** 
 194:./FreeRTOS/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,
 195:./FreeRTOS/event_groups.c ****                              const EventBits_t uxBitsToSet,
 196:./FreeRTOS/event_groups.c ****                              const EventBits_t uxBitsToWaitFor,
 197:./FreeRTOS/event_groups.c ****                              TickType_t xTicksToWait )
 198:./FreeRTOS/event_groups.c **** {
 199:./FreeRTOS/event_groups.c ****     EventBits_t uxOriginalBitValue, uxReturn;
 200:./FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 201:./FreeRTOS/event_groups.c ****     BaseType_t xAlreadyYielded;
 202:./FreeRTOS/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 203:./FreeRTOS/event_groups.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 5


 204:./FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 205:./FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 206:./FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 207:./FreeRTOS/event_groups.c ****     {
 208:./FreeRTOS/event_groups.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
 209:./FreeRTOS/event_groups.c ****     }
 210:./FreeRTOS/event_groups.c ****     #endif
 211:./FreeRTOS/event_groups.c **** 
 212:./FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 213:./FreeRTOS/event_groups.c ****     {
 214:./FreeRTOS/event_groups.c ****         uxOriginalBitValue = pxEventBits->uxEventBits;
 215:./FreeRTOS/event_groups.c **** 
 216:./FreeRTOS/event_groups.c ****         ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 217:./FreeRTOS/event_groups.c **** 
 218:./FreeRTOS/event_groups.c ****         if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 219:./FreeRTOS/event_groups.c ****         {
 220:./FreeRTOS/event_groups.c ****             /* All the rendezvous bits are now set - no need to block. */
 221:./FreeRTOS/event_groups.c ****             uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 222:./FreeRTOS/event_groups.c **** 
 223:./FreeRTOS/event_groups.c ****             /* Rendezvous always clear the bits.  They will have been cleared
 224:./FreeRTOS/event_groups.c ****              * already unless this is the only task in the rendezvous. */
 225:./FreeRTOS/event_groups.c ****             pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 226:./FreeRTOS/event_groups.c **** 
 227:./FreeRTOS/event_groups.c ****             xTicksToWait = 0;
 228:./FreeRTOS/event_groups.c ****         }
 229:./FreeRTOS/event_groups.c ****         else
 230:./FreeRTOS/event_groups.c ****         {
 231:./FreeRTOS/event_groups.c ****             if( xTicksToWait != ( TickType_t ) 0 )
 232:./FreeRTOS/event_groups.c ****             {
 233:./FreeRTOS/event_groups.c ****                 traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 234:./FreeRTOS/event_groups.c **** 
 235:./FreeRTOS/event_groups.c ****                 /* Store the bits that the calling task is waiting for in the
 236:./FreeRTOS/event_groups.c ****                  * task's event list item so the kernel knows when a match is
 237:./FreeRTOS/event_groups.c ****                  * found.  Then enter the blocked state. */
 238:./FreeRTOS/event_groups.c ****                 vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToW
 239:./FreeRTOS/event_groups.c **** 
 240:./FreeRTOS/event_groups.c ****                 /* This assignment is obsolete as uxReturn will get set after
 241:./FreeRTOS/event_groups.c ****                  * the task unblocks, but some compilers mistakenly generate a
 242:./FreeRTOS/event_groups.c ****                  * warning about uxReturn being returned without being set if the
 243:./FreeRTOS/event_groups.c ****                  * assignment is omitted. */
 244:./FreeRTOS/event_groups.c ****                 uxReturn = 0;
 245:./FreeRTOS/event_groups.c ****             }
 246:./FreeRTOS/event_groups.c ****             else
 247:./FreeRTOS/event_groups.c ****             {
 248:./FreeRTOS/event_groups.c ****                 /* The rendezvous bits were not set, but no block time was
 249:./FreeRTOS/event_groups.c ****                  * specified - just return the current event bit value. */
 250:./FreeRTOS/event_groups.c ****                 uxReturn = pxEventBits->uxEventBits;
 251:./FreeRTOS/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 252:./FreeRTOS/event_groups.c ****             }
 253:./FreeRTOS/event_groups.c ****         }
 254:./FreeRTOS/event_groups.c ****     }
 255:./FreeRTOS/event_groups.c ****     xAlreadyYielded = xTaskResumeAll();
 256:./FreeRTOS/event_groups.c **** 
 257:./FreeRTOS/event_groups.c ****     if( xTicksToWait != ( TickType_t ) 0 )
 258:./FreeRTOS/event_groups.c ****     {
 259:./FreeRTOS/event_groups.c ****         if( xAlreadyYielded == pdFALSE )
 260:./FreeRTOS/event_groups.c ****         {
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 6


 261:./FreeRTOS/event_groups.c ****             portYIELD_WITHIN_API();
 262:./FreeRTOS/event_groups.c ****         }
 263:./FreeRTOS/event_groups.c ****         else
 264:./FreeRTOS/event_groups.c ****         {
 265:./FreeRTOS/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 266:./FreeRTOS/event_groups.c ****         }
 267:./FreeRTOS/event_groups.c **** 
 268:./FreeRTOS/event_groups.c ****         /* The task blocked to wait for its required bits to be set - at this
 269:./FreeRTOS/event_groups.c ****          * point either the required bits were set or the block time expired.  If
 270:./FreeRTOS/event_groups.c ****          * the required bits were set they will have been stored in the task's
 271:./FreeRTOS/event_groups.c ****          * event list item, and they should now be retrieved then cleared. */
 272:./FreeRTOS/event_groups.c ****         uxReturn = uxTaskResetEventItemValue();
 273:./FreeRTOS/event_groups.c **** 
 274:./FreeRTOS/event_groups.c ****         if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 275:./FreeRTOS/event_groups.c ****         {
 276:./FreeRTOS/event_groups.c ****             /* The task timed out, just return the current event bit value. */
 277:./FreeRTOS/event_groups.c ****             taskENTER_CRITICAL();
 278:./FreeRTOS/event_groups.c ****             {
 279:./FreeRTOS/event_groups.c ****                 uxReturn = pxEventBits->uxEventBits;
 280:./FreeRTOS/event_groups.c **** 
 281:./FreeRTOS/event_groups.c ****                 /* Although the task got here because it timed out before the
 282:./FreeRTOS/event_groups.c ****                  * bits it was waiting for were set, it is possible that since it
 283:./FreeRTOS/event_groups.c ****                  * unblocked another task has set the bits.  If this is the case
 284:./FreeRTOS/event_groups.c ****                  * then it needs to clear the bits before exiting. */
 285:./FreeRTOS/event_groups.c ****                 if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 286:./FreeRTOS/event_groups.c ****                 {
 287:./FreeRTOS/event_groups.c ****                     pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 288:./FreeRTOS/event_groups.c ****                 }
 289:./FreeRTOS/event_groups.c ****                 else
 290:./FreeRTOS/event_groups.c ****                 {
 291:./FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 292:./FreeRTOS/event_groups.c ****                 }
 293:./FreeRTOS/event_groups.c ****             }
 294:./FreeRTOS/event_groups.c ****             taskEXIT_CRITICAL();
 295:./FreeRTOS/event_groups.c **** 
 296:./FreeRTOS/event_groups.c ****             xTimeoutOccurred = pdTRUE;
 297:./FreeRTOS/event_groups.c ****         }
 298:./FreeRTOS/event_groups.c ****         else
 299:./FreeRTOS/event_groups.c ****         {
 300:./FreeRTOS/event_groups.c ****             /* The task unblocked because the bits were set. */
 301:./FreeRTOS/event_groups.c ****         }
 302:./FreeRTOS/event_groups.c **** 
 303:./FreeRTOS/event_groups.c ****         /* Control bits might be set as the task had blocked should not be
 304:./FreeRTOS/event_groups.c ****          * returned. */
 305:./FreeRTOS/event_groups.c ****         uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 306:./FreeRTOS/event_groups.c ****     }
 307:./FreeRTOS/event_groups.c **** 
 308:./FreeRTOS/event_groups.c ****     traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 309:./FreeRTOS/event_groups.c **** 
 310:./FreeRTOS/event_groups.c ****     /* Prevent compiler warnings when trace macros are not used. */
 311:./FreeRTOS/event_groups.c ****     ( void ) xTimeoutOccurred;
 312:./FreeRTOS/event_groups.c **** 
 313:./FreeRTOS/event_groups.c ****     return uxReturn;
 314:./FreeRTOS/event_groups.c **** }
 315:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 316:./FreeRTOS/event_groups.c **** 
 317:./FreeRTOS/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 7


 318:./FreeRTOS/event_groups.c ****                                  const EventBits_t uxBitsToWaitFor,
 319:./FreeRTOS/event_groups.c ****                                  const BaseType_t xClearOnExit,
 320:./FreeRTOS/event_groups.c ****                                  const BaseType_t xWaitForAllBits,
 321:./FreeRTOS/event_groups.c ****                                  TickType_t xTicksToWait )
 322:./FreeRTOS/event_groups.c **** {
 323:./FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 324:./FreeRTOS/event_groups.c ****     EventBits_t uxReturn, uxControlBits = 0;
 325:./FreeRTOS/event_groups.c ****     BaseType_t xWaitConditionMet, xAlreadyYielded;
 326:./FreeRTOS/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 327:./FreeRTOS/event_groups.c **** 
 328:./FreeRTOS/event_groups.c ****     /* Check the user is not attempting to wait on the bits used by the kernel
 329:./FreeRTOS/event_groups.c ****      * itself, and that at least one bit is being requested. */
 330:./FreeRTOS/event_groups.c ****     configASSERT( xEventGroup );
 331:./FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 332:./FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 333:./FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 334:./FreeRTOS/event_groups.c ****     {
 335:./FreeRTOS/event_groups.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
 336:./FreeRTOS/event_groups.c ****     }
 337:./FreeRTOS/event_groups.c ****     #endif
 338:./FreeRTOS/event_groups.c **** 
 339:./FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 340:./FreeRTOS/event_groups.c ****     {
 341:./FreeRTOS/event_groups.c ****         const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 342:./FreeRTOS/event_groups.c **** 
 343:./FreeRTOS/event_groups.c ****         /* Check to see if the wait condition is already met or not. */
 344:./FreeRTOS/event_groups.c ****         xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllB
 345:./FreeRTOS/event_groups.c **** 
 346:./FreeRTOS/event_groups.c ****         if( xWaitConditionMet != pdFALSE )
 347:./FreeRTOS/event_groups.c ****         {
 348:./FreeRTOS/event_groups.c ****             /* The wait condition has already been met so there is no need to
 349:./FreeRTOS/event_groups.c ****              * block. */
 350:./FreeRTOS/event_groups.c ****             uxReturn = uxCurrentEventBits;
 351:./FreeRTOS/event_groups.c ****             xTicksToWait = ( TickType_t ) 0;
 352:./FreeRTOS/event_groups.c **** 
 353:./FreeRTOS/event_groups.c ****             /* Clear the wait bits if requested to do so. */
 354:./FreeRTOS/event_groups.c ****             if( xClearOnExit != pdFALSE )
 355:./FreeRTOS/event_groups.c ****             {
 356:./FreeRTOS/event_groups.c ****                 pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 357:./FreeRTOS/event_groups.c ****             }
 358:./FreeRTOS/event_groups.c ****             else
 359:./FreeRTOS/event_groups.c ****             {
 360:./FreeRTOS/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 361:./FreeRTOS/event_groups.c ****             }
 362:./FreeRTOS/event_groups.c ****         }
 363:./FreeRTOS/event_groups.c ****         else if( xTicksToWait == ( TickType_t ) 0 )
 364:./FreeRTOS/event_groups.c ****         {
 365:./FreeRTOS/event_groups.c ****             /* The wait condition has not been met, but no block time was
 366:./FreeRTOS/event_groups.c ****              * specified, so just return the current value. */
 367:./FreeRTOS/event_groups.c ****             uxReturn = uxCurrentEventBits;
 368:./FreeRTOS/event_groups.c ****             xTimeoutOccurred = pdTRUE;
 369:./FreeRTOS/event_groups.c ****         }
 370:./FreeRTOS/event_groups.c ****         else
 371:./FreeRTOS/event_groups.c ****         {
 372:./FreeRTOS/event_groups.c ****             /* The task is going to block to wait for its required bits to be
 373:./FreeRTOS/event_groups.c ****              * set.  uxControlBits are used to remember the specified behaviour of
 374:./FreeRTOS/event_groups.c ****              * this call to xEventGroupWaitBits() - for use when the event bits
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 8


 375:./FreeRTOS/event_groups.c ****              * unblock the task. */
 376:./FreeRTOS/event_groups.c ****             if( xClearOnExit != pdFALSE )
 377:./FreeRTOS/event_groups.c ****             {
 378:./FreeRTOS/event_groups.c ****                 uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 379:./FreeRTOS/event_groups.c ****             }
 380:./FreeRTOS/event_groups.c ****             else
 381:./FreeRTOS/event_groups.c ****             {
 382:./FreeRTOS/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 383:./FreeRTOS/event_groups.c ****             }
 384:./FreeRTOS/event_groups.c **** 
 385:./FreeRTOS/event_groups.c ****             if( xWaitForAllBits != pdFALSE )
 386:./FreeRTOS/event_groups.c ****             {
 387:./FreeRTOS/event_groups.c ****                 uxControlBits |= eventWAIT_FOR_ALL_BITS;
 388:./FreeRTOS/event_groups.c ****             }
 389:./FreeRTOS/event_groups.c ****             else
 390:./FreeRTOS/event_groups.c ****             {
 391:./FreeRTOS/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 392:./FreeRTOS/event_groups.c ****             }
 393:./FreeRTOS/event_groups.c **** 
 394:./FreeRTOS/event_groups.c ****             /* Store the bits that the calling task is waiting for in the
 395:./FreeRTOS/event_groups.c ****              * task's event list item so the kernel knows when a match is
 396:./FreeRTOS/event_groups.c ****              * found.  Then enter the blocked state. */
 397:./FreeRTOS/event_groups.c ****             vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitF
 398:./FreeRTOS/event_groups.c **** 
 399:./FreeRTOS/event_groups.c ****             /* This is obsolete as it will get set after the task unblocks, but
 400:./FreeRTOS/event_groups.c ****              * some compilers mistakenly generate a warning about the variable
 401:./FreeRTOS/event_groups.c ****              * being returned without being set if it is not done. */
 402:./FreeRTOS/event_groups.c ****             uxReturn = 0;
 403:./FreeRTOS/event_groups.c **** 
 404:./FreeRTOS/event_groups.c ****             traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 405:./FreeRTOS/event_groups.c ****         }
 406:./FreeRTOS/event_groups.c ****     }
 407:./FreeRTOS/event_groups.c ****     xAlreadyYielded = xTaskResumeAll();
 408:./FreeRTOS/event_groups.c **** 
 409:./FreeRTOS/event_groups.c ****     if( xTicksToWait != ( TickType_t ) 0 )
 410:./FreeRTOS/event_groups.c ****     {
 411:./FreeRTOS/event_groups.c ****         if( xAlreadyYielded == pdFALSE )
 412:./FreeRTOS/event_groups.c ****         {
 413:./FreeRTOS/event_groups.c ****             portYIELD_WITHIN_API();
 414:./FreeRTOS/event_groups.c ****         }
 415:./FreeRTOS/event_groups.c ****         else
 416:./FreeRTOS/event_groups.c ****         {
 417:./FreeRTOS/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 418:./FreeRTOS/event_groups.c ****         }
 419:./FreeRTOS/event_groups.c **** 
 420:./FreeRTOS/event_groups.c ****         /* The task blocked to wait for its required bits to be set - at this
 421:./FreeRTOS/event_groups.c ****          * point either the required bits were set or the block time expired.  If
 422:./FreeRTOS/event_groups.c ****          * the required bits were set they will have been stored in the task's
 423:./FreeRTOS/event_groups.c ****          * event list item, and they should now be retrieved then cleared. */
 424:./FreeRTOS/event_groups.c ****         uxReturn = uxTaskResetEventItemValue();
 425:./FreeRTOS/event_groups.c **** 
 426:./FreeRTOS/event_groups.c ****         if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 427:./FreeRTOS/event_groups.c ****         {
 428:./FreeRTOS/event_groups.c ****             taskENTER_CRITICAL();
 429:./FreeRTOS/event_groups.c ****             {
 430:./FreeRTOS/event_groups.c ****                 /* The task timed out, just return the current event bit value. */
 431:./FreeRTOS/event_groups.c ****                 uxReturn = pxEventBits->uxEventBits;
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 9


 432:./FreeRTOS/event_groups.c **** 
 433:./FreeRTOS/event_groups.c ****                 /* It is possible that the event bits were updated between this
 434:./FreeRTOS/event_groups.c ****                  * task leaving the Blocked state and running again. */
 435:./FreeRTOS/event_groups.c ****                 if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 436:./FreeRTOS/event_groups.c ****                 {
 437:./FreeRTOS/event_groups.c ****                     if( xClearOnExit != pdFALSE )
 438:./FreeRTOS/event_groups.c ****                     {
 439:./FreeRTOS/event_groups.c ****                         pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 440:./FreeRTOS/event_groups.c ****                     }
 441:./FreeRTOS/event_groups.c ****                     else
 442:./FreeRTOS/event_groups.c ****                     {
 443:./FreeRTOS/event_groups.c ****                         mtCOVERAGE_TEST_MARKER();
 444:./FreeRTOS/event_groups.c ****                     }
 445:./FreeRTOS/event_groups.c ****                 }
 446:./FreeRTOS/event_groups.c ****                 else
 447:./FreeRTOS/event_groups.c ****                 {
 448:./FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 449:./FreeRTOS/event_groups.c ****                 }
 450:./FreeRTOS/event_groups.c **** 
 451:./FreeRTOS/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 452:./FreeRTOS/event_groups.c ****             }
 453:./FreeRTOS/event_groups.c ****             taskEXIT_CRITICAL();
 454:./FreeRTOS/event_groups.c ****         }
 455:./FreeRTOS/event_groups.c ****         else
 456:./FreeRTOS/event_groups.c ****         {
 457:./FreeRTOS/event_groups.c ****             /* The task unblocked because the bits were set. */
 458:./FreeRTOS/event_groups.c ****         }
 459:./FreeRTOS/event_groups.c **** 
 460:./FreeRTOS/event_groups.c ****         /* The task blocked so control bits may have been set. */
 461:./FreeRTOS/event_groups.c ****         uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 462:./FreeRTOS/event_groups.c ****     }
 463:./FreeRTOS/event_groups.c **** 
 464:./FreeRTOS/event_groups.c ****     traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 465:./FreeRTOS/event_groups.c **** 
 466:./FreeRTOS/event_groups.c ****     /* Prevent compiler warnings when trace macros are not used. */
 467:./FreeRTOS/event_groups.c ****     ( void ) xTimeoutOccurred;
 468:./FreeRTOS/event_groups.c **** 
 469:./FreeRTOS/event_groups.c ****     return uxReturn;
 470:./FreeRTOS/event_groups.c **** }
 471:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 472:./FreeRTOS/event_groups.c **** 
 473:./FreeRTOS/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
 474:./FreeRTOS/event_groups.c ****                                   const EventBits_t uxBitsToClear )
 475:./FreeRTOS/event_groups.c **** {
 476:./FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 477:./FreeRTOS/event_groups.c ****     EventBits_t uxReturn;
 478:./FreeRTOS/event_groups.c **** 
 479:./FreeRTOS/event_groups.c ****     /* Check the user is not attempting to clear the bits used by the kernel
 480:./FreeRTOS/event_groups.c ****      * itself. */
 481:./FreeRTOS/event_groups.c ****     configASSERT( xEventGroup );
 482:./FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 483:./FreeRTOS/event_groups.c **** 
 484:./FreeRTOS/event_groups.c ****     taskENTER_CRITICAL();
 485:./FreeRTOS/event_groups.c ****     {
 486:./FreeRTOS/event_groups.c ****         traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 487:./FreeRTOS/event_groups.c **** 
 488:./FreeRTOS/event_groups.c ****         /* The value returned is the event group value prior to the bits being
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 10


 489:./FreeRTOS/event_groups.c ****          * cleared. */
 490:./FreeRTOS/event_groups.c ****         uxReturn = pxEventBits->uxEventBits;
 491:./FreeRTOS/event_groups.c **** 
 492:./FreeRTOS/event_groups.c ****         /* Clear the bits. */
 493:./FreeRTOS/event_groups.c ****         pxEventBits->uxEventBits &= ~uxBitsToClear;
 494:./FreeRTOS/event_groups.c ****     }
 495:./FreeRTOS/event_groups.c ****     taskEXIT_CRITICAL();
 496:./FreeRTOS/event_groups.c **** 
 497:./FreeRTOS/event_groups.c ****     return uxReturn;
 498:./FreeRTOS/event_groups.c **** }
 499:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 500:./FreeRTOS/event_groups.c **** 
 501:./FreeRTOS/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 502:./FreeRTOS/event_groups.c **** 
 503:./FreeRTOS/event_groups.c ****     BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup,
 504:./FreeRTOS/event_groups.c ****                                             const EventBits_t uxBitsToClear )
 505:./FreeRTOS/event_groups.c ****     {
 506:./FreeRTOS/event_groups.c ****         BaseType_t xReturn;
 507:./FreeRTOS/event_groups.c **** 
 508:./FreeRTOS/event_groups.c ****         traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 509:./FreeRTOS/event_groups.c ****         xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGro
 510:./FreeRTOS/event_groups.c **** 
 511:./FreeRTOS/event_groups.c ****         return xReturn;
 512:./FreeRTOS/event_groups.c ****     }
 513:./FreeRTOS/event_groups.c **** 
 514:./FreeRTOS/event_groups.c **** #endif /* if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( co
 515:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 516:./FreeRTOS/event_groups.c **** 
 517:./FreeRTOS/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 518:./FreeRTOS/event_groups.c **** {
 519:./FreeRTOS/event_groups.c ****     UBaseType_t uxSavedInterruptStatus;
 520:./FreeRTOS/event_groups.c ****     EventGroup_t const * const pxEventBits = xEventGroup;
 521:./FreeRTOS/event_groups.c ****     EventBits_t uxReturn;
 522:./FreeRTOS/event_groups.c **** 
 523:./FreeRTOS/event_groups.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 524:./FreeRTOS/event_groups.c ****     {
 525:./FreeRTOS/event_groups.c ****         uxReturn = pxEventBits->uxEventBits;
 526:./FreeRTOS/event_groups.c ****     }
 527:./FreeRTOS/event_groups.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 528:./FreeRTOS/event_groups.c **** 
 529:./FreeRTOS/event_groups.c ****     return uxReturn;
 530:./FreeRTOS/event_groups.c **** } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to co
 531:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 532:./FreeRTOS/event_groups.c **** 
 533:./FreeRTOS/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
 534:./FreeRTOS/event_groups.c ****                                 const EventBits_t uxBitsToSet )
 535:./FreeRTOS/event_groups.c **** {
 536:./FreeRTOS/event_groups.c ****     ListItem_t * pxListItem;
 537:./FreeRTOS/event_groups.c ****     ListItem_t * pxNext;
 538:./FreeRTOS/event_groups.c ****     ListItem_t const * pxListEnd;
 539:./FreeRTOS/event_groups.c ****     List_t const * pxList;
 540:./FreeRTOS/event_groups.c ****     EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 541:./FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 542:./FreeRTOS/event_groups.c ****     BaseType_t xMatchFound = pdFALSE;
 543:./FreeRTOS/event_groups.c **** 
 544:./FreeRTOS/event_groups.c ****     /* Check the user is not attempting to set the bits used by the kernel
 545:./FreeRTOS/event_groups.c ****      * itself. */
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 11


 546:./FreeRTOS/event_groups.c ****     configASSERT( xEventGroup );
 547:./FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 548:./FreeRTOS/event_groups.c **** 
 549:./FreeRTOS/event_groups.c ****     pxList = &( pxEventBits->xTasksWaitingForBits );
 550:./FreeRTOS/event_groups.c ****     pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is 
 551:./FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 552:./FreeRTOS/event_groups.c ****     {
 553:./FreeRTOS/event_groups.c ****         traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 554:./FreeRTOS/event_groups.c **** 
 555:./FreeRTOS/event_groups.c ****         pxListItem = listGET_HEAD_ENTRY( pxList );
 556:./FreeRTOS/event_groups.c **** 
 557:./FreeRTOS/event_groups.c ****         /* Set the bits. */
 558:./FreeRTOS/event_groups.c ****         pxEventBits->uxEventBits |= uxBitsToSet;
 559:./FreeRTOS/event_groups.c **** 
 560:./FreeRTOS/event_groups.c ****         /* See if the new bit value should unblock any tasks. */
 561:./FreeRTOS/event_groups.c ****         while( pxListItem != pxListEnd )
 562:./FreeRTOS/event_groups.c ****         {
 563:./FreeRTOS/event_groups.c ****             pxNext = listGET_NEXT( pxListItem );
 564:./FreeRTOS/event_groups.c ****             uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 565:./FreeRTOS/event_groups.c ****             xMatchFound = pdFALSE;
 566:./FreeRTOS/event_groups.c **** 
 567:./FreeRTOS/event_groups.c ****             /* Split the bits waited for from the control bits. */
 568:./FreeRTOS/event_groups.c ****             uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 569:./FreeRTOS/event_groups.c ****             uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 570:./FreeRTOS/event_groups.c **** 
 571:./FreeRTOS/event_groups.c ****             if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 572:./FreeRTOS/event_groups.c ****             {
 573:./FreeRTOS/event_groups.c ****                 /* Just looking for single bit being set. */
 574:./FreeRTOS/event_groups.c ****                 if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 575:./FreeRTOS/event_groups.c ****                 {
 576:./FreeRTOS/event_groups.c ****                     xMatchFound = pdTRUE;
 577:./FreeRTOS/event_groups.c ****                 }
 578:./FreeRTOS/event_groups.c ****                 else
 579:./FreeRTOS/event_groups.c ****                 {
 580:./FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 581:./FreeRTOS/event_groups.c ****                 }
 582:./FreeRTOS/event_groups.c ****             }
 583:./FreeRTOS/event_groups.c ****             else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 584:./FreeRTOS/event_groups.c ****             {
 585:./FreeRTOS/event_groups.c ****                 /* All bits are set. */
 586:./FreeRTOS/event_groups.c ****                 xMatchFound = pdTRUE;
 587:./FreeRTOS/event_groups.c ****             }
 588:./FreeRTOS/event_groups.c ****             else
 589:./FreeRTOS/event_groups.c ****             {
 590:./FreeRTOS/event_groups.c ****                 /* Need all bits to be set, but not all the bits were set. */
 591:./FreeRTOS/event_groups.c ****             }
 592:./FreeRTOS/event_groups.c **** 
 593:./FreeRTOS/event_groups.c ****             if( xMatchFound != pdFALSE )
 594:./FreeRTOS/event_groups.c ****             {
 595:./FreeRTOS/event_groups.c ****                 /* The bits match.  Should the bits be cleared on exit? */
 596:./FreeRTOS/event_groups.c ****                 if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 597:./FreeRTOS/event_groups.c ****                 {
 598:./FreeRTOS/event_groups.c ****                     uxBitsToClear |= uxBitsWaitedFor;
 599:./FreeRTOS/event_groups.c ****                 }
 600:./FreeRTOS/event_groups.c ****                 else
 601:./FreeRTOS/event_groups.c ****                 {
 602:./FreeRTOS/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 12


 603:./FreeRTOS/event_groups.c ****                 }
 604:./FreeRTOS/event_groups.c **** 
 605:./FreeRTOS/event_groups.c ****                 /* Store the actual event flag value in the task's event list
 606:./FreeRTOS/event_groups.c ****                  * item before removing the task from the event list.  The
 607:./FreeRTOS/event_groups.c ****                  * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 608:./FreeRTOS/event_groups.c ****                  * that is was unblocked due to its required bits matching, rather
 609:./FreeRTOS/event_groups.c ****                  * than because it timed out. */
 610:./FreeRTOS/event_groups.c ****                 vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBL
 611:./FreeRTOS/event_groups.c ****             }
 612:./FreeRTOS/event_groups.c **** 
 613:./FreeRTOS/event_groups.c ****             /* Move onto the next list item.  Note pxListItem->pxNext is not
 614:./FreeRTOS/event_groups.c ****              * used here as the list item may have been removed from the event list
 615:./FreeRTOS/event_groups.c ****              * and inserted into the ready/pending reading list. */
 616:./FreeRTOS/event_groups.c ****             pxListItem = pxNext;
 617:./FreeRTOS/event_groups.c ****         }
 618:./FreeRTOS/event_groups.c **** 
 619:./FreeRTOS/event_groups.c ****         /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 620:./FreeRTOS/event_groups.c ****          * bit was set in the control word. */
 621:./FreeRTOS/event_groups.c ****         pxEventBits->uxEventBits &= ~uxBitsToClear;
 622:./FreeRTOS/event_groups.c ****     }
 623:./FreeRTOS/event_groups.c ****     ( void ) xTaskResumeAll();
 624:./FreeRTOS/event_groups.c **** 
 625:./FreeRTOS/event_groups.c ****     return pxEventBits->uxEventBits;
 626:./FreeRTOS/event_groups.c **** }
 627:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 628:./FreeRTOS/event_groups.c **** 
 629:./FreeRTOS/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 630:./FreeRTOS/event_groups.c **** {
 631:./FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 632:./FreeRTOS/event_groups.c ****     const List_t * pxTasksWaitingForBits;
 633:./FreeRTOS/event_groups.c **** 
 634:./FreeRTOS/event_groups.c ****     configASSERT( pxEventBits );
 635:./FreeRTOS/event_groups.c **** 
 636:./FreeRTOS/event_groups.c ****     pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 637:./FreeRTOS/event_groups.c **** 
 638:./FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 639:./FreeRTOS/event_groups.c ****     {
 640:./FreeRTOS/event_groups.c ****         traceEVENT_GROUP_DELETE( xEventGroup );
 641:./FreeRTOS/event_groups.c **** 
 642:./FreeRTOS/event_groups.c ****         while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 643:./FreeRTOS/event_groups.c ****         {
 644:./FreeRTOS/event_groups.c ****             /* Unblock the task, returning 0 as the event list is being deleted
 645:./FreeRTOS/event_groups.c ****              * and cannot therefore have any bits set. */
 646:./FreeRTOS/event_groups.c ****             configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTas
 647:./FreeRTOS/event_groups.c ****             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 648:./FreeRTOS/event_groups.c ****         }
 649:./FreeRTOS/event_groups.c ****     }
 650:./FreeRTOS/event_groups.c ****     ( void ) xTaskResumeAll();
 651:./FreeRTOS/event_groups.c **** 
 652:./FreeRTOS/event_groups.c ****     #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 653:./FreeRTOS/event_groups.c ****     {
 654:./FreeRTOS/event_groups.c ****         /* The event group can only have been allocated dynamically - free
 655:./FreeRTOS/event_groups.c ****          * it again. */
 656:./FreeRTOS/event_groups.c ****         vPortFree( pxEventBits );
 657:./FreeRTOS/event_groups.c ****     }
 658:./FreeRTOS/event_groups.c ****     #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 659:./FreeRTOS/event_groups.c ****     {
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 13


 660:./FreeRTOS/event_groups.c ****         /* The event group could have been allocated statically or
 661:./FreeRTOS/event_groups.c ****          * dynamically, so check before attempting to free the memory. */
 662:./FreeRTOS/event_groups.c ****         if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 663:./FreeRTOS/event_groups.c ****         {
 664:./FreeRTOS/event_groups.c ****             vPortFree( pxEventBits );
 665:./FreeRTOS/event_groups.c ****         }
 666:./FreeRTOS/event_groups.c ****         else
 667:./FreeRTOS/event_groups.c ****         {
 668:./FreeRTOS/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 669:./FreeRTOS/event_groups.c ****         }
 670:./FreeRTOS/event_groups.c ****     }
 671:./FreeRTOS/event_groups.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 672:./FreeRTOS/event_groups.c **** }
 673:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 674:./FreeRTOS/event_groups.c **** 
 675:./FreeRTOS/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 676:./FreeRTOS/event_groups.c ****  * an interrupt. */
 677:./FreeRTOS/event_groups.c **** void vEventGroupSetBitsCallback( void * pvEventGroup,
 678:./FreeRTOS/event_groups.c ****                                  const uint32_t ulBitsToSet )
 679:./FreeRTOS/event_groups.c **** {
 680:./FreeRTOS/event_groups.c ****     ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't a
 681:./FreeRTOS/event_groups.c **** }
 682:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 683:./FreeRTOS/event_groups.c **** 
 684:./FreeRTOS/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 685:./FreeRTOS/event_groups.c ****  * an interrupt. */
 686:./FreeRTOS/event_groups.c **** void vEventGroupClearBitsCallback( void * pvEventGroup,
 687:./FreeRTOS/event_groups.c ****                                    const uint32_t ulBitsToClear )
 688:./FreeRTOS/event_groups.c **** {
 689:./FreeRTOS/event_groups.c ****     ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can
 690:./FreeRTOS/event_groups.c **** }
 691:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 692:./FreeRTOS/event_groups.c **** 
 693:./FreeRTOS/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
 694:./FreeRTOS/event_groups.c ****                                         const EventBits_t uxBitsToWaitFor,
 695:./FreeRTOS/event_groups.c ****                                         const BaseType_t xWaitForAllBits )
 696:./FreeRTOS/event_groups.c **** {
  27              		.loc 1 696 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 697:./FreeRTOS/event_groups.c ****     BaseType_t xWaitConditionMet = pdFALSE;
  32              		.loc 1 697 5 view .LVU1
 698:./FreeRTOS/event_groups.c **** 
 699:./FreeRTOS/event_groups.c ****     if( xWaitForAllBits == pdFALSE )
  33              		.loc 1 699 5 view .LVU2
  34              		.loc 1 699 7 is_stmt 0 view .LVU3
  35 0000 1AB9     		cbnz	r2, .L2
 700:./FreeRTOS/event_groups.c ****     {
 701:./FreeRTOS/event_groups.c ****         /* Task only has to wait for one bit within uxBitsToWaitFor to be
 702:./FreeRTOS/event_groups.c ****          * set.  Is one already set? */
 703:./FreeRTOS/event_groups.c ****         if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  36              		.loc 1 703 9 is_stmt 1 view .LVU4
  37              		.loc 1 703 11 is_stmt 0 view .LVU5
  38 0002 0842     		tst	r0, r1
  39 0004 05D1     		bne	.L4
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 14


 697:./FreeRTOS/event_groups.c **** 
  40              		.loc 1 697 16 view .LVU6
  41 0006 1046     		mov	r0, r2
  42              	.LVL1:
 697:./FreeRTOS/event_groups.c **** 
  43              		.loc 1 697 16 view .LVU7
  44 0008 7047     		bx	lr
  45              	.LVL2:
  46              	.L2:
 704:./FreeRTOS/event_groups.c ****         {
 705:./FreeRTOS/event_groups.c ****             xWaitConditionMet = pdTRUE;
 706:./FreeRTOS/event_groups.c ****         }
 707:./FreeRTOS/event_groups.c ****         else
 708:./FreeRTOS/event_groups.c ****         {
 709:./FreeRTOS/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 710:./FreeRTOS/event_groups.c ****         }
 711:./FreeRTOS/event_groups.c ****     }
 712:./FreeRTOS/event_groups.c ****     else
 713:./FreeRTOS/event_groups.c ****     {
 714:./FreeRTOS/event_groups.c ****         /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 715:./FreeRTOS/event_groups.c ****          * Are they set already? */
 716:./FreeRTOS/event_groups.c ****         if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  47              		.loc 1 716 9 is_stmt 1 view .LVU8
  48              		.loc 1 716 11 is_stmt 0 view .LVU9
  49 000a 8143     		bics	r1, r1, r0
  50              	.LVL3:
  51              		.loc 1 716 11 view .LVU10
  52 000c 03D0     		beq	.L5
 697:./FreeRTOS/event_groups.c **** 
  53              		.loc 1 697 16 view .LVU11
  54 000e 0020     		movs	r0, #0
  55              	.LVL4:
 697:./FreeRTOS/event_groups.c **** 
  56              		.loc 1 697 16 view .LVU12
  57 0010 7047     		bx	lr
  58              	.LVL5:
  59              	.L4:
 705:./FreeRTOS/event_groups.c ****         }
  60              		.loc 1 705 31 view .LVU13
  61 0012 0120     		movs	r0, #1
  62              	.LVL6:
 705:./FreeRTOS/event_groups.c ****         }
  63              		.loc 1 705 31 view .LVU14
  64 0014 7047     		bx	lr
  65              	.LVL7:
  66              	.L5:
 717:./FreeRTOS/event_groups.c ****         {
 718:./FreeRTOS/event_groups.c ****             xWaitConditionMet = pdTRUE;
  67              		.loc 1 718 31 view .LVU15
  68 0016 0120     		movs	r0, #1
  69              	.LVL8:
 719:./FreeRTOS/event_groups.c ****         }
 720:./FreeRTOS/event_groups.c ****         else
 721:./FreeRTOS/event_groups.c ****         {
 722:./FreeRTOS/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
  70              		.loc 1 722 37 is_stmt 1 view .LVU16
 723:./FreeRTOS/event_groups.c ****         }
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 15


 724:./FreeRTOS/event_groups.c ****     }
 725:./FreeRTOS/event_groups.c **** 
 726:./FreeRTOS/event_groups.c ****     return xWaitConditionMet;
  71              		.loc 1 726 5 view .LVU17
 727:./FreeRTOS/event_groups.c **** }
  72              		.loc 1 727 1 is_stmt 0 view .LVU18
  73 0018 7047     		bx	lr
  74              		.cfi_endproc
  75              	.LFE43:
  77              		.section	.text.xEventGroupCreate,"ax",%progbits
  78              		.align	1
  79              		.global	xEventGroupCreate
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  84              	xEventGroupCreate:
  85              	.LFB34:
 149:./FreeRTOS/event_groups.c ****         EventGroup_t * pxEventBits;
  86              		.loc 1 149 5 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90 0000 10B5     		push	{r4, lr}
  91              	.LCFI0:
  92              		.cfi_def_cfa_offset 8
  93              		.cfi_offset 4, -8
  94              		.cfi_offset 14, -4
 150:./FreeRTOS/event_groups.c **** 
  95              		.loc 1 150 9 view .LVU20
 165:./FreeRTOS/event_groups.c **** 
  96              		.loc 1 165 9 view .LVU21
 165:./FreeRTOS/event_groups.c **** 
  97              		.loc 1 165 42 is_stmt 0 view .LVU22
  98 0002 1820     		movs	r0, #24
  99 0004 FFF7FEFF 		bl	pvPortMalloc
 100              	.LVL9:
 167:./FreeRTOS/event_groups.c ****         {
 101              		.loc 1 167 9 is_stmt 1 view .LVU23
 167:./FreeRTOS/event_groups.c ****         {
 102              		.loc 1 167 11 is_stmt 0 view .LVU24
 103 0008 0446     		mov	r4, r0
 104 000a 20B1     		cbz	r0, .L6
 169:./FreeRTOS/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 105              		.loc 1 169 13 is_stmt 1 view .LVU25
 169:./FreeRTOS/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 106              		.loc 1 169 38 is_stmt 0 view .LVU26
 107 000c 0023     		movs	r3, #0
 108 000e 40F8043B 		str	r3, [r0], #4
 109              	.LVL10:
 170:./FreeRTOS/event_groups.c **** 
 110              		.loc 1 170 13 is_stmt 1 view .LVU27
 111 0012 FFF7FEFF 		bl	vListInitialise
 112              	.LVL11:
 181:./FreeRTOS/event_groups.c ****         }
 113              		.loc 1 181 51 view .LVU28
 185:./FreeRTOS/event_groups.c ****         }
 114              		.loc 1 185 45 view .LVU29
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 16


 188:./FreeRTOS/event_groups.c ****     }
 115              		.loc 1 188 9 view .LVU30
 116              	.L6:
 189:./FreeRTOS/event_groups.c **** 
 117              		.loc 1 189 5 is_stmt 0 view .LVU31
 118 0016 2046     		mov	r0, r4
 119 0018 10BD     		pop	{r4, pc}
 189:./FreeRTOS/event_groups.c **** 
 120              		.loc 1 189 5 view .LVU32
 121              		.cfi_endproc
 122              	.LFE34:
 124              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 125              		.align	1
 126              		.global	xEventGroupWaitBits
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 131              	xEventGroupWaitBits:
 132              	.LVL12:
 133              	.LFB36:
 322:./FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 134              		.loc 1 322 1 is_stmt 1 view -0
 135              		.cfi_startproc
 136              		@ args = 4, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 322:./FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 138              		.loc 1 322 1 is_stmt 0 view .LVU34
 139 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 140              	.LCFI1:
 141              		.cfi_def_cfa_offset 32
 142              		.cfi_offset 3, -32
 143              		.cfi_offset 4, -28
 144              		.cfi_offset 5, -24
 145              		.cfi_offset 6, -20
 146              		.cfi_offset 7, -16
 147              		.cfi_offset 8, -12
 148              		.cfi_offset 9, -8
 149              		.cfi_offset 14, -4
 150 0004 0646     		mov	r6, r0
 151 0006 0D46     		mov	r5, r1
 152 0008 9046     		mov	r8, r2
 153 000a 1F46     		mov	r7, r3
 154 000c DDF82090 		ldr	r9, [sp, #32]
 323:./FreeRTOS/event_groups.c ****     EventBits_t uxReturn, uxControlBits = 0;
 155              		.loc 1 323 5 is_stmt 1 view .LVU35
 156              	.LVL13:
 324:./FreeRTOS/event_groups.c ****     BaseType_t xWaitConditionMet, xAlreadyYielded;
 157              		.loc 1 324 5 view .LVU36
 325:./FreeRTOS/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 158              		.loc 1 325 5 view .LVU37
 326:./FreeRTOS/event_groups.c **** 
 159              		.loc 1 326 5 view .LVU38
 330:./FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 160              		.loc 1 330 32 view .LVU39
 331:./FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 161              		.loc 1 331 77 view .LVU40
 332:./FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 17


 162              		.loc 1 332 41 view .LVU41
 335:./FreeRTOS/event_groups.c ****     }
 163              		.loc 1 335 110 view .LVU42
 339:./FreeRTOS/event_groups.c ****     {
 164              		.loc 1 339 5 view .LVU43
 165 0010 FFF7FEFF 		bl	vTaskSuspendAll
 166              	.LVL14:
 167              	.LBB6:
 341:./FreeRTOS/event_groups.c **** 
 168              		.loc 1 341 9 view .LVU44
 341:./FreeRTOS/event_groups.c **** 
 169              		.loc 1 341 27 is_stmt 0 view .LVU45
 170 0014 3468     		ldr	r4, [r6]
 171              	.LVL15:
 344:./FreeRTOS/event_groups.c **** 
 172              		.loc 1 344 9 is_stmt 1 view .LVU46
 344:./FreeRTOS/event_groups.c **** 
 173              		.loc 1 344 29 is_stmt 0 view .LVU47
 174 0016 3A46     		mov	r2, r7
 175 0018 2946     		mov	r1, r5
 176 001a 2046     		mov	r0, r4
 177 001c FFF7FEFF 		bl	prvTestWaitCondition
 178              	.LVL16:
 346:./FreeRTOS/event_groups.c ****         {
 179              		.loc 1 346 9 is_stmt 1 view .LVU48
 346:./FreeRTOS/event_groups.c ****         {
 180              		.loc 1 346 11 is_stmt 0 view .LVU49
 181 0020 40B1     		cbz	r0, .L10
 350:./FreeRTOS/event_groups.c ****             xTicksToWait = ( TickType_t ) 0;
 182              		.loc 1 350 13 is_stmt 1 view .LVU50
 183              	.LVL17:
 351:./FreeRTOS/event_groups.c **** 
 184              		.loc 1 351 13 view .LVU51
 354:./FreeRTOS/event_groups.c ****             {
 185              		.loc 1 354 13 view .LVU52
 354:./FreeRTOS/event_groups.c ****             {
 186              		.loc 1 354 15 is_stmt 0 view .LVU53
 187 0022 B8F1000F 		cmp	r8, #0
 188 0026 19D0     		beq	.L18
 356:./FreeRTOS/event_groups.c ****             }
 189              		.loc 1 356 17 is_stmt 1 view .LVU54
 356:./FreeRTOS/event_groups.c ****             }
 190              		.loc 1 356 42 is_stmt 0 view .LVU55
 191 0028 24EA0503 		bic	r3, r4, r5
 192 002c 3360     		str	r3, [r6]
 351:./FreeRTOS/event_groups.c **** 
 193              		.loc 1 351 26 view .LVU56
 194 002e 4FF00009 		mov	r9, #0
 195 0032 15E0     		b	.L11
 196              	.LVL18:
 197              	.L10:
 363:./FreeRTOS/event_groups.c ****         {
 198              		.loc 1 363 14 is_stmt 1 view .LVU57
 363:./FreeRTOS/event_groups.c ****         {
 199              		.loc 1 363 16 is_stmt 0 view .LVU58
 200 0034 B9F1000F 		cmp	r9, #0
 201 0038 12D0     		beq	.L11
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 18


 376:./FreeRTOS/event_groups.c ****             {
 202              		.loc 1 376 13 is_stmt 1 view .LVU59
 376:./FreeRTOS/event_groups.c ****             {
 203              		.loc 1 376 15 is_stmt 0 view .LVU60
 204 003a B8F1000F 		cmp	r8, #0
 205 003e 0AD1     		bne	.L19
 206              	.LBE6:
 324:./FreeRTOS/event_groups.c ****     BaseType_t xWaitConditionMet, xAlreadyYielded;
 207              		.loc 1 324 27 view .LVU61
 208 0040 0021     		movs	r1, #0
 209              	.L12:
 210              	.LVL19:
 211              	.LBB7:
 382:./FreeRTOS/event_groups.c ****             }
 212              		.loc 1 382 41 is_stmt 1 view .LVU62
 385:./FreeRTOS/event_groups.c ****             {
 213              		.loc 1 385 13 view .LVU63
 385:./FreeRTOS/event_groups.c ****             {
 214              		.loc 1 385 15 is_stmt 0 view .LVU64
 215 0042 0FB1     		cbz	r7, .L13
 387:./FreeRTOS/event_groups.c ****             }
 216              		.loc 1 387 17 is_stmt 1 view .LVU65
 387:./FreeRTOS/event_groups.c ****             }
 217              		.loc 1 387 31 is_stmt 0 view .LVU66
 218 0044 41F08061 		orr	r1, r1, #67108864
 219              	.LVL20:
 220              	.L13:
 391:./FreeRTOS/event_groups.c ****             }
 221              		.loc 1 391 41 is_stmt 1 view .LVU67
 397:./FreeRTOS/event_groups.c **** 
 222              		.loc 1 397 13 view .LVU68
 223 0048 4A46     		mov	r2, r9
 224 004a 2943     		orrs	r1, r1, r5
 225              	.LVL21:
 397:./FreeRTOS/event_groups.c **** 
 226              		.loc 1 397 13 is_stmt 0 view .LVU69
 227 004c 301D     		adds	r0, r6, #4
 228              	.LVL22:
 397:./FreeRTOS/event_groups.c **** 
 229              		.loc 1 397 13 view .LVU70
 230 004e FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 231              	.LVL23:
 402:./FreeRTOS/event_groups.c **** 
 232              		.loc 1 402 13 is_stmt 1 view .LVU71
 402:./FreeRTOS/event_groups.c **** 
 233              		.loc 1 402 22 is_stmt 0 view .LVU72
 234 0052 0024     		movs	r4, #0
 235              	.LVL24:
 402:./FreeRTOS/event_groups.c **** 
 236              		.loc 1 402 22 view .LVU73
 237 0054 04E0     		b	.L11
 238              	.LVL25:
 239              	.L19:
 378:./FreeRTOS/event_groups.c ****             }
 240              		.loc 1 378 31 view .LVU74
 241 0056 4FF08071 		mov	r1, #16777216
 242 005a F2E7     		b	.L12
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 19


 243              	.LVL26:
 244              	.L18:
 351:./FreeRTOS/event_groups.c **** 
 245              		.loc 1 351 26 view .LVU75
 246 005c 4FF00009 		mov	r9, #0
 247              	.LVL27:
 248              	.L11:
 404:./FreeRTOS/event_groups.c ****         }
 249              		.loc 1 404 77 is_stmt 1 view .LVU76
 250              	.LBE7:
 407:./FreeRTOS/event_groups.c **** 
 251              		.loc 1 407 5 view .LVU77
 407:./FreeRTOS/event_groups.c **** 
 252              		.loc 1 407 23 is_stmt 0 view .LVU78
 253 0060 FFF7FEFF 		bl	xTaskResumeAll
 254              	.LVL28:
 409:./FreeRTOS/event_groups.c ****     {
 255              		.loc 1 409 5 is_stmt 1 view .LVU79
 409:./FreeRTOS/event_groups.c ****     {
 256              		.loc 1 409 7 is_stmt 0 view .LVU80
 257 0064 B9F1000F 		cmp	r9, #0
 258 0068 12D0     		beq	.L9
 411:./FreeRTOS/event_groups.c ****         {
 259              		.loc 1 411 9 is_stmt 1 view .LVU81
 411:./FreeRTOS/event_groups.c ****         {
 260              		.loc 1 411 11 is_stmt 0 view .LVU82
 261 006a 48B9     		cbnz	r0, .L15
 413:./FreeRTOS/event_groups.c ****         }
 262              		.loc 1 413 13 is_stmt 1 view .LVU83
 263 006c 4FF0E023 		mov	r3, #-536813568
 264 0070 4FF08052 		mov	r2, #268435456
 265 0074 C3F8042D 		str	r2, [r3, #3332]
 413:./FreeRTOS/event_groups.c ****         }
 266              		.loc 1 413 13 view .LVU84
 267              		.syntax unified
 268              	@ 413 "./FreeRTOS/event_groups.c" 1
 269 0078 BFF34F8F 		dsb
 270              	@ 0 "" 2
 413:./FreeRTOS/event_groups.c ****         }
 271              		.loc 1 413 13 view .LVU85
 272              	@ 413 "./FreeRTOS/event_groups.c" 1
 273 007c BFF36F8F 		isb
 274              	@ 0 "" 2
 413:./FreeRTOS/event_groups.c ****         }
 275              		.loc 1 413 35 view .LVU86
 276              		.thumb
 277              		.syntax unified
 278              	.L15:
 417:./FreeRTOS/event_groups.c ****         }
 279              		.loc 1 417 37 view .LVU87
 424:./FreeRTOS/event_groups.c **** 
 280              		.loc 1 424 9 view .LVU88
 424:./FreeRTOS/event_groups.c **** 
 281              		.loc 1 424 20 is_stmt 0 view .LVU89
 282 0080 FFF7FEFF 		bl	uxTaskResetEventItemValue
 283              	.LVL29:
 424:./FreeRTOS/event_groups.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 20


 284              		.loc 1 424 20 view .LVU90
 285 0084 0446     		mov	r4, r0
 286              	.LVL30:
 426:./FreeRTOS/event_groups.c ****         {
 287              		.loc 1 426 9 is_stmt 1 view .LVU91
 426:./FreeRTOS/event_groups.c ****         {
 288              		.loc 1 426 11 is_stmt 0 view .LVU92
 289 0086 10F0007F 		tst	r0, #33554432
 290 008a 04D0     		beq	.L21
 291              	.LVL31:
 292              	.L16:
 458:./FreeRTOS/event_groups.c **** 
 293              		.loc 1 458 9 is_stmt 1 view .LVU93
 461:./FreeRTOS/event_groups.c ****     }
 294              		.loc 1 461 9 view .LVU94
 461:./FreeRTOS/event_groups.c ****     }
 295              		.loc 1 461 18 is_stmt 0 view .LVU95
 296 008c 24F07F44 		bic	r4, r4, #-16777216
 297              	.LVL32:
 464:./FreeRTOS/event_groups.c **** 
 298              		.loc 1 464 5 is_stmt 1 view .LVU96
 467:./FreeRTOS/event_groups.c **** 
 299              		.loc 1 467 5 view .LVU97
 469:./FreeRTOS/event_groups.c **** }
 300              		.loc 1 469 5 view .LVU98
 301              	.L9:
 470:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 302              		.loc 1 470 1 is_stmt 0 view .LVU99
 303 0090 2046     		mov	r0, r4
 304 0092 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 305              	.LVL33:
 306              	.L21:
 428:./FreeRTOS/event_groups.c ****             {
 307              		.loc 1 428 13 is_stmt 1 view .LVU100
 308 0096 FFF7FEFF 		bl	vPortEnterCritical
 309              	.LVL34:
 431:./FreeRTOS/event_groups.c **** 
 310              		.loc 1 431 17 view .LVU101
 431:./FreeRTOS/event_groups.c **** 
 311              		.loc 1 431 26 is_stmt 0 view .LVU102
 312 009a 3468     		ldr	r4, [r6]
 313              	.LVL35:
 435:./FreeRTOS/event_groups.c ****                 {
 314              		.loc 1 435 17 is_stmt 1 view .LVU103
 435:./FreeRTOS/event_groups.c ****                 {
 315              		.loc 1 435 21 is_stmt 0 view .LVU104
 316 009c 3A46     		mov	r2, r7
 317 009e 2946     		mov	r1, r5
 318 00a0 2046     		mov	r0, r4
 319 00a2 FFF7FEFF 		bl	prvTestWaitCondition
 320              	.LVL36:
 435:./FreeRTOS/event_groups.c ****                 {
 321              		.loc 1 435 19 view .LVU105
 322 00a6 28B1     		cbz	r0, .L17
 437:./FreeRTOS/event_groups.c ****                     {
 323              		.loc 1 437 21 is_stmt 1 view .LVU106
 437:./FreeRTOS/event_groups.c ****                     {
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 21


 324              		.loc 1 437 23 is_stmt 0 view .LVU107
 325 00a8 B8F1000F 		cmp	r8, #0
 326 00ac 02D0     		beq	.L17
 439:./FreeRTOS/event_groups.c ****                     }
 327              		.loc 1 439 25 is_stmt 1 view .LVU108
 439:./FreeRTOS/event_groups.c ****                     }
 328              		.loc 1 439 50 is_stmt 0 view .LVU109
 329 00ae 24EA0505 		bic	r5, r4, r5
 330              	.LVL37:
 439:./FreeRTOS/event_groups.c ****                     }
 331              		.loc 1 439 50 view .LVU110
 332 00b2 3560     		str	r5, [r6]
 333              	.L17:
 448:./FreeRTOS/event_groups.c ****                 }
 334              		.loc 1 448 45 is_stmt 1 view .LVU111
 451:./FreeRTOS/event_groups.c ****             }
 335              		.loc 1 451 17 view .LVU112
 336              	.LVL38:
 453:./FreeRTOS/event_groups.c ****         }
 337              		.loc 1 453 13 view .LVU113
 338 00b4 FFF7FEFF 		bl	vPortExitCritical
 339              	.LVL39:
 340 00b8 E8E7     		b	.L16
 341              		.cfi_endproc
 342              	.LFE36:
 344              		.section	.text.xEventGroupClearBits,"ax",%progbits
 345              		.align	1
 346              		.global	xEventGroupClearBits
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 351              	xEventGroupClearBits:
 352              	.LVL40:
 353              	.LFB37:
 475:./FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 354              		.loc 1 475 1 view -0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 0
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 475:./FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 358              		.loc 1 475 1 is_stmt 0 view .LVU115
 359 0000 70B5     		push	{r4, r5, r6, lr}
 360              	.LCFI2:
 361              		.cfi_def_cfa_offset 16
 362              		.cfi_offset 4, -16
 363              		.cfi_offset 5, -12
 364              		.cfi_offset 6, -8
 365              		.cfi_offset 14, -4
 366 0002 0546     		mov	r5, r0
 367 0004 0C46     		mov	r4, r1
 476:./FreeRTOS/event_groups.c ****     EventBits_t uxReturn;
 368              		.loc 1 476 5 is_stmt 1 view .LVU116
 369              	.LVL41:
 477:./FreeRTOS/event_groups.c **** 
 370              		.loc 1 477 5 view .LVU117
 481:./FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 371              		.loc 1 481 32 view .LVU118
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 22


 482:./FreeRTOS/event_groups.c **** 
 372              		.loc 1 482 75 view .LVU119
 484:./FreeRTOS/event_groups.c ****     {
 373              		.loc 1 484 5 view .LVU120
 374 0006 FFF7FEFF 		bl	vPortEnterCritical
 375              	.LVL42:
 486:./FreeRTOS/event_groups.c **** 
 376              		.loc 1 486 66 view .LVU121
 490:./FreeRTOS/event_groups.c **** 
 377              		.loc 1 490 9 view .LVU122
 490:./FreeRTOS/event_groups.c **** 
 378              		.loc 1 490 18 is_stmt 0 view .LVU123
 379 000a 2E68     		ldr	r6, [r5]
 380              	.LVL43:
 493:./FreeRTOS/event_groups.c ****     }
 381              		.loc 1 493 9 is_stmt 1 view .LVU124
 493:./FreeRTOS/event_groups.c ****     }
 382              		.loc 1 493 34 is_stmt 0 view .LVU125
 383 000c 26EA0404 		bic	r4, r6, r4
 384              	.LVL44:
 493:./FreeRTOS/event_groups.c ****     }
 385              		.loc 1 493 34 view .LVU126
 386 0010 2C60     		str	r4, [r5]
 495:./FreeRTOS/event_groups.c **** 
 387              		.loc 1 495 5 is_stmt 1 view .LVU127
 388 0012 FFF7FEFF 		bl	vPortExitCritical
 389              	.LVL45:
 497:./FreeRTOS/event_groups.c **** }
 390              		.loc 1 497 5 view .LVU128
 498:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 391              		.loc 1 498 1 is_stmt 0 view .LVU129
 392 0016 3046     		mov	r0, r6
 393 0018 70BD     		pop	{r4, r5, r6, pc}
 498:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 394              		.loc 1 498 1 view .LVU130
 395              		.cfi_endproc
 396              	.LFE37:
 398              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 399              		.align	1
 400              		.global	xEventGroupGetBitsFromISR
 401              		.syntax unified
 402              		.thumb
 403              		.thumb_func
 405              	xEventGroupGetBitsFromISR:
 406              	.LVL46:
 407              	.LFB38:
 518:./FreeRTOS/event_groups.c ****     UBaseType_t uxSavedInterruptStatus;
 408              		.loc 1 518 1 is_stmt 1 view -0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412              		@ link register save eliminated.
 519:./FreeRTOS/event_groups.c ****     EventGroup_t const * const pxEventBits = xEventGroup;
 413              		.loc 1 519 5 view .LVU132
 520:./FreeRTOS/event_groups.c ****     EventBits_t uxReturn;
 414              		.loc 1 520 5 view .LVU133
 521:./FreeRTOS/event_groups.c **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 23


 415              		.loc 1 521 5 view .LVU134
 523:./FreeRTOS/event_groups.c ****     {
 416              		.loc 1 523 5 view .LVU135
 417              	.LBB8:
 418              	.LBI8:
 419              		.file 2 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h"
   1:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.5.1
   3:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
   7:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  13:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  14:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  16:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  17:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  24:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * https://www.FreeRTOS.org
  25:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * https://github.com/FreeRTOS
  26:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  27:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  */
  28:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #include <stdlib.h>
  29:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #include <string.h>
  30:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #include <stdint.h>
  31:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #include <FreeRTOSConfig.h>
  32:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #include <projdefs.h>
  33:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  34:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  35:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define PORTMACRO_H
  36:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  37:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifdef __cplusplus
  38:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         extern "C" {
  39:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
  40:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  41:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  42:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  43:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  44:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  45:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  46:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  47:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  48:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  49:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  */
  50:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  51:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 24


  52:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portCHAR          char
  53:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portFLOAT         float
  54:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portDOUBLE        double
  55:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portLONG          long
  56:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portSHORT         short
  57:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  58:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portBASE_TYPE     long
  59:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  60:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  61:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     typedef long             BaseType_t;
  62:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     typedef unsigned long    UBaseType_t;
  63:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  64:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  65:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         typedef uint16_t     TickType_t;
  66:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  67:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #else
  68:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         typedef uint32_t     TickType_t;
  69:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  70:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  71:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  72:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * not need to be guarded with a critical section. */
  73:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  74:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
  75:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  76:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  77:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  78:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  79:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  80:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  81:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  82:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  83:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  84:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  85:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portYIELD()                                 \
  86:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {                                                   \
  87:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  88:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  89:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****                                                         \
  90:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  91:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  92:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  93:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile ( "isb" );                                  \
  94:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
  95:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  96:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  97:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  98:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  99:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
 100:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 101:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 102:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
 103:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     extern void vPortEnterCritical( void );
 104:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     extern void vPortExitCritical( void );
 105:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 106:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 107:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 108:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 25


 109:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 110:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 111:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 112:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 114:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 115:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 116:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * (which build with all the ports) will build. */
 117:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 118:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 119:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 120:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 121:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 122:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 123:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 124:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 125:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
 126:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 127:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 128:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 129:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 130:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 131:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
 132:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 133:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 134:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 135:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Generic helper function. */
 136:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 137:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         {
 138:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             uint8_t ucReturn;
 139:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 140:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 141:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 142:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             return ucReturn;
 143:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         }
 144:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 145:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Check the configuration. */
 146:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 147:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 148:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #endif
 149:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 150:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 151:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 152:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 153:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 154:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 155:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 156:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 157:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 158:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 160:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 161:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 162:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifdef configASSERT
 163:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         void vPortValidateInterruptPriority( void );
 164:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 165:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 26


 166:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 167:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 168:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portNOP()
 169:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 170:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portINLINE              __inline
 171:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 172:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifndef portFORCE_INLINE
 173:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 174:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
 175:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 176:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 177:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 178:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 179:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 180:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         uint32_t ulCurrentInterrupt;
 181:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         BaseType_t xReturn;
 182:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 183:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 184:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 185:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 186:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 187:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         {
 188:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             xReturn = pdFALSE;
 189:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         }
 190:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         else
 191:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         {
 192:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             xReturn = pdTRUE;
 193:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         }
 194:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 195:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         return xReturn;
 196:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 197:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 198:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 199:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 200:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 201:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 202:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         uint32_t ulNewBASEPRI;
 203:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 204:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile
 205:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 206:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	mov %0, %1												\n"\
 207:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	msr basepri, %0											\n"\
 208:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	isb														\n"\
 209:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	dsb														\n"\
 210:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 211:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         );
 212:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 213:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 214:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 215:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 216:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 420              		.loc 2 216 38 view .LVU136
 421              	.LBB9:
 217:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 218:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 422              		.loc 2 218 9 view .LVU137
 219:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 27


 220:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile
 423              		.loc 2 220 9 view .LVU138
 424              		.syntax unified
 425              	@ 220 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 426 0000 EFF31183 			mrs r3, basepri											
 427 0004 4FF0BF02 		mov r2, #191												
 428 0008 82F31188 		msr basepri, r2											
 429 000c BFF36F8F 		isb														
 430 0010 BFF34F8F 		dsb														
 431              	
 432              	@ 0 "" 2
 433              	.LVL47:
 221:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 222:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	mrs %0, basepri											\n"\
 223:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	mov %1, %2												\n"\
 224:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	msr basepri, %1											\n"\
 225:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	isb														\n"\
 226:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	dsb														\n"\
 227:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 228:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         );
 229:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 230:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 231:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****          * warnings. */
 232:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         return ulOriginalBASEPRI;
 434              		.loc 2 232 9 view .LVU139
 435              		.loc 2 232 9 is_stmt 0 view .LVU140
 436              		.thumb
 437              		.syntax unified
 438              	.LBE9:
 439              	.LBE8:
 525:./FreeRTOS/event_groups.c ****     }
 440              		.loc 1 525 9 is_stmt 1 view .LVU141
 525:./FreeRTOS/event_groups.c ****     }
 441              		.loc 1 525 18 is_stmt 0 view .LVU142
 442 0014 0068     		ldr	r0, [r0]
 443              	.LVL48:
 527:./FreeRTOS/event_groups.c **** 
 444              		.loc 1 527 5 is_stmt 1 view .LVU143
 445              	.LBB10:
 446              	.LBI10:
 233:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 234:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 235:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 236:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 447              		.loc 2 236 34 view .LVU144
 448              	.LBB11:
 237:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 238:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile
 449              		.loc 2 238 9 view .LVU145
 450              		.syntax unified
 451              	@ 238 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 452 0016 83F31188 			msr basepri, r3	
 453              	@ 0 "" 2
 454              	.LVL49:
 455              		.loc 2 238 9 is_stmt 0 view .LVU146
 456              		.thumb
 457              		.syntax unified
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 28


 458              	.LBE11:
 459              	.LBE10:
 529:./FreeRTOS/event_groups.c **** } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to co
 460              		.loc 1 529 5 is_stmt 1 view .LVU147
 530:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 461              		.loc 1 530 1 is_stmt 0 view .LVU148
 462 001a 7047     		bx	lr
 463              		.cfi_endproc
 464              	.LFE38:
 466              		.section	.text.xEventGroupSetBits,"ax",%progbits
 467              		.align	1
 468              		.global	xEventGroupSetBits
 469              		.syntax unified
 470              		.thumb
 471              		.thumb_func
 473              	xEventGroupSetBits:
 474              	.LVL50:
 475              	.LFB39:
 535:./FreeRTOS/event_groups.c ****     ListItem_t * pxListItem;
 476              		.loc 1 535 1 is_stmt 1 view -0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 0
 479              		@ frame_needed = 0, uses_anonymous_args = 0
 535:./FreeRTOS/event_groups.c ****     ListItem_t * pxListItem;
 480              		.loc 1 535 1 is_stmt 0 view .LVU150
 481 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 482              	.LCFI3:
 483              		.cfi_def_cfa_offset 24
 484              		.cfi_offset 3, -24
 485              		.cfi_offset 4, -20
 486              		.cfi_offset 5, -16
 487              		.cfi_offset 6, -12
 488              		.cfi_offset 7, -8
 489              		.cfi_offset 14, -4
 490 0002 0446     		mov	r4, r0
 491 0004 0D46     		mov	r5, r1
 536:./FreeRTOS/event_groups.c ****     ListItem_t * pxNext;
 492              		.loc 1 536 5 is_stmt 1 view .LVU151
 537:./FreeRTOS/event_groups.c ****     ListItem_t const * pxListEnd;
 493              		.loc 1 537 5 view .LVU152
 538:./FreeRTOS/event_groups.c ****     List_t const * pxList;
 494              		.loc 1 538 5 view .LVU153
 539:./FreeRTOS/event_groups.c ****     EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 495              		.loc 1 539 5 view .LVU154
 540:./FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 496              		.loc 1 540 5 view .LVU155
 497              	.LVL51:
 541:./FreeRTOS/event_groups.c ****     BaseType_t xMatchFound = pdFALSE;
 498              		.loc 1 541 5 view .LVU156
 542:./FreeRTOS/event_groups.c **** 
 499              		.loc 1 542 5 view .LVU157
 546:./FreeRTOS/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 500              		.loc 1 546 32 view .LVU158
 547:./FreeRTOS/event_groups.c **** 
 501              		.loc 1 547 73 view .LVU159
 549:./FreeRTOS/event_groups.c ****     pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is 
 502              		.loc 1 549 5 view .LVU160
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 29


 550:./FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 503              		.loc 1 550 5 view .LVU161
 550:./FreeRTOS/event_groups.c ****     vTaskSuspendAll();
 504              		.loc 1 550 15 is_stmt 0 view .LVU162
 505 0006 00F10C06 		add	r6, r0, #12
 506              	.LVL52:
 551:./FreeRTOS/event_groups.c ****     {
 507              		.loc 1 551 5 is_stmt 1 view .LVU163
 508 000a FFF7FEFF 		bl	vTaskSuspendAll
 509              	.LVL53:
 553:./FreeRTOS/event_groups.c **** 
 510              		.loc 1 553 62 view .LVU164
 555:./FreeRTOS/event_groups.c **** 
 511              		.loc 1 555 9 view .LVU165
 555:./FreeRTOS/event_groups.c **** 
 512              		.loc 1 555 20 is_stmt 0 view .LVU166
 513 000e 2069     		ldr	r0, [r4, #16]
 514              	.LVL54:
 558:./FreeRTOS/event_groups.c **** 
 515              		.loc 1 558 9 is_stmt 1 view .LVU167
 558:./FreeRTOS/event_groups.c **** 
 516              		.loc 1 558 20 is_stmt 0 view .LVU168
 517 0010 2368     		ldr	r3, [r4]
 558:./FreeRTOS/event_groups.c **** 
 518              		.loc 1 558 34 view .LVU169
 519 0012 2B43     		orrs	r3, r3, r5
 520 0014 2360     		str	r3, [r4]
 561:./FreeRTOS/event_groups.c ****         {
 521              		.loc 1 561 9 is_stmt 1 view .LVU170
 540:./FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 522              		.loc 1 540 17 is_stmt 0 view .LVU171
 523 0016 0027     		movs	r7, #0
 561:./FreeRTOS/event_groups.c ****         {
 524              		.loc 1 561 14 view .LVU172
 525 0018 0AE0     		b	.L26
 526              	.LVL55:
 527              	.L27:
 583:./FreeRTOS/event_groups.c ****             {
 528              		.loc 1 583 18 is_stmt 1 view .LVU173
 583:./FreeRTOS/event_groups.c ****             {
 529              		.loc 1 583 53 is_stmt 0 view .LVU174
 530 001a 2168     		ldr	r1, [r4]
 583:./FreeRTOS/event_groups.c ****             {
 531              		.loc 1 583 20 view .LVU175
 532 001c 32EA0101 		bics	r1, r2, r1
 533 0020 05D1     		bne	.L29
 583:./FreeRTOS/event_groups.c ****             {
 534              		.loc 1 583 20 view .LVU176
 535 0022 11E0     		b	.L28
 536              	.LVL56:
 537              	.L30:
 602:./FreeRTOS/event_groups.c ****                 }
 538              		.loc 1 602 45 is_stmt 1 view .LVU177
 610:./FreeRTOS/event_groups.c ****             }
 539              		.loc 1 610 17 view .LVU178
 610:./FreeRTOS/event_groups.c ****             }
 540              		.loc 1 610 75 is_stmt 0 view .LVU179
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 30


 541 0024 2168     		ldr	r1, [r4]
 610:./FreeRTOS/event_groups.c ****             }
 542              		.loc 1 610 17 view .LVU180
 543 0026 41F00071 		orr	r1, r1, #33554432
 544 002a FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 545              	.LVL57:
 546              	.L29:
 535:./FreeRTOS/event_groups.c ****     ListItem_t * pxListItem;
 547              		.loc 1 535 1 view .LVU181
 548 002e 2846     		mov	r0, r5
 549              	.LVL58:
 550              	.L26:
 561:./FreeRTOS/event_groups.c ****         {
 551              		.loc 1 561 27 is_stmt 1 view .LVU182
 552 0030 B042     		cmp	r0, r6
 553 0032 0ED0     		beq	.L33
 563:./FreeRTOS/event_groups.c ****             uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 554              		.loc 1 563 13 view .LVU183
 563:./FreeRTOS/event_groups.c ****             uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 555              		.loc 1 563 20 is_stmt 0 view .LVU184
 556 0034 4568     		ldr	r5, [r0, #4]
 557              	.LVL59:
 564:./FreeRTOS/event_groups.c ****             xMatchFound = pdFALSE;
 558              		.loc 1 564 13 is_stmt 1 view .LVU185
 564:./FreeRTOS/event_groups.c ****             xMatchFound = pdFALSE;
 559              		.loc 1 564 29 is_stmt 0 view .LVU186
 560 0036 0368     		ldr	r3, [r0]
 561              	.LVL60:
 565:./FreeRTOS/event_groups.c **** 
 562              		.loc 1 565 13 is_stmt 1 view .LVU187
 568:./FreeRTOS/event_groups.c ****             uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 563              		.loc 1 568 13 view .LVU188
 569:./FreeRTOS/event_groups.c **** 
 564              		.loc 1 569 13 view .LVU189
 569:./FreeRTOS/event_groups.c **** 
 565              		.loc 1 569 29 is_stmt 0 view .LVU190
 566 0038 23F07F42 		bic	r2, r3, #-16777216
 567              	.LVL61:
 571:./FreeRTOS/event_groups.c ****             {
 568              		.loc 1 571 13 is_stmt 1 view .LVU191
 571:./FreeRTOS/event_groups.c ****             {
 569              		.loc 1 571 15 is_stmt 0 view .LVU192
 570 003c 13F0806F 		tst	r3, #67108864
 571 0040 EBD1     		bne	.L27
 574:./FreeRTOS/event_groups.c ****                 {
 572              		.loc 1 574 17 is_stmt 1 view .LVU193
 574:./FreeRTOS/event_groups.c ****                 {
 573              		.loc 1 574 52 is_stmt 0 view .LVU194
 574 0042 2168     		ldr	r1, [r4]
 574:./FreeRTOS/event_groups.c ****                 {
 575              		.loc 1 574 19 view .LVU195
 576 0044 1142     		tst	r1, r2
 577 0046 F2D0     		beq	.L29
 578              	.L28:
 579              	.LVL62:
 596:./FreeRTOS/event_groups.c ****                 {
 580              		.loc 1 596 17 is_stmt 1 view .LVU196
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 31


 596:./FreeRTOS/event_groups.c ****                 {
 581              		.loc 1 596 19 is_stmt 0 view .LVU197
 582 0048 13F0807F 		tst	r3, #16777216
 583 004c EAD0     		beq	.L30
 598:./FreeRTOS/event_groups.c ****                 }
 584              		.loc 1 598 21 is_stmt 1 view .LVU198
 598:./FreeRTOS/event_groups.c ****                 }
 585              		.loc 1 598 35 is_stmt 0 view .LVU199
 586 004e 1743     		orrs	r7, r7, r2
 587              	.LVL63:
 598:./FreeRTOS/event_groups.c ****                 }
 588              		.loc 1 598 35 view .LVU200
 589 0050 E8E7     		b	.L30
 590              	.LVL64:
 591              	.L33:
 621:./FreeRTOS/event_groups.c ****     }
 592              		.loc 1 621 9 is_stmt 1 view .LVU201
 621:./FreeRTOS/event_groups.c ****     }
 593              		.loc 1 621 20 is_stmt 0 view .LVU202
 594 0052 2368     		ldr	r3, [r4]
 621:./FreeRTOS/event_groups.c ****     }
 595              		.loc 1 621 34 view .LVU203
 596 0054 23EA0703 		bic	r3, r3, r7
 597 0058 2360     		str	r3, [r4]
 623:./FreeRTOS/event_groups.c **** 
 598              		.loc 1 623 5 is_stmt 1 view .LVU204
 623:./FreeRTOS/event_groups.c **** 
 599              		.loc 1 623 14 is_stmt 0 view .LVU205
 600 005a FFF7FEFF 		bl	xTaskResumeAll
 601              	.LVL65:
 625:./FreeRTOS/event_groups.c **** }
 602              		.loc 1 625 5 is_stmt 1 view .LVU206
 626:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 603              		.loc 1 626 1 is_stmt 0 view .LVU207
 604 005e 2068     		ldr	r0, [r4]
 605 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 626:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 606              		.loc 1 626 1 view .LVU208
 607              		.cfi_endproc
 608              	.LFE39:
 610              		.section	.text.xEventGroupSync,"ax",%progbits
 611              		.align	1
 612              		.global	xEventGroupSync
 613              		.syntax unified
 614              		.thumb
 615              		.thumb_func
 617              	xEventGroupSync:
 618              	.LVL66:
 619              	.LFB35:
 198:./FreeRTOS/event_groups.c ****     EventBits_t uxOriginalBitValue, uxReturn;
 620              		.loc 1 198 1 is_stmt 1 view -0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 0
 623              		@ frame_needed = 0, uses_anonymous_args = 0
 198:./FreeRTOS/event_groups.c ****     EventBits_t uxOriginalBitValue, uxReturn;
 624              		.loc 1 198 1 is_stmt 0 view .LVU210
 625 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 32


 626              	.LCFI4:
 627              		.cfi_def_cfa_offset 24
 628              		.cfi_offset 4, -24
 629              		.cfi_offset 5, -20
 630              		.cfi_offset 6, -16
 631              		.cfi_offset 7, -12
 632              		.cfi_offset 8, -8
 633              		.cfi_offset 14, -4
 634 0004 0646     		mov	r6, r0
 635 0006 0D46     		mov	r5, r1
 636 0008 1746     		mov	r7, r2
 637 000a 9846     		mov	r8, r3
 199:./FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 638              		.loc 1 199 5 is_stmt 1 view .LVU211
 200:./FreeRTOS/event_groups.c ****     BaseType_t xAlreadyYielded;
 639              		.loc 1 200 5 view .LVU212
 640              	.LVL67:
 201:./FreeRTOS/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 641              		.loc 1 201 5 view .LVU213
 202:./FreeRTOS/event_groups.c **** 
 642              		.loc 1 202 5 view .LVU214
 204:./FreeRTOS/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 643              		.loc 1 204 77 view .LVU215
 205:./FreeRTOS/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 644              		.loc 1 205 41 view .LVU216
 208:./FreeRTOS/event_groups.c ****     }
 645              		.loc 1 208 110 view .LVU217
 212:./FreeRTOS/event_groups.c ****     {
 646              		.loc 1 212 5 view .LVU218
 647 000c FFF7FEFF 		bl	vTaskSuspendAll
 648              	.LVL68:
 214:./FreeRTOS/event_groups.c **** 
 649              		.loc 1 214 9 view .LVU219
 214:./FreeRTOS/event_groups.c **** 
 650              		.loc 1 214 28 is_stmt 0 view .LVU220
 651 0010 3468     		ldr	r4, [r6]
 652              	.LVL69:
 216:./FreeRTOS/event_groups.c **** 
 653              		.loc 1 216 9 is_stmt 1 view .LVU221
 216:./FreeRTOS/event_groups.c **** 
 654              		.loc 1 216 18 is_stmt 0 view .LVU222
 655 0012 2946     		mov	r1, r5
 656 0014 3046     		mov	r0, r6
 657 0016 FFF7FEFF 		bl	xEventGroupSetBits
 658              	.LVL70:
 218:./FreeRTOS/event_groups.c ****         {
 659              		.loc 1 218 9 is_stmt 1 view .LVU223
 218:./FreeRTOS/event_groups.c ****         {
 660              		.loc 1 218 36 is_stmt 0 view .LVU224
 661 001a 2C43     		orrs	r4, r4, r5
 662              	.LVL71:
 218:./FreeRTOS/event_groups.c ****         {
 663              		.loc 1 218 11 view .LVU225
 664 001c 37EA0403 		bics	r3, r7, r4
 665 0020 1ED0     		beq	.L43
 231:./FreeRTOS/event_groups.c ****             {
 666              		.loc 1 231 13 is_stmt 1 view .LVU226
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 33


 231:./FreeRTOS/event_groups.c ****             {
 667              		.loc 1 231 15 is_stmt 0 view .LVU227
 668 0022 B8F1000F 		cmp	r8, #0
 669 0026 22D1     		bne	.L44
 250:./FreeRTOS/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 670              		.loc 1 250 17 is_stmt 1 view .LVU228
 250:./FreeRTOS/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 671              		.loc 1 250 26 is_stmt 0 view .LVU229
 672 0028 3468     		ldr	r4, [r6]
 673              	.LVL72:
 251:./FreeRTOS/event_groups.c ****             }
 674              		.loc 1 251 17 is_stmt 1 view .LVU230
 675              	.L36:
 255:./FreeRTOS/event_groups.c **** 
 676              		.loc 1 255 5 view .LVU231
 255:./FreeRTOS/event_groups.c **** 
 677              		.loc 1 255 23 is_stmt 0 view .LVU232
 678 002a FFF7FEFF 		bl	xTaskResumeAll
 679              	.LVL73:
 257:./FreeRTOS/event_groups.c ****     {
 680              		.loc 1 257 5 is_stmt 1 view .LVU233
 257:./FreeRTOS/event_groups.c ****     {
 681              		.loc 1 257 7 is_stmt 0 view .LVU234
 682 002e B8F1000F 		cmp	r8, #0
 683 0032 12D0     		beq	.L34
 259:./FreeRTOS/event_groups.c ****         {
 684              		.loc 1 259 9 is_stmt 1 view .LVU235
 259:./FreeRTOS/event_groups.c ****         {
 685              		.loc 1 259 11 is_stmt 0 view .LVU236
 686 0034 48B9     		cbnz	r0, .L39
 261:./FreeRTOS/event_groups.c ****         }
 687              		.loc 1 261 13 is_stmt 1 view .LVU237
 688 0036 4FF0E023 		mov	r3, #-536813568
 689 003a 4FF08052 		mov	r2, #268435456
 690 003e C3F8042D 		str	r2, [r3, #3332]
 261:./FreeRTOS/event_groups.c ****         }
 691              		.loc 1 261 13 view .LVU238
 692              		.syntax unified
 693              	@ 261 "./FreeRTOS/event_groups.c" 1
 694 0042 BFF34F8F 		dsb
 695              	@ 0 "" 2
 261:./FreeRTOS/event_groups.c ****         }
 696              		.loc 1 261 13 view .LVU239
 697              	@ 261 "./FreeRTOS/event_groups.c" 1
 698 0046 BFF36F8F 		isb
 699              	@ 0 "" 2
 261:./FreeRTOS/event_groups.c ****         }
 700              		.loc 1 261 35 view .LVU240
 701              		.thumb
 702              		.syntax unified
 703              	.L39:
 265:./FreeRTOS/event_groups.c ****         }
 704              		.loc 1 265 37 view .LVU241
 272:./FreeRTOS/event_groups.c **** 
 705              		.loc 1 272 9 view .LVU242
 272:./FreeRTOS/event_groups.c **** 
 706              		.loc 1 272 20 is_stmt 0 view .LVU243
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 34


 707 004a FFF7FEFF 		bl	uxTaskResetEventItemValue
 708              	.LVL74:
 272:./FreeRTOS/event_groups.c **** 
 709              		.loc 1 272 20 view .LVU244
 710 004e 0446     		mov	r4, r0
 711              	.LVL75:
 274:./FreeRTOS/event_groups.c ****         {
 712              		.loc 1 274 9 is_stmt 1 view .LVU245
 274:./FreeRTOS/event_groups.c ****         {
 713              		.loc 1 274 11 is_stmt 0 view .LVU246
 714 0050 10F0007F 		tst	r0, #33554432
 715 0054 13D0     		beq	.L45
 716              	.LVL76:
 717              	.L40:
 301:./FreeRTOS/event_groups.c **** 
 718              		.loc 1 301 9 is_stmt 1 view .LVU247
 305:./FreeRTOS/event_groups.c ****     }
 719              		.loc 1 305 9 view .LVU248
 305:./FreeRTOS/event_groups.c ****     }
 720              		.loc 1 305 18 is_stmt 0 view .LVU249
 721 0056 24F07F44 		bic	r4, r4, #-16777216
 722              	.LVL77:
 308:./FreeRTOS/event_groups.c **** 
 723              		.loc 1 308 5 is_stmt 1 view .LVU250
 311:./FreeRTOS/event_groups.c **** 
 724              		.loc 1 311 5 view .LVU251
 313:./FreeRTOS/event_groups.c **** }
 725              		.loc 1 313 5 view .LVU252
 726              	.L34:
 314:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 727              		.loc 1 314 1 is_stmt 0 view .LVU253
 728 005a 2046     		mov	r0, r4
 729 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 730              	.LVL78:
 731              	.L43:
 221:./FreeRTOS/event_groups.c **** 
 732              		.loc 1 221 13 is_stmt 1 view .LVU254
 225:./FreeRTOS/event_groups.c **** 
 733              		.loc 1 225 13 view .LVU255
 225:./FreeRTOS/event_groups.c **** 
 734              		.loc 1 225 24 is_stmt 0 view .LVU256
 735 0060 3368     		ldr	r3, [r6]
 225:./FreeRTOS/event_groups.c **** 
 736              		.loc 1 225 38 view .LVU257
 737 0062 23EA0703 		bic	r3, r3, r7
 738 0066 3360     		str	r3, [r6]
 227:./FreeRTOS/event_groups.c ****         }
 739              		.loc 1 227 13 is_stmt 1 view .LVU258
 740              	.LVL79:
 227:./FreeRTOS/event_groups.c ****         }
 741              		.loc 1 227 26 is_stmt 0 view .LVU259
 742 0068 4FF00008 		mov	r8, #0
 743 006c DDE7     		b	.L36
 744              	.LVL80:
 745              	.L44:
 233:./FreeRTOS/event_groups.c **** 
 746              		.loc 1 233 89 is_stmt 1 view .LVU260
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 35


 238:./FreeRTOS/event_groups.c **** 
 747              		.loc 1 238 17 view .LVU261
 748 006e 4246     		mov	r2, r8
 749 0070 47F0A061 		orr	r1, r7, #83886080
 750 0074 301D     		adds	r0, r6, #4
 751 0076 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 752              	.LVL81:
 244:./FreeRTOS/event_groups.c ****             }
 753              		.loc 1 244 17 view .LVU262
 244:./FreeRTOS/event_groups.c ****             }
 754              		.loc 1 244 26 is_stmt 0 view .LVU263
 755 007a 0024     		movs	r4, #0
 756 007c D5E7     		b	.L36
 757              	.LVL82:
 758              	.L45:
 277:./FreeRTOS/event_groups.c ****             {
 759              		.loc 1 277 13 is_stmt 1 view .LVU264
 760 007e FFF7FEFF 		bl	vPortEnterCritical
 761              	.LVL83:
 279:./FreeRTOS/event_groups.c **** 
 762              		.loc 1 279 17 view .LVU265
 279:./FreeRTOS/event_groups.c **** 
 763              		.loc 1 279 26 is_stmt 0 view .LVU266
 764 0082 3468     		ldr	r4, [r6]
 765              	.LVL84:
 285:./FreeRTOS/event_groups.c ****                 {
 766              		.loc 1 285 17 is_stmt 1 view .LVU267
 285:./FreeRTOS/event_groups.c ****                 {
 767              		.loc 1 285 19 is_stmt 0 view .LVU268
 768 0084 37EA0403 		bics	r3, r7, r4
 769 0088 02D0     		beq	.L46
 770              	.LVL85:
 771              	.L41:
 291:./FreeRTOS/event_groups.c ****                 }
 772              		.loc 1 291 45 is_stmt 1 view .LVU269
 294:./FreeRTOS/event_groups.c **** 
 773              		.loc 1 294 13 view .LVU270
 774 008a FFF7FEFF 		bl	vPortExitCritical
 775              	.LVL86:
 296:./FreeRTOS/event_groups.c ****         }
 776              		.loc 1 296 13 view .LVU271
 296:./FreeRTOS/event_groups.c ****         }
 777              		.loc 1 296 13 is_stmt 0 view .LVU272
 778 008e E2E7     		b	.L40
 779              	.LVL87:
 780              	.L46:
 287:./FreeRTOS/event_groups.c ****                 }
 781              		.loc 1 287 21 is_stmt 1 view .LVU273
 287:./FreeRTOS/event_groups.c ****                 }
 782              		.loc 1 287 46 is_stmt 0 view .LVU274
 783 0090 24EA0707 		bic	r7, r4, r7
 784              	.LVL88:
 287:./FreeRTOS/event_groups.c ****                 }
 785              		.loc 1 287 46 view .LVU275
 786 0094 3760     		str	r7, [r6]
 787 0096 F8E7     		b	.L41
 788              		.cfi_endproc
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 36


 789              	.LFE35:
 791              		.section	.text.vEventGroupDelete,"ax",%progbits
 792              		.align	1
 793              		.global	vEventGroupDelete
 794              		.syntax unified
 795              		.thumb
 796              		.thumb_func
 798              	vEventGroupDelete:
 799              	.LVL89:
 800              	.LFB40:
 630:./FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 801              		.loc 1 630 1 is_stmt 1 view -0
 802              		.cfi_startproc
 803              		@ args = 0, pretend = 0, frame = 0
 804              		@ frame_needed = 0, uses_anonymous_args = 0
 630:./FreeRTOS/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 805              		.loc 1 630 1 is_stmt 0 view .LVU277
 806 0000 10B5     		push	{r4, lr}
 807              	.LCFI5:
 808              		.cfi_def_cfa_offset 8
 809              		.cfi_offset 4, -8
 810              		.cfi_offset 14, -4
 811 0002 0446     		mov	r4, r0
 631:./FreeRTOS/event_groups.c ****     const List_t * pxTasksWaitingForBits;
 812              		.loc 1 631 5 is_stmt 1 view .LVU278
 813              	.LVL90:
 632:./FreeRTOS/event_groups.c **** 
 814              		.loc 1 632 5 view .LVU279
 634:./FreeRTOS/event_groups.c **** 
 815              		.loc 1 634 32 view .LVU280
 636:./FreeRTOS/event_groups.c **** 
 816              		.loc 1 636 5 view .LVU281
 638:./FreeRTOS/event_groups.c ****     {
 817              		.loc 1 638 5 view .LVU282
 818 0004 FFF7FEFF 		bl	vTaskSuspendAll
 819              	.LVL91:
 640:./FreeRTOS/event_groups.c **** 
 820              		.loc 1 640 47 view .LVU283
 642:./FreeRTOS/event_groups.c ****         {
 821              		.loc 1 642 9 view .LVU284
 642:./FreeRTOS/event_groups.c ****         {
 822              		.loc 1 642 14 is_stmt 0 view .LVU285
 823 0008 04E0     		b	.L48
 824              	.L49:
 646:./FreeRTOS/event_groups.c ****             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 825              		.loc 1 646 130 is_stmt 1 view .LVU286
 647:./FreeRTOS/event_groups.c ****         }
 826              		.loc 1 647 13 view .LVU287
 827 000a 4FF00071 		mov	r1, #33554432
 828 000e 2069     		ldr	r0, [r4, #16]
 829 0010 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 830              	.LVL92:
 831              	.L48:
 642:./FreeRTOS/event_groups.c ****         {
 832              		.loc 1 642 65 view .LVU288
 642:./FreeRTOS/event_groups.c ****         {
 833              		.loc 1 642 16 is_stmt 0 view .LVU289
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 37


 834 0014 6368     		ldr	r3, [r4, #4]
 642:./FreeRTOS/event_groups.c ****         {
 835              		.loc 1 642 65 view .LVU290
 836 0016 002B     		cmp	r3, #0
 837 0018 F7D1     		bne	.L49
 650:./FreeRTOS/event_groups.c **** 
 838              		.loc 1 650 5 is_stmt 1 view .LVU291
 650:./FreeRTOS/event_groups.c **** 
 839              		.loc 1 650 14 is_stmt 0 view .LVU292
 840 001a FFF7FEFF 		bl	xTaskResumeAll
 841              	.LVL93:
 656:./FreeRTOS/event_groups.c ****     }
 842              		.loc 1 656 9 is_stmt 1 view .LVU293
 843 001e 2046     		mov	r0, r4
 844 0020 FFF7FEFF 		bl	vPortFree
 845              	.LVL94:
 672:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 846              		.loc 1 672 1 is_stmt 0 view .LVU294
 847 0024 10BD     		pop	{r4, pc}
 672:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 848              		.loc 1 672 1 view .LVU295
 849              		.cfi_endproc
 850              	.LFE40:
 852              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 853              		.align	1
 854              		.global	vEventGroupSetBitsCallback
 855              		.syntax unified
 856              		.thumb
 857              		.thumb_func
 859              	vEventGroupSetBitsCallback:
 860              	.LVL95:
 861              	.LFB41:
 679:./FreeRTOS/event_groups.c ****     ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't a
 862              		.loc 1 679 1 is_stmt 1 view -0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 0
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 679:./FreeRTOS/event_groups.c ****     ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't a
 866              		.loc 1 679 1 is_stmt 0 view .LVU297
 867 0000 08B5     		push	{r3, lr}
 868              	.LCFI6:
 869              		.cfi_def_cfa_offset 8
 870              		.cfi_offset 3, -8
 871              		.cfi_offset 14, -4
 680:./FreeRTOS/event_groups.c **** }
 872              		.loc 1 680 5 is_stmt 1 view .LVU298
 680:./FreeRTOS/event_groups.c **** }
 873              		.loc 1 680 14 is_stmt 0 view .LVU299
 874 0002 FFF7FEFF 		bl	xEventGroupSetBits
 875              	.LVL96:
 681:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 876              		.loc 1 681 1 view .LVU300
 877 0006 08BD     		pop	{r3, pc}
 878              		.cfi_endproc
 879              	.LFE41:
 881              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 882              		.align	1
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 38


 883              		.global	vEventGroupClearBitsCallback
 884              		.syntax unified
 885              		.thumb
 886              		.thumb_func
 888              	vEventGroupClearBitsCallback:
 889              	.LVL97:
 890              	.LFB42:
 688:./FreeRTOS/event_groups.c ****     ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can
 891              		.loc 1 688 1 is_stmt 1 view -0
 892              		.cfi_startproc
 893              		@ args = 0, pretend = 0, frame = 0
 894              		@ frame_needed = 0, uses_anonymous_args = 0
 688:./FreeRTOS/event_groups.c ****     ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can
 895              		.loc 1 688 1 is_stmt 0 view .LVU302
 896 0000 08B5     		push	{r3, lr}
 897              	.LCFI7:
 898              		.cfi_def_cfa_offset 8
 899              		.cfi_offset 3, -8
 900              		.cfi_offset 14, -4
 689:./FreeRTOS/event_groups.c **** }
 901              		.loc 1 689 5 is_stmt 1 view .LVU303
 689:./FreeRTOS/event_groups.c **** }
 902              		.loc 1 689 14 is_stmt 0 view .LVU304
 903 0002 FFF7FEFF 		bl	xEventGroupClearBits
 904              	.LVL98:
 690:./FreeRTOS/event_groups.c **** /*-----------------------------------------------------------*/
 905              		.loc 1 690 1 view .LVU305
 906 0006 08BD     		pop	{r3, pc}
 907              		.cfi_endproc
 908              	.LFE42:
 910              		.text
 911              	.Letext0:
 912              		.file 3 "c:\\vscode_tool_chain\\gcc\\12.2 mpacbti-rel1\\lib\\gcc\\arm-none-eabi\\12.2.1\\include\\
 913              		.file 4 "c:\\vscode_tool_chain\\gcc\\12.2 mpacbti-rel1\\arm-none-eabi\\include\\machine\\_default_
 914              		.file 5 "c:\\vscode_tool_chain\\gcc\\12.2 mpacbti-rel1\\arm-none-eabi\\include\\sys\\_stdint.h"
 915              		.file 6 "FreeRTOS/include/list.h"
 916              		.file 7 "FreeRTOS/include/event_groups.h"
 917              		.file 8 "FreeRTOS/include/portable.h"
 918              		.file 9 "FreeRTOS/include/task.h"
ARM GAS  C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s 			page 39


DEFINED SYMBOLS
                            *ABS*:00000000 event_groups.c
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:19     .text.prvTestWaitCondition:00000000 $t
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:24     .text.prvTestWaitCondition:00000000 prvTestWaitCondition
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:78     .text.xEventGroupCreate:00000000 $t
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:84     .text.xEventGroupCreate:00000000 xEventGroupCreate
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:125    .text.xEventGroupWaitBits:00000000 $t
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:131    .text.xEventGroupWaitBits:00000000 xEventGroupWaitBits
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:345    .text.xEventGroupClearBits:00000000 $t
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:351    .text.xEventGroupClearBits:00000000 xEventGroupClearBits
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:399    .text.xEventGroupGetBitsFromISR:00000000 $t
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:405    .text.xEventGroupGetBitsFromISR:00000000 xEventGroupGetBitsFromISR
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:467    .text.xEventGroupSetBits:00000000 $t
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:473    .text.xEventGroupSetBits:00000000 xEventGroupSetBits
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:611    .text.xEventGroupSync:00000000 $t
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:617    .text.xEventGroupSync:00000000 xEventGroupSync
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:792    .text.vEventGroupDelete:00000000 $t
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:798    .text.vEventGroupDelete:00000000 vEventGroupDelete
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:853    .text.vEventGroupSetBitsCallback:00000000 $t
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:859    .text.vEventGroupSetBitsCallback:00000000 vEventGroupSetBitsCallback
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:882    .text.vEventGroupClearBitsCallback:00000000 $t
C:\Users\24105\AppData\Local\Temp\ccfzzlK9.s:888    .text.vEventGroupClearBitsCallback:00000000 vEventGroupClearBitsCallback

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
vTaskSuspendAll
vTaskPlaceOnUnorderedEventList
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
vTaskRemoveFromUnorderedEventList
vPortFree
